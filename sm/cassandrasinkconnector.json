{
  "template_id": "CassandraSinkConnector",
  "connector_type": "SINK",
  "connector.class": "io.confluent.connect.cassandra.CassandraSinkConnector",
  "name": "{{.logicalClusterId}}",
  "imports": [],
  "group_order": [
    "Connection",
    "Keyspace",
    "SSL",
    "Kerberos",
    "Table",
    "Write",
    "CSFLE configuration",
    "Confluent Platform license",
    "Confluent license properties",
    "License topic configuration",
    "License topic ACLs",
    "Override Default Configuration Properties"
  ],
  "config_defs": [
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 1,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 1
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 2,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 3,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 4,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 5,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 6,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 7,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 8,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 9,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 10,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 11,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 12,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 13,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 14,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 15,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 16,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 17,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 18,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 19,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 20,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 21,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 22,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 22
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 23,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 23
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 24,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 24
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 25,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 25
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 26,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 26
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 27,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 27
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 28,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 28
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 29,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 29
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 30,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 30
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 31,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 31
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 32,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 32
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 33,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 33
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 34,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 34
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 35,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 35
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 36,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 36
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 37,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 37
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 38,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 38
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 39,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 39
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 40,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 40
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 41,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 41
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 42,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 42
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 43,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 43
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 44,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 44
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 45,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 45
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 46,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 46
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 47,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 47
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 48,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 48
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 49,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 49
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 50,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 50
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 51,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 51
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 52,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 52
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 53,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 53
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 54,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 54
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 55,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 55
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 56,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 56
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 57,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 57
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 58,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 58
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 59,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 59
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 60,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 60
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 61,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 61
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 62,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 62
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 63,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 63
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 64,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 64
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 65,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 65
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 66,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 66
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 67,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 67
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 68,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 68
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 69,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 69
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 70,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 70
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 71,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 71
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 72,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 72
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 73,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 73
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 74,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 74
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 75,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 75
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 76,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 76
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 77,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 77
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 78,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 78
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 79,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 79
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 80,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 80
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 81,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 81
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 82,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 82
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 83,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 83
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 84,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 84
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 85,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 85
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 86,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 86
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 87,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 87
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 88,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 88
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 89,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 89
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 90,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 90
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 91,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 91
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 92,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 92
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 93,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 93
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 94,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 94
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 95,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 95
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 96,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 96
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 97,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 97
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 98,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 98
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 99,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 99
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 100,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 100
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 101,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 101
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 102,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 102
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 103,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 103
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 104,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 104
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 105,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 105
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 106,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 106
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 107,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 107
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 108,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 108
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 109,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 109
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 110,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 110
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 111,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 111
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 112,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 112
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 113,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 113
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 114,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 114
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 115,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 115
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 116,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 116
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 117,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 117
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 118,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 118
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 119,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 119
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 120,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 120
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 121,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 121
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 122,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 122
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 123,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 123
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 124,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 124
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 125,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 125
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 126,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 126
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 127,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 127
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 128,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 128
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 129,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 129
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 130,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 130
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 131,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 131
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 132,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 132
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 133,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 133
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 134,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 134
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 135,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 135
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 136,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 136
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 137,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 137
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 138,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 138
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 139,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 139
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 140,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 140
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 141,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 141
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 142,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 142
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 143,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 143
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 144,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 144
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 145,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 145
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 146,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 146
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 147,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 147
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 148,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 148
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 149,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 149
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 150,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 150
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 151,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 151
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 152,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 152
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 153,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 153
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 154,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 154
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 155,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 155
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 156,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 156
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 157,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 157
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 158,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 158
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 159,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 159
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 160,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 160
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 161,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 161
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 162,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 162
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 163,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 163
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 164,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 164
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 165,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 165
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 166,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 166
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 167,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 167
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 168,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 168
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 169,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 169
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 170,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 170
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 171,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 171
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 172,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 172
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 173,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 173
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 174,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 174
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 175,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 175
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 176,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 176
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 177,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 177
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 178,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 178
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 179,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 179
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 180,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 180
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 181,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 181
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 182,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 182
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 183,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 183
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 184,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 184
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 185,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 185
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 186,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 186
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 187,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 187
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 188,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 188
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 189,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 189
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 190,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 190
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 191,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 191
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 192,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 192
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 193,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 193
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 194,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 194
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 195,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 195
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 196,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 196
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 197,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 197
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 198,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 198
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 199,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 199
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 200,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 200
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 201,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 201
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 202,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 202
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 203,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 203
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 204,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 204
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 205,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 205
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 206,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 206
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 207,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 207
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 208,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 208
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 209,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 209
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 210,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 210
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 211,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 211
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 212,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 212
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 213,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 213
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 214,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 214
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 215,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 215
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 216,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 216
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 217,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 217
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 218,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 218
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 219,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 219
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 220,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 220
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 221,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 221
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 222,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 222
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 223,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 223
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 224,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 224
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 225,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 225
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 226,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 226
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 227,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 227
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 228,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 228
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 229,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 229
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 230,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 230
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 231,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 231
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 232,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 232
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 233,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 233
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 234,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 234
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 235,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 235
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 236,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 236
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 237,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 237
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 238,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 238
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 239,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 239
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 240,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 240
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 241,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 241
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 242,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 242
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 243,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 243
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 244,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 244
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 245,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 245
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 246,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 246
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 247,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 247
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 248,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 248
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 249,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 249
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 250,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 250
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 251,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 251
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 252,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 252
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 253,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 253
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 254,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 254
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 255,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 255
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 256,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 256
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 257,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 257
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 258,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 258
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 259,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 259
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 260,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 260
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 261,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 261
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 262,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 262
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 263,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 263
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 264,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 264
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 265,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 265
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 266,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 266
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 267,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 267
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 268,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 268
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 269,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 269
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 270,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 270
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 271,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 271
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 272,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 272
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 273,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 273
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 274,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 274
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 275,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 275
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 276,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 276
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 277,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 277
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 278,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 278
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 279,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 279
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 280,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 280
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 281,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 281
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 282,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 282
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 283,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 283
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 284,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 284
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 285,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 285
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 286,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 286
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 287,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 287
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 288,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 288
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 289,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 289
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 290,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 290
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 291,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 291
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 292,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 292
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 293,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 293
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 294,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 294
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 295,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 295
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 296,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 296
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 297,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 297
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 298,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 298
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 299,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 299
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 300,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 300
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 301,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 301
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 302,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 302
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 303,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 303
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 304,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 304
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 305,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 305
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 306,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 306
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 307,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 307
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 308,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 308
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 309,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 309
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 310,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 310
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 311,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 311
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 312,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 312
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 313,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 313
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 314,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 314
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 315,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 315
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 316,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 316
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 317,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 317
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 318,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 318
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 319,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 319
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 320,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 320
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 321,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 321
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 322,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 322
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 323,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 323
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 324,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 324
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 325,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 325
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 326,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 326
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 327,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 327
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 328,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 328
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 329,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 329
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 330,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 330
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 331,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 331
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 332,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 332
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 333,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 333
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "cassandra.contact.points",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 334,
      "display_name": "cassandra.contact.points",
      "documentation": "The Cassandra hosts to connect to.Type: listImportance: highDefault Value: No default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 334
      }
    },
    {
      "name": "cassandra.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 335,
      "display_name": "cassandra.password",
      "documentation": "The password to connect to Cassandra with.Type: passwordImportance: highDefault Value: [hidden]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 335
      }
    },
    {
      "name": "cassandra.local.datacenter",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 336,
      "display_name": "cassandra.local.datacenter",
      "documentation": "The local datacenter of the Cassandra contact points. Run the following CQL\nagainst a contact point to find it:SELECTdata_centerFROMsystem.local;.Type: stringImportance: highDefault Value: No Default",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 336
      }
    },
    {
      "name": "cassandra.security",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 337,
      "display_name": "cassandra.security",
      "documentation": "The authentication protocol to use against Cassandra. Supports plain text\npassword authentication, Kerberos, or no authentication.cassandra.security.enabledwas replaced withcassandra.securityin\nversion 2.0.0 of the connector.Type: stringImportance: highDefault Value: trueValid Values: [NONE, PASSWORD, KERBEROS]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 337
      },
      "valid_values": [
        "none",
        "password",
        "kerberos"
      ]
    },
    {
      "name": "cassandra.ssl.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 338,
      "display_name": "cassandra.ssl.enabled",
      "documentation": "Flag to determine if SSL is enabled when connecting to Cassandra.Type: booleanImportance: highDefault Value: false",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 338
      }
    },
    {
      "name": "cassandra.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 339,
      "display_name": "cassandra.username",
      "documentation": "The username to connect to Cassandra with.Type: stringImportance: highDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 339
      }
    },
    {
      "name": "cassandra.port",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 340,
      "display_name": "cassandra.port",
      "documentation": "The port the Cassandra hosts are listening on.Type: IntImportance: mediumDefault Value: 9042Valid Values: ValidPort{start=1025, end=65535}",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 340
      }
    },
    {
      "name": "cassandra.compression",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 341,
      "display_name": "cassandra.compression",
      "documentation": "Compression algorithm to use when connecting to Cassandra.Type: stringImportance: lowDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 341
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4"
      ]
    },
    {
      "name": "cassandra.keyspace",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Keyspace",
      "order_in_group": 342,
      "display_name": "cassandra.keyspace",
      "documentation": "The keyspace to write to.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 342
      }
    },
    {
      "name": "cassandra.keyspace.create.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Keyspace",
      "order_in_group": 343,
      "display_name": "cassandra.keyspace.create.enabled",
      "documentation": "Flag to determine if the keyspace should be created if it does not exist.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 343
      }
    },
    {
      "name": "cassandra.ssl.truststore.password",
      "type": "PASSWORDIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "SSL",
      "order_in_group": 344,
      "display_name": "cassandra.ssl.truststore.password",
      "documentation": "Password to open the Java Truststore with.Type: passwordImportance: mediumDefault Value: [hidden]Valid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 344
      }
    },
    {
      "name": "cassandra.ssl.truststore.path",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "SSL",
      "order_in_group": 345,
      "display_name": "cassandra.ssl.truststore.path",
      "documentation": "Path to the Java Truststore.Type: stringImportance: mediumValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 345
      }
    },
    {
      "name": "cassandra.ssl.provider[DEPRECATED]",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "SSL",
      "order_in_group": 346,
      "display_name": "cassandra.ssl.provider[DEPRECATED]",
      "documentation": "This configuration is no longer supported. Only Java\u00e2\u0080\u0099s SSL implementation is supported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 346
      }
    },
    {
      "name": "connect.cassandra.principal",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Kerberos",
      "order_in_group": 347,
      "display_name": "connect.cassandra.principal",
      "documentation": "The principal to use when connecting to Cassandra with KerberosType: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009d",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 347
      }
    },
    {
      "name": "connect.cassandra.keytab",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Kerberos",
      "order_in_group": 348,
      "display_name": "connect.cassandra.keytab",
      "documentation": "The path to the keytab file for the Cassandra connector principal. This keytab\nfile should only be readable by the connector.Type: stringImportance: highDefault Value: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Empty String or Absolute path to a file that exists.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 348
      }
    },
    {
      "name": "cassandra.kerberos.sasl.protocol",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Kerberos",
      "order_in_group": 349,
      "display_name": "cassandra.kerberos.sasl.protocol",
      "documentation": "The protocol that will be used, which should match the service portion of the\nCassandra service principal (for example, if set tocassandra, the Cassandra\nservice principal must besomeuser/cassandra@realm).Type: stringImportance: lowDefault Value: cassandra",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 349
      }
    },
    {
      "name": "cassandra.table.manage.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Table",
      "order_in_group": 350,
      "display_name": "cassandra.table.manage.enabled",
      "documentation": "Flag to determine if the connector should manage the table.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 350
      }
    },
    {
      "name": "cassandra.table.create.caching",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Table",
      "order_in_group": 351,
      "display_name": "cassandra.table.create.caching",
      "documentation": "Caching setting to use. IfN_ROWSis set, usecassandra.table.create.caching.rows.per.partitionto pick the number of rows\nto cache per partition.Type: stringImportance: mediumDefault Value: NONEValid Values:ALL,KEYS_ONLY,ROWS_ONLY,NONE,N_ROWS",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 351
      }
    },
    {
      "name": "cassandra.table.create.caching.rows.per.partition",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Table",
      "order_in_group": 352,
      "display_name": "cassandra.table.create.caching.rows.per.partition",
      "documentation": "Number of rows per partition to cache. Ignored unlesscassandra.table.create.cachingis set toN_ROWS.Type: IntImportance: lowDefault Value: 1000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 352
      }
    },
    {
      "name": "cassandra.table.create.compression.algorithm",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Table",
      "order_in_group": 353,
      "display_name": "cassandra.table.create.compression.algorithm",
      "documentation": "Compression algorithm to use when the table is created.Type: stringImportance: mediumDefault Value: NONEValid Values: [NONE, SNAPPY, LZ4, DEFLATE]",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 353
      },
      "valid_values": [
        "none",
        "snappy",
        "lz4",
        "deflate"
      ]
    },
    {
      "name": "cassandra.offset.storage.table",
      "type": "STRINGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Table",
      "order_in_group": 354,
      "display_name": "cassandra.offset.storage.table",
      "documentation": "The table within the Cassandra keyspace to store the offsets that have been\nread from Apache Kafka\u00c2\u00ae. This is used to enable exactly once delivery to Cassandra.Type: stringImportance: lowDefault: kafka_connect_offsets",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 354
      },
      "default": "kafka_connect_offsets"
    },
    {
      "name": "cassandra.consistency.level",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Write",
      "order_in_group": 355,
      "display_name": "cassandra.consistency.level",
      "documentation": "The requested consistency level to use when writing to Cassandra.Type: stringImportance: highDefault Value: LOCAL_QUORUMValid Values:ANY,ONE,TWO,THREE,QUORUM,ALL,LOCAL_QUORUM,EACH_QUORUM,SERIAL,LOCAL_SERIAL,LOCAL_ONE",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 355
      }
    },
    {
      "name": "cassandra.deletes.enabled",
      "type": "BOOLEANIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Write",
      "order_in_group": 356,
      "display_name": "cassandra.deletes.enabled",
      "documentation": "Flag to determine if the connector should process deletes.Type: booleanImportance: highDefault Value: true",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 356
      }
    },
    {
      "name": "cassandra.write.mode",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Write",
      "order_in_group": 357,
      "display_name": "cassandra.write.mode",
      "documentation": "The type of statement to build when writing to Cassandra.Type: stringImportance: highDefault Value: Insert",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 357
      }
    },
    {
      "name": "cassandra.execute.timeout.ms",
      "type": "LONGIMPORTANCE",
      "required": false,
      "importance": "LOW",
      "group": "Write",
      "order_in_group": 358,
      "display_name": "cassandra.execute.timeout.ms",
      "documentation": "The timeout for executing a Cassandra statement.Type: longImportance: lowDefault Value: 30000",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 358
      }
    },
    {
      "name": "cassandra.ttl",
      "type": "INTIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Write",
      "order_in_group": 359,
      "display_name": "cassandra.ttl",
      "documentation": "The retention period for the data in Cassandra. After this interval elapses,\nCassandra will remove these records.Type: IntImportance: mediumDefault Value: null",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 359
      }
    },
    {
      "name": "cassandra.offset.storage.table.enable",
      "type": "BOOLEANIMPORTANCE",
      "required": false,
      "importance": "MEDIUM",
      "group": "Write",
      "order_in_group": 360,
      "display_name": "cassandra.offset.storage.table.enable",
      "documentation": "Iftrue, Kafka consumer offsets will be stored in the Cassandra table. Iffalse, the connector will skip writing offset information into Cassandra (this\nmight imply duplicate writes into Cassandra when a task restarts).Type: booleanImportance: mediumDefault Value: True",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 360
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 361,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the formhost1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers. However, you may want more than one, in case a server is down.Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 361
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 362,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 362
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 363,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 363
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 364,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 364
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 365,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 365
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 366,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 366
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 367,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 367
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 368,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 368
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "CSFLE configuration",
      "order_in_group": 369,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 369
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "CSFLE configuration",
      "order_in_group": 370,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 370
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 371,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 371
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 372,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 372
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 373,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 373
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 374,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 374
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 375,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 375
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 376,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 376
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Confluent license properties",
      "order_in_group": 377,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 377
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "Search by configuration property name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "Search by configuration property name",
      "documentation": "Enter a string to search and filter by configuration property name.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "name",
      "documentation": "Globally unique name to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "connector.class",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 3,
      "display_name": "connector.class",
      "documentation": "Name or alias of the class for this connector. Must be a subclass of org.apache.kafka.connect.connector.Connector. If the connector is org.apache.kafka.connect.file.FileStreamSinkConnector, you can either specify this full name,  or use \u00e2\u0080\u009cFileStreamSink\u00e2\u0080\u009d or \u00e2\u0080\u009cFileStreamSinkConnector\u00e2\u0080\u009d to make the configuration a bit shorter",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      }
    },
    {
      "name": "tasks.max",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 4,
      "display_name": "tasks.max",
      "documentation": "Maximum number of tasks to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      }
    },
    {
      "name": "topics",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 5,
      "display_name": "topics",
      "documentation": "List of topics to consume, separated by commas",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      }
    },
    {
      "name": "topics.regex",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 6,
      "display_name": "topics.regex",
      "documentation": "Regular expression giving topics to consume. Under the hood, the regex is compiled to ajava.util.regex.Pattern. Only one of topics or topics.regex should be specified.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      }
    },
    {
      "name": "tasks.max.enforce",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 7,
      "display_name": "tasks.max.enforce",
      "documentation": "(Deprecated) Whether to enforce that the tasks.max property is respected by the connector. By default, connectors that generate too many tasks will fail, and existing sets of tasks that exceed the tasks.max property will also be failed. If this property is set to false, then connectors will be allowed to generate more than the maximum number of tasks, and existing sets of tasks that exceed the tasks.max property will be allowed to run. This property is deprecated and will be removed in an upcoming major release.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      }
    },
    {
      "name": "key.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 8,
      "display_name": "key.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      }
    },
    {
      "name": "value.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 9,
      "display_name": "value.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      }
    },
    {
      "name": "header.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 10,
      "display_name": "header.converter",
      "documentation": "HeaderConverter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the header values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. By default, the SimpleHeaderConverter is used to serialize header values to strings and deserialize them by inferring the schemas.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      }
    },
    {
      "name": "config.action.reload",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 11,
      "display_name": "config.action.reload",
      "documentation": "The action that Connect should take on the connector when changes in external configuration providers result in a change in the connector\u00e2\u0080\u0099s configuration properties. A value of \u00e2\u0080\u0098none\u00e2\u0080\u0099 indicates that Connect will do nothing. A value of \u00e2\u0080\u0098restart\u00e2\u0080\u0099 indicates that Connect should restart/reload the connector with the updated configuration properties.The restart may actually be scheduled in the future if the external configuration provider indicates that a configuration value will expire in the future.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      }
    },
    {
      "name": "transforms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 12,
      "display_name": "transforms",
      "documentation": "Aliases for the transformations to be applied to records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      }
    },
    {
      "name": "predicates",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 13,
      "display_name": "predicates",
      "documentation": "Aliases for the predicates used by transformations.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      }
    },
    {
      "name": "errors.retry.timeout",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 14,
      "display_name": "errors.retry.timeout",
      "documentation": "The maximum duration in milliseconds that a failed operation will be reattempted. The default is 0, which means no retries will be attempted. Use -1 for infinite retries.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      }
    },
    {
      "name": "errors.retry.delay.max.ms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 15,
      "display_name": "errors.retry.delay.max.ms",
      "documentation": "The maximum duration in milliseconds between consecutive retry attempts. Jitter will be added to the delay once this limit is reached to prevent thundering herd issues.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      }
    },
    {
      "name": "errors.tolerance",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 16,
      "display_name": "errors.tolerance",
      "documentation": "Behavior for tolerating errors during connector operation. \u00e2\u0080\u0098none\u00e2\u0080\u0099 is the default value and signals that any error will result in an immediate connector task failure; \u00e2\u0080\u0098all\u00e2\u0080\u0099 changes the behavior to skip over problematic records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      }
    },
    {
      "name": "errors.log.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 17,
      "display_name": "errors.log.enable",
      "documentation": "If true, write each error and the details of the failed operation and problematic record to the Connect application log. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, so that only errors that are not tolerated are reported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      }
    },
    {
      "name": "errors.log.include.messages",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 18,
      "display_name": "errors.log.include.messages",
      "documentation": "Whether to include in the log the Connect record that resulted in a failure. For sink records, the topic, partition, offset, and timestamp will be logged. For source records, the key and value (and their schemas), all headers, and the timestamp, Kafka topic, Kafka partition, source partition, and source offset will be logged. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, which will prevent record keys, values, and headers from being written to log files.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      }
    },
    {
      "name": "errors.deadletterqueue.topic.name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 19,
      "display_name": "errors.deadletterqueue.topic.name",
      "documentation": "The name of the topic to be used as the dead letter queue (DLQ) for messages that result in an error when processed by this sink connector, or its transformations or converters. The topic name is blank by default, which means that no messages are to be recorded in the DLQ.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      }
    },
    {
      "name": "errors.deadletterqueue.topic.replication.factor",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 20,
      "display_name": "errors.deadletterqueue.topic.replication.factor",
      "documentation": "Replication factor used to create the dead letter queue topic when it doesn\u00e2\u0080\u0099t already exist.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      }
    },
    {
      "name": "errors.deadletterqueue.context.headers.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 21,
      "display_name": "errors.deadletterqueue.context.headers.enable",
      "documentation": "If true, add headers containing error context to the messages written to the dead letter queue. To avoid clashing with headers from the original record, all error context header keys, all error context header keys will start with__connect.errors.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      }
    }
  ]
}