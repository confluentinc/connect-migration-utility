{
  "template_id": "VerticaSinkConnector",
  "connector_type": "SINK",
  "connector.class": "io.confluent.vertica.VerticaSinkConnector",
  "name": "{{.logicalClusterId}}",
  "imports": [],
  "group_order": [
    "Connection",
    "Writes",
    "DDL Support",
    "Data Mapping",
    "Confluent Platform license",
    "Confluent license properties",
    "License topic configuration",
    "License topic ACLs",
    "Override Default Configuration Properties"
  ],
  "config_defs": [
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 1,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 1
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 2,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 3,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 4,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 5,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 6,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 7,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 8,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 9,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 10,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 11,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 12,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 13,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 14,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 15,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 16,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 17,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 18,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 19,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 20,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 21,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 22,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 22
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 23,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 23
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 24,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 24
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 25,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 25
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 26,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 26
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 27,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 27
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 28,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 28
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 29,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 29
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 30,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 30
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 31,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 31
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 32,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 32
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 33,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 33
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 34,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 34
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 35,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 35
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 36,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 36
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 37,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 37
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 38,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 38
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 39,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 39
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 40,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 40
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 41,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 41
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 42,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 42
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 43,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 43
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 44,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 44
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 45,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 45
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 46,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 46
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 47,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 47
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 48,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 48
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 49,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 49
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 50,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 50
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 51,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 51
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 52,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 52
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 53,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 53
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 54,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 54
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 55,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 55
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 56,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 56
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 57,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 57
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 58,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 58
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 59,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 59
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 60,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 60
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 61,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 61
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 62,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 62
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 63,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 63
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 64,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 64
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 65,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 65
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 66,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 66
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 67,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 67
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 68,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 68
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 69,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 69
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 70,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 70
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 71,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 71
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 72,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 72
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 73,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 73
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 74,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 74
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 75,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 75
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 76,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 76
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 77,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 77
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 78,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 78
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 79,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 79
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 80,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 80
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 81,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 81
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 82,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 82
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 83,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 83
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 84,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 84
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 85,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 85
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 86,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 86
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 87,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 87
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 88,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 88
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 89,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 89
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 90,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 90
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 91,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 91
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 92,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 92
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 93,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 93
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 94,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 94
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 95,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 95
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 96,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 96
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 97,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 97
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 98,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 98
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 99,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 99
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 100,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 100
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 101,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 101
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 102,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 102
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 103,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 103
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 104,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 104
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 105,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 105
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 106,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 106
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 107,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 107
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 108,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 108
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 109,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 109
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 110,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 110
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 111,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 111
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 112,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 112
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 113,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 113
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 114,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 114
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 115,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 115
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 116,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 116
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 117,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 117
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 118,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 118
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 119,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 119
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 120,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 120
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 121,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 121
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 122,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 122
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 123,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 123
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 124,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 124
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 125,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 125
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 126,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 126
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 127,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 127
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 128,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 128
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 129,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 129
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 130,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 130
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 131,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 131
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 132,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 132
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 133,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 133
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 134,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 134
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 135,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 135
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 136,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 136
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 137,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 137
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 138,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 138
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 139,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 139
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 140,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 140
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 141,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 141
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 142,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 142
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 143,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 143
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 144,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 144
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 145,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 145
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 146,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 146
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 147,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 147
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 148,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 148
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 149,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 149
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 150,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 150
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 151,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 151
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 152,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 152
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 153,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 153
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 154,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 154
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 155,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 155
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 156,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 156
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 157,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 157
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 158,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 158
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 159,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 159
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 160,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 160
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 161,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 161
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 162,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 162
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 163,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 163
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 164,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 164
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 165,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 165
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 166,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 166
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 167,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 167
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 168,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 168
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 169,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 169
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 170,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 170
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 171,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 171
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 172,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 172
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 173,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 173
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 174,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 174
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 175,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 175
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 176,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 176
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 177,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 177
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 178,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 178
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 179,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 179
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 180,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 180
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 181,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 181
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 182,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 182
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 183,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 183
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 184,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 184
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 185,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 185
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 186,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 186
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 187,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 187
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 188,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 188
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 189,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 189
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 190,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 190
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 191,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 191
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 192,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 192
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 193,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 193
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 194,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 194
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 195,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 195
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 196,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 196
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 197,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 197
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 198,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 198
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 199,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 199
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 200,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 200
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 201,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 201
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 202,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 202
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 203,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 203
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 204,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 204
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 205,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 205
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 206,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 206
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 207,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 207
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 208,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 208
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 209,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 209
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 210,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 210
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 211,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 211
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 212,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 212
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 213,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 213
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 214,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 214
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 215,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 215
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 216,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 216
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 217,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 217
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 218,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 218
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 219,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 219
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 220,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 220
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 221,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 221
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 222,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 222
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 223,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 223
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 224,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 224
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 225,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 225
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 226,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 226
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 227,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 227
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 228,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 228
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 229,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 229
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 230,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 230
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 231,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 231
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 232,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 232
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 233,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 233
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 234,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 234
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 235,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 235
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 236,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 236
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 237,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 237
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 238,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 238
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 239,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 239
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 240,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 240
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 241,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 241
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 242,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 242
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 243,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 243
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 244,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 244
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 245,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 245
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 246,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 246
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 247,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 247
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 248,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 248
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 249,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 249
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 250,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 250
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 251,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 251
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 252,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 252
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 253,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 253
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 254,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 254
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 255,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 255
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 256,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 256
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 257,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 257
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 258,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 258
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 259,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 259
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 260,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 260
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 261,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 261
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 262,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 262
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 263,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 263
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 264,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 264
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 265,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 265
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 266,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 266
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 267,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 267
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 268,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 268
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 269,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 269
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 270,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 270
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 271,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 271
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 272,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 272
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 273,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 273
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 274,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 274
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 275,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 275
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 276,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 276
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 277,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 277
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 278,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 278
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 279,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 279
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 280,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 280
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 281,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 281
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 282,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 282
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 283,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 283
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 284,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 284
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 285,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 285
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 286,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 286
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 287,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 287
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 288,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 288
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 289,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 289
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 290,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 290
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 291,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 291
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 292,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 292
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 293,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 293
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 294,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 294
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 295,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 295
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 296,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 296
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 297,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 297
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 298,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 298
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 299,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 299
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 300,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 300
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 301,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 301
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 302,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 302
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 303,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 303
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 304,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 304
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 305,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 305
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 306,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 306
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 307,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 307
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 308,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 308
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 309,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 309
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 310,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 310
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 311,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 311
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 312,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 312
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 313,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 313
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 314,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 314
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 315,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 315
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 316,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 316
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 317,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 317
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 318,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 318
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 319,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 319
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 320,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 320
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 321,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 321
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 322,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 322
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 323,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 323
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 324,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 324
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 325,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 325
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 326,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 326
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 327,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 327
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 328,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 328
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 329,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 329
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 330,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 330
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 331,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 331
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 332,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 332
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 333,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 333
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 334,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 334
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 335,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 335
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 336,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 336
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 337,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 337
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 338,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 338
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 339,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 339
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 340,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 340
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 341,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 341
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 342,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 342
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 343,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 343
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 344,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 344
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 345,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 345
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 346,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 346
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 347,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 347
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 348,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 348
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 349,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 349
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 350,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 350
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 351,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 351
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 352,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 352
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 353,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 353
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 354,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 354
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 355,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 355
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 356,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 356
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 357,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 357
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 358,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 358
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 359,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 359
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 360,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 360
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 361,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 361
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 362,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 362
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 363,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 363
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 364,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 364
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 365,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 365
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 366,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 366
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 367,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 367
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 368,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 368
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 369,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 369
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 370,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 370
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 371,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 371
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 372,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 372
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 373,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 373
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 374,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 374
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 375,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 375
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 376,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 376
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 377,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 377
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 378,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 378
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 379,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 379
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 380,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 380
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 381,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 381
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 382,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 382
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 383,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 383
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 384,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 384
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 385,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 385
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 386,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 386
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 387,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 387
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 388,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 388
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 389,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 389
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 390,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 390
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 391,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 391
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 392,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 392
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 393,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 393
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 394,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 394
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 395,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 395
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 396,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 396
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 397,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 397
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 398,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 398
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 399,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 399
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 400,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 400
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 401,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 401
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 402,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 402
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 403,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 403
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 404,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 404
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 405,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 405
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.database",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 406,
      "display_name": "vertica.database",
      "documentation": "The database on the Vertica system. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 406
      }
    },
    {
      "name": "vertica.host",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 407,
      "display_name": "vertica.host",
      "documentation": "The Vertica host to connect to. This is used to build the JDBC URL.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 407
      }
    },
    {
      "name": "vertica.password",
      "type": "PASSWORDIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 408,
      "display_name": "vertica.password",
      "documentation": "The password to authenticate to Vertica with.Type: passwordImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 408
      }
    },
    {
      "name": "vertica.username",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 409,
      "display_name": "vertica.username",
      "documentation": "The username to authenticate to Vertica with.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 409
      }
    },
    {
      "name": "vertica.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 410,
      "display_name": "vertica.port",
      "documentation": "The Vertica port to connect to. This is used to build the JDBC URL.Type: intDefault: 5433Valid Values: ValidPort{start=1025, end=65535}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 410
      },
      "default": "5433valid values: validport{start=1025, end=65535}importance: medium"
    },
    {
      "name": "max.hikari.connection.pool.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 411,
      "display_name": "max.hikari.connection.pool.size",
      "documentation": "The maximum number of connections the HikariCp pool will contain.Type: intDefault: 10Valid Values: [1,\u00e2\u0080\u00a6]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 411
      },
      "default": "10valid values: [1,\u00e2\u0080\u00a6]importance: medium",
      "valid_values": [
        "1",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "stream.builder.cache.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Writes",
      "order_in_group": 412,
      "display_name": "stream.builder.cache.ms",
      "documentation": "The amount of time in milliseconds to cache the stream builder objects that are used to define the table structure.Type: intDefault: 300000Valid Values: [1000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 412
      },
      "default": "300000valid values: [1000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "1000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.buffer.size.bytes",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Writes",
      "order_in_group": 413,
      "display_name": "vertica.buffer.size.bytes",
      "documentation": "The buffer for the input stream that is used by the Vertica Copy Stream.Type: intDefault: 1048576Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 413
      },
      "default": "1048576importance: high"
    },
    {
      "name": "vertica.timeout.ms",
      "type": "INTDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Writes",
      "order_in_group": 414,
      "display_name": "vertica.timeout.ms",
      "documentation": "The timeout for completing the write to Vertica.Type: intDefault: 60000Valid Values: [10000,\u00e2\u0080\u00a6,2147483647]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 414
      },
      "default": "60000valid values: [10000,\u00e2\u0080\u00a6,2147483647]importance: high",
      "valid_values": [
        "10000",
        "\u00e2\u0080\u00a6",
        "2147483647"
      ]
    },
    {
      "name": "vertica.compression",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 415,
      "display_name": "vertica.compression",
      "documentation": "The type of compression for the data load.Type: stringDefault: UNCOMPRESSEDValid Values:UNCOMPRESSED,BZIP,GZIP,LZOImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 415
      },
      "default": "uncompressedvalid values:uncompressed,bzip,gzip,lzoimportance: medium"
    },
    {
      "name": "rejected.record.logging.mode",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 416,
      "display_name": "rejected.record.logging.mode",
      "documentation": "Logging mode when Vertica rejects a record. Must be configured to one of the following:logLogs the rejected records; available in Connect logs.fileWrites the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.tableWrites the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.Type: stringDefault: logValid Values: [log, file, table]Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 416
      },
      "default": "logvalid values: [log, file, table]importance: medium",
      "valid_values": [
        "log",
        "file",
        "table"
      ]
    },
    {
      "name": "log",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 417,
      "display_name": "log",
      "documentation": "Logs the rejected records; available in Connect logs.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 417
      }
    },
    {
      "name": "file",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 418,
      "display_name": "file",
      "documentation": "Writes the rejected records and exceptions to the configured files. Therejected.record.pathandrejected.record.exception.pathshould be configured to the designated file paths.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 418
      }
    },
    {
      "name": "table",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 419,
      "display_name": "table",
      "documentation": "Writes the rejected records and exceptions of Vertica tables to the respective rejected tables with the same table name appended with corresponding value ofrejected.record.table.suffix.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 419
      }
    },
    {
      "name": "rejected.record.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 420,
      "display_name": "rejected.record.path",
      "documentation": "Local directory path where the rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 420
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.exception.path",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 421,
      "display_name": "rejected.record.exception.path",
      "documentation": "Local directory path where the exceptions of rejected records from Vertica are stored. This config is only required whenrejected.record.logging.modeis set toFILE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 421
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rejected.record.table.suffix",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 422,
      "display_name": "rejected.record.table.suffix",
      "documentation": "Suffix value for the Vertica rejected records table name. With this configuration, you can provide any suffix along with a date format placeholder, for example_rejected_${yyyyddMM}. The placeholder is replaced by the current timestamp in the provided date format and is appended to the table name. By default, the value of the config is_rejectedwhich is added as a suffix to the Vertica table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: _rejectedImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 422
      },
      "default": "_rejectedimportance: medium"
    },
    {
      "name": "rejected.record.table.schema",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 423,
      "display_name": "rejected.record.table.schema",
      "documentation": "Schema name for Vertica rejected records table name. This config is only required whenrejected.record.logging.modeis set toTABLE.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 423
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "vertica.load.method",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 424,
      "display_name": "vertica.load.method",
      "documentation": "The method for loading data.Type: stringDefault: AUTOValid values:AUTO,DIRECT,TRICKLEImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 424
      },
      "default": "autovalid values:auto,direct,trickleimportance: medium"
    },
    {
      "name": "expected.records",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Writes",
      "order_in_group": 425,
      "display_name": "expected.records",
      "documentation": "The expected number of records the connector will process each time.Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 425
      },
      "default": "10000importance: low"
    },
    {
      "name": "expected.topics",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Writes",
      "order_in_group": 426,
      "display_name": "expected.topics",
      "documentation": "The expected number of topics the connector will process in a poll.Type: intDefault: 500Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 426
      },
      "default": "500importance: low"
    },
    {
      "name": "delete.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 427,
      "display_name": "delete.enabled",
      "documentation": "Set this value totrueto process delete requests for tombstone records\u00e2\u0080\u0094that is, when Kafka record\u00e2\u0080\u0099s value is null. Thepk.modeconfiguration should also be set torecord_keyto allow delete requests to be processed based on the fields present in Kafka record\u00e2\u0080\u0099s key.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 427
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "table.name.format",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Writes",
      "order_in_group": 428,
      "display_name": "table.name.format",
      "documentation": "A format string for the destination schema table name, which may contain${topic}as a placeholder for the originating topic name.For example,kafka_${topic}for the topicorderswill map to the table namekafka_ordersand default schema namepublic. Also, you can use this to configure the schema name. For example,kafka_schema.kafka_${topic}for the topicordersmaps to the table namekafka_ordersand schema namekafka_schema.Type: stringDefault: ${topic}Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 428
      },
      "default": "${topic}importance: medium"
    },
    {
      "name": "auto.create",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "DDL Support",
      "order_in_group": 429,
      "display_name": "auto.create",
      "documentation": "Whether to issueCREATEand automatically create a missing destination table (based on the record schema).Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 429
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "auto.evolve",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "DDL Support",
      "order_in_group": 430,
      "display_name": "auto.evolve",
      "documentation": "Whether to issueALTERand automatically add missing columns to the table schema relative to the record schema.Type: booleanDefault: falseImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 430
      },
      "default": "falseimportance: medium"
    },
    {
      "name": "pk.mode",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Data Mapping",
      "order_in_group": 431,
      "display_name": "pk.mode",
      "documentation": "The primary key mode, also refer topk.fieldsdocumentation for interplay. Supported modes are:noneNo keys utilized.kafkaKafka coordinates are used as the PK.record_keyField(s) from the record key are used, which may be a primitive or a struct.record_valueField(s) from the record value are used, which must be a struct.Type: stringDefault: noneValid Values: [none, kafka, record_key, record_value]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 431
      },
      "default": "nonevalid values: [none, kafka, record_key, record_value]importance: high",
      "valid_values": [
        "none",
        "kafka",
        "record_key",
        "record_value"
      ]
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 432,
      "display_name": "none",
      "documentation": "No keys utilized.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 432
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 433,
      "display_name": "kafka",
      "documentation": "Kafka coordinates are used as the PK.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 433
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 434,
      "display_name": "record_key",
      "documentation": "Field(s) from the record key are used, which may be a primitive or a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 434
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 435,
      "display_name": "record_value",
      "documentation": "Field(s) from the record value are used, which must be a struct.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 435
      }
    },
    {
      "name": "pk.fields",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 436,
      "display_name": "pk.fields",
      "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on thepk.mode:noneIgnored as no fields are used as primary key in this mode.kafkaMust be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.record_keyIf empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.record_valueIf empty, all fields from the value struct will be used, otherwise used to extract the desired fields.Type: listDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 436
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "none",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 437,
      "display_name": "none",
      "documentation": "Ignored as no fields are used as primary key in this mode.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 437
      }
    },
    {
      "name": "kafka",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 438,
      "display_name": "kafka",
      "documentation": "Must be a trio representing the Kafka coordinates, defaults to__connect_topic,__connect_partition,__connect_offsetif empty.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 438
      }
    },
    {
      "name": "record_key",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 439,
      "display_name": "record_key",
      "documentation": "If empty, all fields from the key struct will be used, otherwise used to extract the desired fields - for primitive key only a single field name must be configured.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 439
      }
    },
    {
      "name": "record_value",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Data Mapping",
      "order_in_group": 440,
      "display_name": "record_value",
      "documentation": "If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 440
      }
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 441,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 441
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 442,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 442
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 443,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 443
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 444,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 444
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 445,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 445
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 446,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 446
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 447,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 447
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 448,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 448
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 449,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 449
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Confluent Platform license",
      "order_in_group": 450,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 450
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 451,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 451
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 452,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 452
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 453,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 453
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 454,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 454
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 455,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 455
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 456,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 456
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Confluent license properties",
      "order_in_group": 457,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 457
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "Search by configuration property name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "Search by configuration property name",
      "documentation": "Enter a string to search and filter by configuration property name.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "name",
      "documentation": "Globally unique name to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "connector.class",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 3,
      "display_name": "connector.class",
      "documentation": "Name or alias of the class for this connector. Must be a subclass of org.apache.kafka.connect.connector.Connector. If the connector is org.apache.kafka.connect.file.FileStreamSinkConnector, you can either specify this full name,  or use \u00e2\u0080\u009cFileStreamSink\u00e2\u0080\u009d or \u00e2\u0080\u009cFileStreamSinkConnector\u00e2\u0080\u009d to make the configuration a bit shorter",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      }
    },
    {
      "name": "tasks.max",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 4,
      "display_name": "tasks.max",
      "documentation": "Maximum number of tasks to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      }
    },
    {
      "name": "topics",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 5,
      "display_name": "topics",
      "documentation": "List of topics to consume, separated by commas",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      }
    },
    {
      "name": "topics.regex",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 6,
      "display_name": "topics.regex",
      "documentation": "Regular expression giving topics to consume. Under the hood, the regex is compiled to ajava.util.regex.Pattern. Only one of topics or topics.regex should be specified.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      }
    },
    {
      "name": "tasks.max.enforce",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 7,
      "display_name": "tasks.max.enforce",
      "documentation": "(Deprecated) Whether to enforce that the tasks.max property is respected by the connector. By default, connectors that generate too many tasks will fail, and existing sets of tasks that exceed the tasks.max property will also be failed. If this property is set to false, then connectors will be allowed to generate more than the maximum number of tasks, and existing sets of tasks that exceed the tasks.max property will be allowed to run. This property is deprecated and will be removed in an upcoming major release.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      }
    },
    {
      "name": "key.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 8,
      "display_name": "key.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      }
    },
    {
      "name": "value.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 9,
      "display_name": "value.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      }
    },
    {
      "name": "header.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 10,
      "display_name": "header.converter",
      "documentation": "HeaderConverter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the header values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. By default, the SimpleHeaderConverter is used to serialize header values to strings and deserialize them by inferring the schemas.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      }
    },
    {
      "name": "config.action.reload",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 11,
      "display_name": "config.action.reload",
      "documentation": "The action that Connect should take on the connector when changes in external configuration providers result in a change in the connector\u00e2\u0080\u0099s configuration properties. A value of \u00e2\u0080\u0098none\u00e2\u0080\u0099 indicates that Connect will do nothing. A value of \u00e2\u0080\u0098restart\u00e2\u0080\u0099 indicates that Connect should restart/reload the connector with the updated configuration properties.The restart may actually be scheduled in the future if the external configuration provider indicates that a configuration value will expire in the future.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      }
    },
    {
      "name": "transforms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 12,
      "display_name": "transforms",
      "documentation": "Aliases for the transformations to be applied to records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      }
    },
    {
      "name": "predicates",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 13,
      "display_name": "predicates",
      "documentation": "Aliases for the predicates used by transformations.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      }
    },
    {
      "name": "errors.retry.timeout",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 14,
      "display_name": "errors.retry.timeout",
      "documentation": "The maximum duration in milliseconds that a failed operation will be reattempted. The default is 0, which means no retries will be attempted. Use -1 for infinite retries.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      }
    },
    {
      "name": "errors.retry.delay.max.ms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 15,
      "display_name": "errors.retry.delay.max.ms",
      "documentation": "The maximum duration in milliseconds between consecutive retry attempts. Jitter will be added to the delay once this limit is reached to prevent thundering herd issues.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      }
    },
    {
      "name": "errors.tolerance",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 16,
      "display_name": "errors.tolerance",
      "documentation": "Behavior for tolerating errors during connector operation. \u00e2\u0080\u0098none\u00e2\u0080\u0099 is the default value and signals that any error will result in an immediate connector task failure; \u00e2\u0080\u0098all\u00e2\u0080\u0099 changes the behavior to skip over problematic records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      }
    },
    {
      "name": "errors.log.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 17,
      "display_name": "errors.log.enable",
      "documentation": "If true, write each error and the details of the failed operation and problematic record to the Connect application log. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, so that only errors that are not tolerated are reported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      }
    },
    {
      "name": "errors.log.include.messages",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 18,
      "display_name": "errors.log.include.messages",
      "documentation": "Whether to include in the log the Connect record that resulted in a failure. For sink records, the topic, partition, offset, and timestamp will be logged. For source records, the key and value (and their schemas), all headers, and the timestamp, Kafka topic, Kafka partition, source partition, and source offset will be logged. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, which will prevent record keys, values, and headers from being written to log files.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      }
    },
    {
      "name": "errors.deadletterqueue.topic.name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 19,
      "display_name": "errors.deadletterqueue.topic.name",
      "documentation": "The name of the topic to be used as the dead letter queue (DLQ) for messages that result in an error when processed by this sink connector, or its transformations or converters. The topic name is blank by default, which means that no messages are to be recorded in the DLQ.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      }
    },
    {
      "name": "errors.deadletterqueue.topic.replication.factor",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 20,
      "display_name": "errors.deadletterqueue.topic.replication.factor",
      "documentation": "Replication factor used to create the dead letter queue topic when it doesn\u00e2\u0080\u0099t already exist.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      }
    },
    {
      "name": "errors.deadletterqueue.context.headers.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 21,
      "display_name": "errors.deadletterqueue.context.headers.enable",
      "documentation": "If true, add headers containing error context to the messages written to the dead letter queue. To avoid clashing with headers from the original record, all error context header keys, all error context header keys will start with__connect.errors.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      }
    }
  ]
}