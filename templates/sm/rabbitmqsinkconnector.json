{
  "template_id": "RabbitMQSinkConnector",
  "connector_type": "SINK",
  "connector.class": "io.confluent.connect.rabbitmq.sink.RabbitMQSinkConnector",
  "name": "{{.logicalClusterId}}",
  "imports": [],
  "group_order": [
    "Connection",
    "Security",
    "RabbitMQ",
    "RabbitMQ Publishing",
    "Confluent Platform license",
    "Confluent license properties",
    "License topic configuration",
    "License topic ACLs",
    "Override Default Configuration Properties"
  ],
  "config_defs": [
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 1,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 1
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 2,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 3,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 4,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 5,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 6,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 7,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 8,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 9,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 10,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 11,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 12,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 13,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 14,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 15,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 16,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 17,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 18,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 19,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 20,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 21,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 22,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 22
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 23,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 23
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 24,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 24
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 25,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 25
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 26,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 26
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 27,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 27
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 28,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 28
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 29,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 29
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 30,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 30
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 31,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 31
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 32,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 32
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 33,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 33
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 34,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 34
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 35,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 35
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 36,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 36
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 37,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 37
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 38,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 38
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 39,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 39
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 40,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 40
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 41,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 41
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 42,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 42
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 43,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 43
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 44,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 44
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 45,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 45
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 46,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 46
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 47,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 47
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 48,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 48
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 49,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 49
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 50,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 50
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 51,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 51
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 52,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 52
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 53,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 53
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 54,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 54
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 55,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 55
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 56,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 56
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 57,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 57
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 58,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 58
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 59,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 59
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 60,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 60
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 61,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 61
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 62,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 62
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 63,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 63
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 64,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 64
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 65,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 65
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 66,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 66
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 67,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 67
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 68,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 68
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 69,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 69
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 70,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 70
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 71,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 71
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 72,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 72
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 73,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 73
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 74,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 74
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 75,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 75
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 76,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 76
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 77,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 77
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 78,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 78
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 79,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 79
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 80,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 80
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 81,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 81
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 82,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 82
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 83,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 83
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 84,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 84
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 85,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 85
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 86,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 86
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 87,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 87
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 88,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 88
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 89,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 89
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 90,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 90
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 91,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 91
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 92,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 92
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 93,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 93
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 94,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 94
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 95,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 95
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 96,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 96
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 97,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 97
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 98,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 98
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 99,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 99
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 100,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 100
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 101,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 101
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 102,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 102
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 103,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 103
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 104,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 104
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 105,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 105
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 106,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 106
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 107,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 107
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 108,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 108
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 109,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 109
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 110,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 110
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 111,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 111
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 112,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 112
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 113,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 113
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 114,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 114
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 115,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 115
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 116,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 116
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 117,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 117
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 118,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 118
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 119,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 119
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 120,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 120
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 121,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 121
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 122,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 122
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 123,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 123
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 124,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 124
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 125,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 125
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 126,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 126
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 127,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 127
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 128,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 128
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 129,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 129
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 130,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 130
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 131,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 131
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 132,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 132
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 133,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 133
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 134,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 134
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 135,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 135
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 136,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 136
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 137,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 137
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 138,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 138
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 139,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 139
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 140,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 140
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 141,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 141
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 142,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 142
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 143,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 143
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 144,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 144
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 145,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 145
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 146,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 146
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 147,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 147
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 148,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 148
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 149,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 149
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 150,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 150
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 151,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 151
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 152,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 152
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 153,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 153
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 154,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 154
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 155,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 155
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 156,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 156
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 157,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 157
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 158,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 158
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 159,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 159
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 160,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 160
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 161,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 161
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 162,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 162
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 163,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 163
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 164,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 164
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 165,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 165
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 166,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 166
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 167,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 167
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 168,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 168
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 169,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 169
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 170,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 170
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 171,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 171
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 172,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 172
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 173,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 173
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 174,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 174
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 175,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 175
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 176,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 176
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 177,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 177
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 178,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 178
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 179,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 179
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 180,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 180
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 181,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 181
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 182,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 182
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 183,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 183
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 184,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 184
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 185,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 185
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 186,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 186
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 187,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 187
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 188,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 188
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 189,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 189
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 190,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 190
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 191,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 191
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 192,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 192
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 193,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 193
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 194,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 194
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 195,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 195
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 196,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 196
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 197,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 197
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 198,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 198
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 199,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 199
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 200,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 200
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 201,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 201
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 202,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 202
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 203,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 203
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 204,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 204
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 205,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 205
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 206,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 206
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 207,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 207
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 208,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 208
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 209,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 209
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 210,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 210
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 211,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 211
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 212,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 212
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 213,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 213
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 214,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 214
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 215,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 215
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 216,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 216
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 217,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 217
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 218,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 218
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 219,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 219
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 220,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 220
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 221,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 221
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 222,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 222
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 223,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 223
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 224,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 224
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 225,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 225
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 226,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 226
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 227,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 227
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 228,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 228
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 229,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 229
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 230,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 230
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 231,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 231
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 232,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 232
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 233,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 233
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 234,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 234
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 235,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 235
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 236,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 236
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 237,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 237
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 238,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 238
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 239,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 239
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 240,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 240
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 241,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 241
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 242,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 242
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 243,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 243
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 244,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 244
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 245,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 245
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 246,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 246
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 247,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 247
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 248,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 248
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 249,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 249
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 250,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 250
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 251,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 251
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 252,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 252
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 253,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 253
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 254,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 254
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 255,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 255
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 256,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 256
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 257,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 257
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 258,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 258
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 259,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 259
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 260,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 260
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 261,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 261
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 262,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 262
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 263,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 263
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 264,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 264
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 265,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 265
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 266,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 266
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 267,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 267
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 268,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 268
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 269,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 269
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 270,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 270
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 271,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 271
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 272,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 272
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 273,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 273
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 274,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 274
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 275,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 275
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 276,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 276
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 277,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 277
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 278,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 278
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 279,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 279
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 280,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 280
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 281,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 281
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 282,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 282
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 283,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 283
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 284,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 284
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 285,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 285
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 286,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 286
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 287,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 287
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 288,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 288
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 289,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 289
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 290,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 290
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 291,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 291
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 292,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 292
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 293,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 293
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 294,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 294
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 295,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 295
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 296,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 296
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 297,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 297
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 298,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 298
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 299,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 299
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 300,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 300
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 301,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 301
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 302,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 302
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 303,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 303
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 304,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 304
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 305,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 305
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 306,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 306
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 307,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 307
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 308,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 308
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 309,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 309
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 310,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 310
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 311,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 311
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 312,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 312
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 313,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 313
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 314,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 314
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 315,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 315
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 316,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 316
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 317,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 317
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 318,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 318
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 319,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 319
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 320,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 320
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 321,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 321
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 322,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 322
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 323,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 323
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 324,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 324
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 325,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 325
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 326,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 326
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 327,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 327
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 328,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 328
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 329,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 329
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 330,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 330
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 331,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 331
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 332,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 332
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 333,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 333
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 334,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 334
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 335,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 335
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 336,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 336
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 337,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 337
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 338,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 338
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 339,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 339
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 340,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 340
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 341,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 341
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 342,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 342
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 343,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 343
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 344,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 344
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 345,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 345
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 346,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 346
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 347,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 347
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 348,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 348
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 349,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 349
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 350,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 350
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 351,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 351
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 352,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 352
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 353,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 353
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 354,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 354
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 355,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 355
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 356,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 356
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 357,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 357
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 358,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 358
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 359,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 359
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 360,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 360
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 361,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 361
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 362,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 362
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 363,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 363
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 364,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 364
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 365,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 365
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 366,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 366
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 367,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 367
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 368,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 368
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 369,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 369
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 370,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 370
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 371,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 371
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 372,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 372
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 373,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 373
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 374,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 374
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 375,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 375
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 376,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 376
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 377,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 377
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 378,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 378
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 379,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 379
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 380,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 380
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 381,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 381
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 382,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 382
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 383,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 383
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 384,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 384
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 385,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 385
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 386,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 386
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 387,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 387
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 388,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 388
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 389,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 389
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 390,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 390
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 391,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 391
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 392,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 392
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 393,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 393
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 394,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 394
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 395,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 395
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 396,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 396
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 397,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 397
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 398,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 398
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 399,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 399
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 400,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 400
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 401,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 401
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 402,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 402
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 403,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 403
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 404,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 404
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 405,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 405
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 406,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 406
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 407,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 407
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 408,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 408
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 409,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 409
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 410,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 410
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 411,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 411
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 412,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 412
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 413,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 413
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 414,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 414
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 415,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 415
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 416,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 416
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 417,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 417
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 418,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 418
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 419,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 419
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 420,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 420
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 421,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 421
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 422,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 422
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 423,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 423
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 424,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 424
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 425,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 425
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 426,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 426
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 427,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 427
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 428,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 428
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 429,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 429
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 430,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 430
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 431,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 431
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 432,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 432
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 433,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 433
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 434,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 434
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 435,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 435
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 436,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 436
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 437,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 437
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 438,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 438
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 439,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 439
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 440,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 440
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 441,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 441
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "rabbitmq.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 442,
      "display_name": "rabbitmq.host",
      "documentation": "The RabbitMQ host to connect to. SeeConnectionFactory.setHost(java.lang.String)Type: stringDefault: localhostImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 442
      },
      "default": "localhostimportance: high"
    },
    {
      "name": "rabbitmq.password",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 443,
      "display_name": "rabbitmq.password",
      "documentation": "The password to use when authenticating to RabbitMQ. SeeConnectionFactory.setPassword(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 443
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.username",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 444,
      "display_name": "rabbitmq.username",
      "documentation": "The username to use when authenticating to RabbitMQ. SeeConnectionFactory.setUsername(java.lang.String)Type: stringDefault: guestImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 444
      },
      "default": "guestimportance: high"
    },
    {
      "name": "rabbitmq.virtual.host",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Connection",
      "order_in_group": 445,
      "display_name": "rabbitmq.virtual.host",
      "documentation": "The virtual host to use when connecting to the broker. SeeConnectionFactory.setVirtualHost(java.lang.String)Type: stringDefault: /Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 445
      },
      "default": "/importance: high"
    },
    {
      "name": "rabbitmq.port",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Connection",
      "order_in_group": 446,
      "display_name": "rabbitmq.port",
      "documentation": "The RabbitMQ port to connect to. SeeConnectionFactory.setPort(int)Type: intDefault: 5672Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 446
      },
      "default": "5672importance: medium"
    },
    {
      "name": "rabbitmq.automatic.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 447,
      "display_name": "rabbitmq.automatic.recovery.enabled",
      "documentation": "Enables or disables automatic connection recovery. SeeConnectionFactory.setAutomaticRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 447
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.connection.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 448,
      "display_name": "rabbitmq.connection.timeout.ms",
      "documentation": "Connection TCP establishment timeout in milliseconds. zero for infinite. SeeConnectionFactory.setConnectionTimeout(int)Type: intDefault: 60000Valid Values: [0,\u00e2\u0080\u00a6]Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 448
      },
      "default": "60000valid values: [0,\u00e2\u0080\u00a6]importance: low",
      "valid_values": [
        "0",
        "\u00e2\u0080\u00a6"
      ]
    },
    {
      "name": "rabbitmq.handshake.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 449,
      "display_name": "rabbitmq.handshake.timeout.ms",
      "documentation": "The AMQP0-9-1 protocol handshake timeout, in milliseconds. SeeConnectionFactory.setHandshakeTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 449
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.network.recovery.interval.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 450,
      "display_name": "rabbitmq.network.recovery.interval.ms",
      "documentation": "SeeConnectionFactory.setNetworkRecoveryInterval(long)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 450
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.requested.channel.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 451,
      "display_name": "rabbitmq.requested.channel.max",
      "documentation": "Initially requested maximum channel number. Zero for unlimited. SeeConnectionFactory.setRequestedChannelMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 451
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.frame.max",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 452,
      "display_name": "rabbitmq.requested.frame.max",
      "documentation": "Initially requested maximum frame size, in octets. Zero for unlimited. SeeConnectionFactory.setRequestedFrameMax(int)Type: intDefault: 0Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 452
      },
      "default": "0importance: low"
    },
    {
      "name": "rabbitmq.requested.heartbeat.seconds",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 453,
      "display_name": "rabbitmq.requested.heartbeat.seconds",
      "documentation": "Set the requested heartbeat timeout. Heartbeat frames will be sent at about 1/2 the timeout interval. If server heartbeat timeout is configured to a non-zero value, this method can only be used to lower the value; otherwise any value provided by the client will be used. SeeConnectionFactory.setRequestedHeartbeat(int)Type: intDefault: 60Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 453
      },
      "default": "60importance: low"
    },
    {
      "name": "rabbitmq.shutdown.timeout.ms",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 454,
      "display_name": "rabbitmq.shutdown.timeout.ms",
      "documentation": "Set the shutdown timeout. This is the amount of time that Consumer implementations have to continue working through deliveries (and other Consumer callbacks) after the connection has closed but before the ConsumerWorkService is torn down. If consumers exceed this timeout then any remaining queued deliveries (and other Consumer callbacks,includingthe Consumer\u00e2\u0080\u0099s handleShutdownSignal() invocation) will be lost. SeeConnectionFactory.setShutdownTimeout(int)Type: intDefault: 10000Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 454
      },
      "default": "10000importance: low"
    },
    {
      "name": "rabbitmq.topology.recovery.enabled",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Connection",
      "order_in_group": 455,
      "display_name": "rabbitmq.topology.recovery.enabled",
      "documentation": "Enables or disables topology recovery. SeeConnectionFactory.setTopologyRecoveryEnabled(boolean)Type: booleanDefault: trueImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 455
      },
      "default": "trueimportance: low"
    },
    {
      "name": "rabbitmq.security.protocol",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 456,
      "display_name": "rabbitmq.security.protocol",
      "documentation": "The security protocol to use when connecting to RabbitMQ. Values can bePLAINTEXTorSSL. IfPLAINTEXTis passed, all configs prefixed byrabbitmq.https.orssl.will be ignored.Type: stringDefault:PLAINTEXTImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 456
      },
      "default": "plaintextimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 457,
      "display_name": "rabbitmq.https.ssl.key.password",
      "documentation": "The password of the private key in the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 457
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 458,
      "display_name": "rabbitmq.https.ssl.keystore.location",
      "documentation": "The location of the key store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 458
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 459,
      "display_name": "rabbitmq.https.ssl.keystore.password",
      "documentation": "The password for the key store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 459
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 460,
      "display_name": "rabbitmq.https.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 460
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Security",
      "order_in_group": 461,
      "display_name": "rabbitmq.https.ssl.truststore.password",
      "documentation": "The password for the trust store file.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 461
      },
      "default": "nullimportance: high"
    },
    {
      "name": "rabbitmq.https.ssl.enabled.protocols",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Security",
      "order_in_group": 462,
      "display_name": "rabbitmq.https.ssl.enabled.protocols",
      "documentation": "The list of protocols enabled for SSL connections.Type: listDefault: TLSv1.2,TLSv1.1,TLSv1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 462
      },
      "default": "tlsv1.2,tlsv1.1,tlsv1importance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.keystore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Security",
      "order_in_group": 463,
      "display_name": "rabbitmq.https.ssl.keystore.type",
      "documentation": "The file format of the key store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 463
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Security",
      "order_in_group": 464,
      "display_name": "rabbitmq.https.ssl.protocol",
      "documentation": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.Type: stringDefault: TLSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 464
      },
      "default": "tlsimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.provider",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Security",
      "order_in_group": 465,
      "display_name": "rabbitmq.https.ssl.provider",
      "documentation": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.Type: stringDefault: nullImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 465
      },
      "default": "nullimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.truststore.type",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Security",
      "order_in_group": 466,
      "display_name": "rabbitmq.https.ssl.truststore.type",
      "documentation": "The file format of the trust store file.Type: stringDefault: JKSImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 466
      },
      "default": "jksimportance: medium"
    },
    {
      "name": "rabbitmq.https.ssl.cipher.suites",
      "type": "LISTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Security",
      "order_in_group": 467,
      "display_name": "rabbitmq.https.ssl.cipher.suites",
      "documentation": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default, all the available cipher suites are supported.Type: listDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 467
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Security",
      "order_in_group": 468,
      "display_name": "rabbitmq.https.ssl.endpoint.identification.algorithm",
      "documentation": "The endpoint identification algorithm to validate server hostname using server certificate.Type: stringDefault: httpsImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 468
      },
      "default": "httpsimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.keymanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Security",
      "order_in_group": 469,
      "display_name": "rabbitmq.https.ssl.keymanager.algorithm",
      "documentation": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: SunX509Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 469
      },
      "default": "sunx509importance: low"
    },
    {
      "name": "rabbitmq.https.ssl.secure.random.implementation",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Security",
      "order_in_group": 470,
      "display_name": "rabbitmq.https.ssl.secure.random.implementation",
      "documentation": "The SecureRandom PRNG implementation to use for SSL cryptography operations.Type: stringDefault: nullImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 470
      },
      "default": "nullimportance: low"
    },
    {
      "name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Security",
      "order_in_group": 471,
      "display_name": "rabbitmq.https.ssl.trustmanager.algorithm",
      "documentation": "The algorithm used by the trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.Type: stringDefault: PKIXImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 471
      },
      "default": "pkiximportance: low"
    },
    {
      "name": "rabbitmq.exchange",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "RabbitMQ",
      "order_in_group": 472,
      "display_name": "rabbitmq.exchange",
      "documentation": "The destination RabbitMQ exchange where messages need to be delivered. The connector will deliver messages to this one RabbitMQ exchange even when the connector consumes from multiple specified Apache Kafka\u00c2\u00ae topics.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 472
      }
    },
    {
      "name": "rabbitmq.routing.key",
      "type": "STRINGIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "RabbitMQ",
      "order_in_group": 473,
      "display_name": "rabbitmq.routing.key",
      "documentation": "RabbitMQ routing key that dictates how the message travels once it reaches RabbitMQ.Type: stringImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 473
      }
    },
    {
      "name": "rabbitmq.delivery.mode",
      "type": "STRINGVALID",
      "required": true,
      "importance": "HIGH",
      "group": "RabbitMQ",
      "order_in_group": 474,
      "display_name": "rabbitmq.delivery.mode",
      "documentation": "PERSISTENT or TRANSIENT, decides message durability in RabbitMQ.Type: stringValid Values: [PERSISTENT, TRANSIENT]Importance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 474
      },
      "valid_values": [
        "persistent",
        "transient"
      ]
    },
    {
      "name": "rabbitmq.forward.kafka.key",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "RabbitMQ",
      "order_in_group": 475,
      "display_name": "rabbitmq.forward.kafka.key",
      "documentation": "If enabled, the Kafka record key is converted to a string and forwarded on thecorrelationIDproperty of the RabbitMQ Message. In case the Kafka record key is null and this value is true, nocorrelationIDwill be sent.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 475
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.metadata",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "RabbitMQ",
      "order_in_group": 476,
      "display_name": "rabbitmq.forward.kafka.metadata",
      "documentation": "If enabled, metadata from the Kafka record is forwarded on the RabbitMQ Message as headers. This includes the record\u00e2\u0080\u0099s topic, partition, and offset. The topic name is applied as a header namedKAFKA_TOPIC, the partition value is applied as a header namedKAFKA_PARTITION, and the offset value is applied as a header namedKAFKA_OFFSET.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 476
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.forward.kafka.headers",
      "type": "BOOLEANDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "RabbitMQ",
      "order_in_group": 477,
      "display_name": "rabbitmq.forward.kafka.headers",
      "documentation": "If enabled, Kafka record headers are added to the RabbitMQ Message as headers with sent with header keys prefixed withkafka-.Type: booleanDefault: falseImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 477
      },
      "default": "falseimportance: low"
    },
    {
      "name": "rabbitmq.publish.max.batch.size",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "RabbitMQ Publishing",
      "order_in_group": 478,
      "display_name": "rabbitmq.publish.max.batch.size",
      "documentation": "Maximum number of messages in a batch to block on for acknowledgements. This value is the maximum size of each batch and not necessarily exact in cases where there are less number of records input or less number of records pending to batched than this value. Actual max batch size will be the smaller of this value and the consumer\u00e2\u0080\u0099smax.poll.records.Type: intDefault: 100Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 478
      },
      "default": "100importance: medium"
    },
    {
      "name": "rabbitmq.publish.ack.timeout",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "RabbitMQ Publishing",
      "order_in_group": 479,
      "display_name": "rabbitmq.publish.ack.timeout",
      "documentation": "Period of time to wait for message acknowledgement in milliseconds.Type: intDefault: 10000Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 479
      },
      "default": "10000importance: medium"
    },
    {
      "name": "rabbitmq.publish.max.retries",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "RabbitMQ Publishing",
      "order_in_group": 480,
      "display_name": "rabbitmq.publish.max.retries",
      "documentation": "Number of retries for un-acked or n-acked messages.Type: intDefault: 1Importance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 480
      },
      "default": "1importance: medium"
    },
    {
      "name": "confluent.topic.bootstrap.servers",
      "type": "LISTIMPORTANCE",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 481,
      "display_name": "confluent.topic.bootstrap.servers",
      "documentation": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster used for licensing. All servers in the cluster will be discovered from the initial connection. This list should be in the form <code>host1:port1,host2:port2,\u00e2\u0080\u00a6</code>. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).Type: listImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 481
      }
    },
    {
      "name": "confluent.topic",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 482,
      "display_name": "confluent.topic",
      "documentation": "Name of the Kafka topic used for Confluent Platform configuration, including licensing information.Type: stringDefault: _confluent-commandImportance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 482
      },
      "default": "_confluent-commandimportance: low"
    },
    {
      "name": "confluent.topic.replication.factor",
      "type": "INTDEFAULT",
      "required": false,
      "importance": "LOW",
      "group": "Confluent Platform license",
      "order_in_group": 483,
      "display_name": "confluent.topic.replication.factor",
      "documentation": "The replication factor for the Kafka topic used for Confluent Platform configuration, including licensing information. This is used only if the topic does not already exist, and the default of 3 is appropriate for production use. If you are using a development environment with less than 3 brokers, you must set this to the number of brokers (often 1).Type: intDefault: 3Importance: low",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 483
      },
      "default": "3importance: low"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 484,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 484
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 485,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 485
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 486,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 486
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 487,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 487
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 488,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 488
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent Platform license",
      "order_in_group": 489,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 489
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Confluent Platform license",
      "order_in_group": 490,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 490
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "confluent.license",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 491,
      "display_name": "confluent.license",
      "documentation": "Confluent issues enterprise license keys to each subscriber. The license key is text that you can copy and\npaste as the value forconfluent.license. A trial license allows using the connector for a 30-day trial period. A developer license allows using the connector indefinitely for single-broker development environments.If you are a subscriber, contact Confluent Support for more information.Type: stringDefault: \u00e2\u0080\u009c\u00e2\u0080\u009dValid Values: Confluent Platform licenseImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 491
      },
      "default": "\u00e2\u0080\u009c\u00e2\u0080\u009dvalid values: confluent platform licenseimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 492,
      "display_name": "confluent.topic.ssl.truststore.location",
      "documentation": "The location of the trust store file.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 492
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.truststore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 493,
      "display_name": "confluent.topic.ssl.truststore.password",
      "documentation": "The password for the trust store file. If a password is not set access to the truststore is still available, but\nintegrity checking is disabled.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 493
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.location",
      "type": "STRINGDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 494,
      "display_name": "confluent.topic.ssl.keystore.location",
      "documentation": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.Type: stringDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 494
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.keystore.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 495,
      "display_name": "confluent.topic.ssl.keystore.password",
      "documentation": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 495
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.ssl.key.password",
      "type": "PASSWORDDEFAULT",
      "required": true,
      "importance": "HIGH",
      "group": "Confluent license properties",
      "order_in_group": 496,
      "display_name": "confluent.topic.ssl.key.password",
      "documentation": "The password of the private key in the key store file. This is optional for client.Type: passwordDefault: nullImportance: high",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 496
      },
      "default": "nullimportance: high"
    },
    {
      "name": "confluent.topic.security.protocol",
      "type": "STRINGDEFAULT",
      "required": false,
      "importance": "MEDIUM",
      "group": "Confluent license properties",
      "order_in_group": 497,
      "display_name": "confluent.topic.security.protocol",
      "documentation": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.Type: stringDefault: \u00e2\u0080\u009cPLAINTEXT\u00e2\u0080\u009dImportance: medium",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 497
      },
      "default": "\u00e2\u0080\u009cplaintext\u00e2\u0080\u009dimportance: medium"
    },
    {
      "name": "Search by configuration property name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "Search by configuration property name",
      "documentation": "Enter a string to search and filter by configuration property name.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 2,
      "display_name": "name",
      "documentation": "Globally unique name to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 2
      }
    },
    {
      "name": "connector.class",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 3,
      "display_name": "connector.class",
      "documentation": "Name or alias of the class for this connector. Must be a subclass of org.apache.kafka.connect.connector.Connector. If the connector is org.apache.kafka.connect.file.FileStreamSinkConnector, you can either specify this full name,  or use \u00e2\u0080\u009cFileStreamSink\u00e2\u0080\u009d or \u00e2\u0080\u009cFileStreamSinkConnector\u00e2\u0080\u009d to make the configuration a bit shorter",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 3
      }
    },
    {
      "name": "tasks.max",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 4,
      "display_name": "tasks.max",
      "documentation": "Maximum number of tasks to use for this connector.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 4
      }
    },
    {
      "name": "topics",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 5,
      "display_name": "topics",
      "documentation": "List of topics to consume, separated by commas",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 5
      }
    },
    {
      "name": "topics.regex",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 6,
      "display_name": "topics.regex",
      "documentation": "Regular expression giving topics to consume. Under the hood, the regex is compiled to ajava.util.regex.Pattern. Only one of topics or topics.regex should be specified.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 6
      }
    },
    {
      "name": "tasks.max.enforce",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 7,
      "display_name": "tasks.max.enforce",
      "documentation": "(Deprecated) Whether to enforce that the tasks.max property is respected by the connector. By default, connectors that generate too many tasks will fail, and existing sets of tasks that exceed the tasks.max property will also be failed. If this property is set to false, then connectors will be allowed to generate more than the maximum number of tasks, and existing sets of tasks that exceed the tasks.max property will be allowed to run. This property is deprecated and will be removed in an upcoming major release.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 7
      }
    },
    {
      "name": "key.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 8,
      "display_name": "key.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 8
      }
    },
    {
      "name": "value.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 9,
      "display_name": "value.converter",
      "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 9
      }
    },
    {
      "name": "header.converter",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 10,
      "display_name": "header.converter",
      "documentation": "HeaderConverter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the header values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. By default, the SimpleHeaderConverter is used to serialize header values to strings and deserialize them by inferring the schemas.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 10
      }
    },
    {
      "name": "config.action.reload",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 11,
      "display_name": "config.action.reload",
      "documentation": "The action that Connect should take on the connector when changes in external configuration providers result in a change in the connector\u00e2\u0080\u0099s configuration properties. A value of \u00e2\u0080\u0098none\u00e2\u0080\u0099 indicates that Connect will do nothing. A value of \u00e2\u0080\u0098restart\u00e2\u0080\u0099 indicates that Connect should restart/reload the connector with the updated configuration properties.The restart may actually be scheduled in the future if the external configuration provider indicates that a configuration value will expire in the future.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 11
      }
    },
    {
      "name": "transforms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 12,
      "display_name": "transforms",
      "documentation": "Aliases for the transformations to be applied to records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 12
      }
    },
    {
      "name": "predicates",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 13,
      "display_name": "predicates",
      "documentation": "Aliases for the predicates used by transformations.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 13
      }
    },
    {
      "name": "errors.retry.timeout",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 14,
      "display_name": "errors.retry.timeout",
      "documentation": "The maximum duration in milliseconds that a failed operation will be reattempted. The default is 0, which means no retries will be attempted. Use -1 for infinite retries.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 14
      }
    },
    {
      "name": "errors.retry.delay.max.ms",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 15,
      "display_name": "errors.retry.delay.max.ms",
      "documentation": "The maximum duration in milliseconds between consecutive retry attempts. Jitter will be added to the delay once this limit is reached to prevent thundering herd issues.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 15
      }
    },
    {
      "name": "errors.tolerance",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 16,
      "display_name": "errors.tolerance",
      "documentation": "Behavior for tolerating errors during connector operation. \u00e2\u0080\u0098none\u00e2\u0080\u0099 is the default value and signals that any error will result in an immediate connector task failure; \u00e2\u0080\u0098all\u00e2\u0080\u0099 changes the behavior to skip over problematic records.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 16
      }
    },
    {
      "name": "errors.log.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 17,
      "display_name": "errors.log.enable",
      "documentation": "If true, write each error and the details of the failed operation and problematic record to the Connect application log. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, so that only errors that are not tolerated are reported.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 17
      }
    },
    {
      "name": "errors.log.include.messages",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 18,
      "display_name": "errors.log.include.messages",
      "documentation": "Whether to include in the log the Connect record that resulted in a failure. For sink records, the topic, partition, offset, and timestamp will be logged. For source records, the key and value (and their schemas), all headers, and the timestamp, Kafka topic, Kafka partition, source partition, and source offset will be logged. This is \u00e2\u0080\u0098false\u00e2\u0080\u0099 by default, which will prevent record keys, values, and headers from being written to log files.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 18
      }
    },
    {
      "name": "errors.deadletterqueue.topic.name",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 19,
      "display_name": "errors.deadletterqueue.topic.name",
      "documentation": "The name of the topic to be used as the dead letter queue (DLQ) for messages that result in an error when processed by this sink connector, or its transformations or converters. The topic name is blank by default, which means that no messages are to be recorded in the DLQ.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 19
      }
    },
    {
      "name": "errors.deadletterqueue.topic.replication.factor",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 20,
      "display_name": "errors.deadletterqueue.topic.replication.factor",
      "documentation": "Replication factor used to create the dead letter queue topic when it doesn\u00e2\u0080\u0099t already exist.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 20
      }
    },
    {
      "name": "errors.deadletterqueue.context.headers.enable",
      "type": "STRING",
      "required": false,
      "importance": "MEDIUM",
      "group": "Common",
      "order_in_group": 21,
      "display_name": "errors.deadletterqueue.context.headers.enable",
      "documentation": "If true, add headers containing error context to the messages written to the dead letter queue. To avoid clashing with headers from the original record, all error context header keys, all error context header keys will start with__connect.errors.",
      "validators": [],
      "sanitizers": [],
      "metadata": {
        "page": "CONFIGURATION",
        "order_in_page": 21
      }
    }
  ]
}