{
  "templates": [
    {
      "template_id": "DummySink",
      "connector_type": "SINK",
      "connector.class": "io.confluent.connect.dummy.sink.SystemTestSinkConnector",
      "config_defs": [
        {
          "name": "connector.class",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 1,
          "display_name": "Connector class"
        },
        {
          "name": "name",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 2,
          "display_name": "Connector name",
          "documentation": "Sets a name for your connector."
        },
        {
          "name": "tasks.max",
          "type": "INT",
          "required": true,
          "importance": "HIGH",
          "group": "Number of tasks for this connector",
          "order_in_group": 1,
          "display_name": "Tasks",
          "documentation": "Maximum number of tasks for the connector."
        },
        {
          "name": "connector.initial.state",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Connector State Configs",
          "order_in_group": 1,
          "display_name": "Connector Initial State",
          "default_value": "RUNNING",
          "documentation": "State of the connector instance to simulate when it starts. Supported states are RUNNING and FAILED",
          "recommended_values": [
            "RUNNING",
            "FAILED"
          ]
        },
        {
          "name": "connector.final.state",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Connector State Configs",
          "order_in_group": 2,
          "display_name": "Connector Final State",
          "default_value": "RUNNING",
          "documentation": "Final State of the connector to simulate. Supported states are RUNNING and FAILED",
          "recommended_values": [
            "RUNNING",
            "FAILED"
          ]
        },
        {
          "name": "connector.state.delay.ms",
          "type": "INT",
          "required": false,
          "importance": "HIGH",
          "group": "Connector State Configs",
          "order_in_group": 3,
          "display_name": "Connector state transition delay (ms)",
          "default_value": "0",
          "documentation": "Delay (ms) after which transition will take from `connector.initial.state` to `connector.final.state`. Note that if transition is from `FAILED` to `RUNNING` a manual restart is required. Cloud connect operator automatically restarts `FAILED` connector instances in the background"
        },
        {
          "name": "connector.failed.message",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Connector State Configs",
          "order_in_group": 4,
          "display_name": "Failed Connector Instance Exception Message",
          "default_value": "Connector Failed",
          "documentation": "Message to display in exception when connector instance fails"
        },
        {
          "name": "task.initial.state.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Task State Configs",
          "order_in_group": 1,
          "display_name": "Task Initial State List",
          "default_value": "",
          "documentation": "List of comma separated initial task states to simulate.Length of this list should be equal to the number of tasks, or empty to simulate only RUNNING tasks. Supported states are FAILED and RUNNING"
        },
        {
          "name": "task.final.state.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Task State Configs",
          "order_in_group": 2,
          "display_name": "Task Final State List",
          "default_value": "",
          "documentation": "List of comma separated final task states to simulate. Length of this list should be equal to the number of tasks, or empty to simulate only RUNNING tasks. Supported states are FAILED and RUNNING."
        },
        {
          "name": "task.state.delay.ms.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Task State Configs",
          "order_in_group": 3,
          "display_name": "Task state transition delay (ms) List",
          "default_value": "",
          "documentation": "Comma separated Delay (ms) after which transition will take from `task.initial.state` to `task.final.state`. Length of this list should be equal to number of tasks, otherwise default delay of 0ms will be applicable for all tasks. Note that if transition is from `FAILED` to `RUNNING` a manual restart of the task is required. Cloud connect operator automatically restarts `FAILED` tasks in the background"
        },
        {
          "name": "task.failed.message.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Task State Configs",
          "order_in_group": 4,
          "display_name": "Task Failed Exception Message List",
          "default_value": "",
          "documentation": "Comma separated messages to display in exception when task fails. Length of this list should be equal to number of tasks, or in case of empty input default message `Task Failed` will be used for all tasks"
        },
        {
          "name": "fail.on.validate.mode",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Validation Configs",
          "order_in_group": 1,
          "display_name": "Fail on Validate Mode",
          "default_value": "NONE",
          "documentation": "Accepted values are `NONE`, `CONFIG_ERROR` and `EXCEPTION`. If set to `NONE`, the connector will not fail on validate. If set to `CONFIG_ERROR`, the connector will fail on validate with a config error for the specified keys by `fail.on.validate.keys` config. If set to `EXCEPTION`, the connector will fail on validate with an exception.",
          "recommended_values": [
            "NONE",
            "CONFIG_ERROR",
            "EXCEPTION"
          ]
        },
        {
          "name": "fail.on.validate.exception.message",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Validation Configs",
          "order_in_group": 2,
          "display_name": "Fail on Validate Exception Message",
          "default_value": "Connector failed to Validate",
          "documentation": "Message to display in exception when `fail.on.validate.mode` is set to `EXCEPTION`."
        },
        {
          "name": "fail.on.validate.config.keys.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Validation Configs",
          "order_in_group": 3,
          "display_name": "Fail on Validate Config Keys",
          "default_value": "",
          "documentation": "List of comma separated config keys to fail on validate with a config error. This config is only applicable when `fail.on.validate.mode` is set to `CONFIG_ERROR`."
        },
        {
          "name": "fail.on.validate.config.errors.list",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Validation Configs",
          "order_in_group": 4,
          "display_name": "Fail on Validate Config Errors",
          "default_value": "",
          "documentation": "List of comma separated config errors corresponding to `fail.on.validate.config.keys` to fail on validate with a config error. This config is only applicable when fail.on.validate.mode is set to `CONFIG_ERROR`."
        },
        {
          "name": "dummy.plain.config",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Dummy Configs",
          "order_in_group": 1,
          "display_name": "Dummy Plain Config",
          "default_value": "",
          "documentation": "Dummy Plain Config for testing purposes"
        },
        {
          "name": "dummy.plain.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Dummy Configs",
          "order_in_group": 2,
          "display_name": "Dummy Secret Config",
          "default_value": "",
          "documentation": "Dummy Secret for testing purposes, it should be equal to `dummy.plain.config` to be valid"
        },
        {
          "name": "dummy.binary.config",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Dummy Configs",
          "order_in_group": 3,
          "display_name": "Dummy Binary Config",
          "default_value": "",
          "documentation": "Dummy binary config for testing "
        },
        {
          "name": "dummy.binary.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Dummy Configs",
          "order_in_group": 4,
          "display_name": "Dummy Binary Secret",
          "default_value": "",
          "documentation": "Dummy binary secret config for testing only, this should be a plaintext file with contents same as `dummy.binary.config`"
        },
        {
          "name": "topics",
          "type": "LIST",
          "required": true,
          "importance": "HIGH",
          "group": "Which topics do you want to get data from?",
          "order_in_group": 1,
          "display_name": "Topic names",
          "documentation": "Identifies the topic name or a comma-separated list of topic names."
        }
      ],
      "connector_configs": [
        {
          "name": "tasks.max"
        },
        {
          "name": "topics"
        },
        {
          "name": "connector.initial.state"
        },
        {
          "name": "connector.final.state"
        },
        {
          "name": "connector.state.transition.epoch",
          "dynamic.mapper": {
            "name": "infer.connector.epoch"
          }
        },
        {
          "name": "connector.failed.message"
        },
        {
          "name": "task.initial.state.list"
        },
        {
          "name": "task.final.state.list"
        },
        {
          "name": "task.state.transition.epoch.list",
          "dynamic.mapper": {
            "name": "infer.task.epoch"
          }
        },
        {
          "name": "task.failed.message.list"
        },
        {
          "name": "fail.on.validate.mode"
        },
        {
          "name": "fail.on.validate.exception.message"
        },
        {
          "name": "fail.on.validate.config.keys.list"
        },
        {
          "name": "fail.on.validate.config.errors.list"
        },
        {
          "name": "dummy.plain.config"
        },
        {
          "name": "dummy.plain.secret"
        },
        {
          "name": "dummy.binary.config"
        },
        {
          "name": "dummy.binary.secret"
        }
      ]
    },
    {
      "template_id": "super",
      "abstract": true,
      "config_defs": [
        {
          "name": "auto.restart.on.user.error",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "group": "Auto-restart policy",
          "order_in_group": 1,
          "display_name": "Enable Connector Auto-restart",
          "documentation": "Enable connector to automatically restart on user-actionable errors."
        },
        {
          "name": "value.converter.enhanced.avro.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information and Enums. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data",
          "type": "BOOLEAN",
          "documentation": "Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to generate an index suffix for unions. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums",
          "type": "BOOLEAN",
          "documentation": "Whether to represent enums as integers. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should be specified with an optional label. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls",
          "type": "BOOLEAN",
          "documentation": "Whether to generate a struct variable for null values. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should use primitive wrapper messages. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives",
          "type": "BOOLEAN",
          "documentation": "Whether a wrapper message should be interpreted as a raw primitive at root level. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties",
          "type": "BOOLEAN",
          "documentation": "Whether to allow additional properties for object schemas. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired",
          "type": "BOOLEAN",
          "documentation": "Whether to set non-required properties to be optional. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format",
          "type": "STRING",
          "recommended_values": [
            "BASE64",
            "NUMERIC"
          ],
          "documentation": "Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:\nBASE64 to serialize DECIMAL logical types as base64 encoded binary data and\nNUMERIC to serialize Connect DECIMAL logical type values in JSON/JSON_SR as a number representing the decimal value.",
          "group": "Additional Configs",
          "alias": "json.output.decimal.format",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.decimal.format",
          "default_value": "BASE64"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "type": "BOOLEAN",
          "documentation": "Specify if the Serializer should attempt to register the Schema.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.auto.register.schemas"
        },
        {
          "name": "value.converter.use.latest.version",
          "type": "BOOLEAN",
          "documentation": "Use latest version of schema in subject for serialization when auto.register.schemas is false.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.latest.version"
        },
        {
          "name": "value.converter.latest.compatibility.strict",
          "type": "BOOLEAN",
          "documentation": "Verify latest subject version is backward compatible when `use.latest.version` is `true`.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "type": "STRING",
          "default_value": "TopicNameStrategy",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "alias": "key.subject.name.strategy",
          "documentation": "How to construct the subject name for key schema registration.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "key.converter.key.subject.name.strategy"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "default_value": "TopicNameStrategy",
          "alias": "subject.name.strategy,value.subject.name.strategy",
          "documentation": "Determines how to construct the subject name under which the value schema is registered with Schema Registry.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.value.subject.name.strategy"
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "DefaultReferenceSubjectNameStrategy",
            "QualifiedReferenceSubjectNameStrategy"
          ],
          "default_value": "DefaultReferenceSubjectNameStrategy",
          "documentation": "Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.reference.subject.name.strategy"
        },
        {
          "name": "value.converter.allow.optional.map.keys",
          "type": "BOOLEAN",
          "documentation": "Allow optional string map key when converting from Connect Schema to Avro Schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions",
          "type": "BOOLEAN",
          "default_value": "false",
          "documentation": "Whether to flatten singleton unions. Applicable for Avro and JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2",
          "type": "BOOLEAN",
          "documentation": "Whether proto2 optionals are supported. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to flatten unions (oneofs). Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "header.converter",
          "documentation": "The converter class for the headers. This is used to serialize and deserialize the headers of the messages.",
          "recommended_values": [
            "org.apache.kafka.connect.storage.SimpleHeaderConverter",
            "org.apache.kafka.connect.storage.StringConverter",
            "org.apache.kafka.connect.json.JsonConverter",
            "org.apache.kafka.connect.converters.BooleanConverter",
            "org.apache.kafka.connect.converters.DoubleConverter",
            "org.apache.kafka.connect.converters.FloatConverter",
            "org.apache.kafka.connect.converters.IntegerConverter",
            "org.apache.kafka.connect.converters.LongConverter",
            "org.apache.kafka.connect.converters.ShortConverter"
          ]
        }
      ],
      "connector_configs": [
        {
          "name": "auto.restart.on.user.error"
        },
        {
          "name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "dynamic.mapper": {
            "name": "value.converter.auto.register.schemas.mapper"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "dynamic.mapper": {
            "name": "value.converter.use.latest.version.mapper"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.reference.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter"
        }
      ]
    }
  ]
}