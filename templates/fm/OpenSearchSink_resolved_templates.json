{
  "templates": [
    {
      "template_id": "OpenSearchSink",
      "connector_type": "SINK",
      "connector.class": "io.confluent.connect.http.sink.GenericHttpSinkConnector",
      "name": "{{.logicalClusterId}}",
      "imports": [
        "common",
        "common-kafka-connectivity",
        "common-sink",
        "http-network-restrictions-common",
        "schema-registry",
        "reporter",
        "input-data-format"
      ],
      "group_order": [
        "Which topics do you want to get data from?",
        "Schema Config",
        "Input messages",
        "How should we connect to your data?",
        "Kafka Cluster credentials",
        "Reporter",
        "Consumer configuration",
        "Number of tasks for this connector",
        "Authentication",
        "Behavior on error",
        "Indexes",
        "Retry configurations",
        "Index mappings",
        "Index 1 configuration",
        "Index 2 configuration",
        "Index 3 configuration",
        "Index 4 configuration",
        "Index 5 configuration",
        "Additional Configs"
      ],
      "config_defs": [
        {
          "name": "instance.url",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 1,
          "display_name": "OpenSearch Instance URL",
          "documentation": "The OpenSearch instance URL. For example: `https://your-opensearch-instance.com/`.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 1,
            "group_name": "Authentication"
          }
        },
        {
          "name": "auth.type",
          "type": "STRING",
          "required": false,
          "default_value": "BASIC",
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 2,
          "display_name": "Endpoint Authentication Type",
          "documentation": "Authentication type of the endpoint. Valid values are ``NONE``, ``BASIC``.",
          "recommended_values": [
            "BASIC",
            "NONE"
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 2,
            "group_name": "Authentication"
          }
        },
        {
          "name": "connection.user",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 3,
          "display_name": "Auth Username",
          "documentation": "The username to be used with an endpoint requiring basic authentication.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 3,
            "visibility": "auth.type==BASIC",
            "group_name": "Authentication"
          }
        },
        {
          "name": "connection.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 4,
          "display_name": "Auth Password",
          "documentation": "The password to be used with an endpoint requiring basic authentication.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 4,
            "visibility": "auth.type==BASIC",
            "group_name": "Authentication"
          }
        },
        {
          "name": "indexes.num",
          "type": "INT",
          "required": true,
          "default_value": 1,
          "importance": "HIGH",
          "group": "Indexes",
          "order_in_group": 1,
          "display_name": "Number of indexes",
          "documentation": "The number of indexes to push data to. This value should be less than or equal to 5",
          "recommended_values": [
            1,
            2,
            3,
            4,
            5
          ],
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 5
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 1,
            "group_name": "Indexes"
          }
        },
        {
          "name": "behavior.on.error",
          "type": "STRING",
          "required": false,
          "default_value": "FAIL",
          "importance": "LOW",
          "group": "Behavior on error",
          "order_in_group": 1,
          "display_name": "Behavior On Errors",
          "documentation": "Error handling behavior setting for handling error response from HTTP requests.",
          "recommended_values": [
            "FAIL",
            "IGNORE"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "order_in_page": 1,
            "visibility": true,
            "group_name": "Behavior on error"
          }
        },
        {
          "name": "retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "Retry configurations",
          "order_in_group": 1,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 1,
            "advanced": true,
            "group_name": "Retry configurations"
          }
        },
        {
          "name": "retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "Retry configurations",
          "order_in_group": 2,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 3,
            "advanced": true,
            "group_name": "Retry configurations"
          }
        },
        {
          "name": "retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "Retry configurations",
          "order_in_group": 3,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 4,
            "advanced": true,
            "group_name": "Retry configurations"
          }
        },
        {
          "name": "max.retries",
          "type": "INT",
          "required": false,
          "default_value": 3,
          "importance": "MEDIUM",
          "group": "Retry configurations",
          "order_in_group": 4,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 5,
            "advanced": true,
            "group_name": "Retry configurations"
          }
        },
        {
          "name": "opensearch.ssl.enabled",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 19,
          "display_name": "SSL Enabled",
          "documentation": "Whether or not to connect to the endpoint via SSL.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 19,
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.keystorefile",
          "type": "PASSWORD",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "Authentication",
          "order_in_group": 20,
          "display_name": "Key Store",
          "documentation": "The key store containing the server certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 20,
            "inputType": "CREDENTIALS_FILE",
            "secretType": "BINARY",
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.keystore.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 21,
          "display_name": "Keystore Password",
          "documentation": "The store password for the key store file.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 21,
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.key.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 22,
          "display_name": "Key Password",
          "documentation": "The password for the private key in the key store file.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 22,
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.truststorefile",
          "type": "PASSWORD",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 23,
          "display_name": "Trust Store",
          "documentation": "The trust store containing a server CA certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 23,
            "inputType": "CREDENTIALS_FILE",
            "secretType": "BINARY",
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.truststore.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 24,
          "display_name": "Trust Store Password",
          "documentation": "The trust store password containing a server CA certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 24,
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "opensearch.ssl.protocol",
          "type": "STRING",
          "required": false,
          "default_value": "TLSv1.3",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 25,
          "display_name": "SSL Protocol",
          "documentation": "The protocol to use for SSL connections",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 25,
            "visibility": "opensearch.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "index1.name",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Index 1 configuration",
          "order_in_group": 1,
          "display_name": "Index",
          "documentation": "The index name together with the OpenSearch Instance URL will form the complete HTTP(S) URL. This path can be templated with offset information.",
          "validators": [
            {
              "name": "opensearch.index.name.restrictions",
              "arguments": {
                "curr.index.num": 1
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 1,
            "visibility": "indexes.num>=1",
            "group_name": "Index 1 configuration"
          }
        },
        {
          "name": "index1.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Index 1 configuration",
          "order_in_group": 2,
          "display_name": "Topic",
          "documentation": "Topic from where data will be pulled for this Index",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 2,
            "visibility": "indexes.num>=1",
            "group_name": "Index 1 configuration"
          }
        },
        {
          "name": "index1.behavior.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "IGNORE",
          "importance": "LOW",
          "group": "Index 1 configuration",
          "order_in_group": 3,
          "display_name": "Behavior for null valued records",
          "documentation": "How to handle records with a non-null key and a null value (i.e. Kafka tombstone records). Valid options are ``IGNORE``, ``DELETE`` and ``FAIL``",
          "recommended_values": [
            "IGNORE",
            "DELETE",
            "FAIL"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 3,
            "visibility": "indexes.num>=1",
            "advanced": false,
            "group_name": "Index 1 configuration"
          },
          "validators": [
            {
              "name": "opensearch.behavior.on.null.values",
              "arguments": {
                "curr.index.num": 1
              }
            }
          ]
        },
        {
          "name": "index1.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "1",
          "importance": "LOW",
          "group": "Index 1 configuration",
          "order_in_group": 4,
          "display_name": "Batch Size",
          "documentation": "Size of the batch of records to be sent to the OpenSearch. Note that Basic and Standard Clusters may experience throughput limitations, even with a higher batch size.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 4,
            "visibility": "indexes.num>=1",
            "advanced": false,
            "group_name": "Index 1 configuration"
          }
        },
        {
          "name": "index1.report.only.status.code.to.success.topic",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Index 1 configuration",
          "order_in_group": 5,
          "display_name": "Report only status code to success topic",
          "documentation": "Whether to report only the status code to the success topic. If the API response payload is huge, it is recommended to set this to true, for better throughput.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 5,
            "visibility": "indexes.num>=1",
            "advanced": false,
            "group_name": "Index 1 configuration"
          }
        },
        {
          "name": "index2.name",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Index 2 configuration",
          "order_in_group": 1,
          "display_name": "Index",
          "documentation": "The index name together with the OpenSearch Instance URL will form the complete HTTP(S) URL. This path can be templated with offset information.",
          "validators": [
            {
              "name": "opensearch.index.name.restrictions",
              "arguments": {
                "curr.index.num": 2
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 15,
            "visibility": "indexes.num>=2",
            "group_name": "Index 2 configuration"
          }
        },
        {
          "name": "index2.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Index 2 configuration",
          "order_in_group": 2,
          "display_name": "Topic",
          "documentation": "Topic from where data will be pulled for this Index",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 16,
            "visibility": "indexes.num>=2",
            "group_name": "Index 2 configuration"
          }
        },
        {
          "name": "index2.behavior.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "IGNORE",
          "importance": "LOW",
          "group": "Index 2 configuration",
          "order_in_group": 3,
          "display_name": "Behavior for null valued records",
          "documentation": "How to handle records with a non-null key and a null value (i.e. Kafka tombstone records). Valid options are ``IGNORE``, ``DELETE`` and ``FAIL``",
          "recommended_values": [
            "IGNORE",
            "DELETE",
            "FAIL"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 17,
            "visibility": "indexes.num>=2",
            "advanced": false,
            "group_name": "Index 2 configuration"
          },
          "validators": [
            {
              "name": "opensearch.behavior.on.null.values",
              "arguments": {
                "curr.index.num": 2
              }
            }
          ]
        },
        {
          "name": "index2.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "1",
          "importance": "LOW",
          "group": "Index 2 configuration",
          "order_in_group": 4,
          "display_name": "Batch Size",
          "documentation": "Size of the batch of records to be sent to the OpenSearch. Note that Basic and Standard Clusters may experience throughput limitations, even with a higher batch size.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 18,
            "visibility": "indexes.num>=2",
            "advanced": false,
            "group_name": "Index 2 configuration"
          }
        },
        {
          "name": "index2.report.only.status.code.to.success.topic",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Index 2 configuration",
          "order_in_group": 5,
          "display_name": "Report only status code to success topic",
          "documentation": "Whether to report only the status code to the success topic. If the API response payload is huge, it is recommended to set this to true, for better throughput.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 19,
            "visibility": "indexes.num>=2",
            "advanced": false,
            "group_name": "Index 2 configuration"
          }
        },
        {
          "name": "index3.name",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Index 3 configuration",
          "order_in_group": 1,
          "display_name": "Index",
          "documentation": "The index name together with the OpenSearch Instance URL will form the complete HTTP(S) URL. This path can be templated with offset information.",
          "validators": [
            {
              "name": "opensearch.index.name.restrictions",
              "arguments": {
                "curr.index.num": 3
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 29,
            "visibility": "indexes.num>=3",
            "group_name": "Index 3 configuration"
          }
        },
        {
          "name": "index3.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Index 3 configuration",
          "order_in_group": 2,
          "display_name": "Topic",
          "documentation": "Topic from where data will be pulled for this Index",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 30,
            "visibility": "indexes.num>=3",
            "group_name": "Index 3 configuration"
          }
        },
        {
          "name": "index3.behavior.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "IGNORE",
          "importance": "LOW",
          "group": "Index 3 configuration",
          "order_in_group": 3,
          "display_name": "Behavior for null valued records",
          "documentation": "How to handle records with a non-null key and a null value (i.e. Kafka tombstone records). Valid options are ``IGNORE``, ``DELETE`` and ``FAIL``",
          "recommended_values": [
            "IGNORE",
            "DELETE",
            "FAIL"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 31,
            "visibility": "indexes.num>=3",
            "advanced": false,
            "group_name": "Index 3 configuration"
          },
          "validators": [
            {
              "name": "opensearch.behavior.on.null.values",
              "arguments": {
                "curr.index.num": 3
              }
            }
          ]
        },
        {
          "name": "index3.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "1",
          "importance": "LOW",
          "group": "Index 3 configuration",
          "order_in_group": 4,
          "display_name": "Batch Size",
          "documentation": "Size of the batch of records to be sent to the OpenSearch. Note that Basic and Standard Clusters may experience throughput limitations, even with a higher batch size.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 32,
            "visibility": "indexes.num>=3",
            "advanced": false,
            "group_name": "Index 3 configuration"
          }
        },
        {
          "name": "index3.report.only.status.code.to.success.topic",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Index 3 configuration",
          "order_in_group": 5,
          "display_name": "Report only status code to success topic",
          "documentation": "Whether to report only the status code to the success topic. If the API response payload is huge, it is recommended to set this to true, for better throughput.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 33,
            "visibility": "indexes.num>=3",
            "advanced": false,
            "group_name": "Index 3 configuration"
          }
        },
        {
          "name": "index4.name",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Index 4 configuration",
          "order_in_group": 1,
          "display_name": "Index",
          "documentation": "The index name together with the OpenSearch Instance URL will form the complete HTTP(S) URL. This path can be templated with offset information.",
          "validators": [
            {
              "name": "opensearch.index.name.restrictions",
              "arguments": {
                "curr.index.num": 4
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 43,
            "visibility": "indexes.num>=4",
            "group_name": "Index 4 configuration"
          }
        },
        {
          "name": "index4.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Index 4 configuration",
          "order_in_group": 2,
          "display_name": "Topic",
          "documentation": "Topic from where data will be pulled for this Index",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 44,
            "visibility": "indexes.num>=4",
            "group_name": "Index 4 configuration"
          }
        },
        {
          "name": "index4.behavior.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "IGNORE",
          "importance": "LOW",
          "group": "Index 4 configuration",
          "order_in_group": 3,
          "display_name": "Behavior for null valued records",
          "documentation": "How to handle records with a non-null key and a null value (i.e. Kafka tombstone records). Valid options are ``IGNORE``, ``DELETE`` and ``FAIL``",
          "recommended_values": [
            "IGNORE",
            "DELETE",
            "FAIL"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 45,
            "visibility": "indexes.num>=4",
            "advanced": false,
            "group_name": "Index 4 configuration"
          },
          "validators": [
            {
              "name": "opensearch.behavior.on.null.values",
              "arguments": {
                "curr.index.num": 4
              }
            }
          ]
        },
        {
          "name": "index4.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "1",
          "importance": "LOW",
          "group": "Index 4 configuration",
          "order_in_group": 4,
          "display_name": "Batch Size",
          "documentation": "Size of the batch of records to be sent to the OpenSearch. Note that Basic and Standard Clusters may experience throughput limitations, even with a higher batch size.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 46,
            "visibility": "indexes.num>=4",
            "advanced": false,
            "group_name": "Index 4 configuration"
          }
        },
        {
          "name": "index4.report.only.status.code.to.success.topic",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Index 4 configuration",
          "order_in_group": 5,
          "display_name": "Report only status code to success topic",
          "documentation": "Whether to report only the status code to the success topic. If the API response payload is huge, it is recommended to set this to true, for better throughput.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 47,
            "visibility": "indexes.num>=4",
            "advanced": false,
            "group_name": "Index 4 configuration"
          }
        },
        {
          "name": "index5.name",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Index 5 configuration",
          "order_in_group": 1,
          "display_name": "Index",
          "documentation": "The index name together with the OpenSearch Instance URL will form the complete HTTP(S) URL. This path can be templated with offset information.",
          "validators": [
            {
              "name": "opensearch.index.name.restrictions",
              "arguments": {
                "curr.index.num": 5
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 57,
            "visibility": "indexes.num>=5",
            "group_name": "Index 5 configuration"
          }
        },
        {
          "name": "index5.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Index 5 configuration",
          "order_in_group": 2,
          "display_name": "Topic",
          "documentation": "Topic from where data will be pulled for this Index",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 58,
            "visibility": "indexes.num>=5",
            "group_name": "Index 5 configuration"
          }
        },
        {
          "name": "index5.behavior.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "IGNORE",
          "importance": "LOW",
          "group": "Index 5 configuration",
          "order_in_group": 3,
          "display_name": "Behavior for null valued records",
          "documentation": "How to handle records with a non-null key and a null value (i.e. Kafka tombstone records). Valid options are ``IGNORE``, ``DELETE`` and ``FAIL``",
          "recommended_values": [
            "IGNORE",
            "DELETE",
            "FAIL"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 59,
            "visibility": "indexes.num>=5",
            "advanced": false,
            "group_name": "Index 5 configuration"
          },
          "validators": [
            {
              "name": "opensearch.behavior.on.null.values",
              "arguments": {
                "curr.index.num": 5
              }
            }
          ]
        },
        {
          "name": "index5.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "1",
          "importance": "LOW",
          "group": "Index 5 configuration",
          "order_in_group": 4,
          "display_name": "Batch Size",
          "documentation": "Size of the batch of records to be sent to the OpenSearch. Note that Basic and Standard Clusters may experience throughput limitations, even with a higher batch size.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 60,
            "visibility": "indexes.num>=5",
            "advanced": false,
            "group_name": "Index 5 configuration"
          }
        },
        {
          "name": "index5.report.only.status.code.to.success.topic",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Index 5 configuration",
          "order_in_group": 5,
          "display_name": "Report only status code to success topic",
          "documentation": "Whether to report only the status code to the success topic. If the API response payload is huge, it is recommended to set this to true, for better throughput.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 61,
            "visibility": "indexes.num>=5",
            "advanced": false,
            "group_name": "Index 5 configuration"
          }
        }
      ],
      "connector_configs": [
        {
          "name": "apis.num",
          "value": "${indexes.num}"
        },
        {
          "name": "max.apis.num",
          "value": "5"
        },
        {
          "name": "http.api.base.url",
          "value": "${instance.url}"
        },
        {
          "name": "behavior.on.error"
        },
        {
          "name": "consumer.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "consumer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "consumer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "producer.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "producer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "producer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "admin.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "admin.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "admin.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "tasks.max"
        },
        {
          "name": "schema.cache.size",
          "value": "1000"
        },
        {
          "name": "key.converter.schemas.enable",
          "value": "false"
        },
        {
          "name": "key.converter",
          "value": "org.apache.kafka.connect.converters.ByteArrayConverter"
        },
        {
          "name": "enhanced.avro.schema.support",
          "value": "true"
        },
        {
          "name": "transforms",
          "value": "requireTimestampTransform"
        },
        {
          "name": "connect.meta.data",
          "value": "false"
        },
        {
          "name": "transforms.requireTimestampTransform.type",
          "value": "io.confluent.cctransforms.RequireTimestampTransform"
        },
        {
          "name": "max.execution.timeout.ms"
        },
        {
          "name": "auth.type"
        },
        {
          "name": "connection.user"
        },
        {
          "name": "connection.password"
        },
        {
          "name": "opensearch.ssl.enabled"
        },
        {
          "name": "opensearch.ssl.protocol"
        },
        {
          "name": "opensearch.ssl.keystore.location",
          "value": "${opensearch.ssl.keystorefile}"
        },
        {
          "name": "opensearch.ssl.keystore.password"
        },
        {
          "name": "opensearch.ssl.key.password"
        },
        {
          "name": "opensearch.ssl.truststore.location",
          "value": "${opensearch.ssl.truststorefile}"
        },
        {
          "name": "opensearch.ssl.truststore.password"
        },
        {
          "name": "add.error.to.trace",
          "value": "true"
        },
        {
          "name": "api1.topics",
          "value": "${index1.topic}"
        },
        {
          "name": "api1.http.api.path",
          "switch": {
            "index1.batch.size": {
              "1": "/${index1.name}/_doc",
              "DEFAULT": "/_bulk"
            }
          }
        },
        {
          "name": "api1.max.batch.size",
          "value": "${index1.batch.size}"
        },
        {
          "name": "api1.batch.json.as.array",
          "switch": {
            "index1.batch.size": {
              "1": "false",
              "DEFAULT": "true"
            }
          }
        },
        {
          "name": "api1.record.prefix",
          "value": "{\"index\":{\"_index\": \"${index1.name}\"}}"
        },
        {
          "name": "api1.http.request.method",
          "value": "POST"
        },
        {
          "name": "api1.http.request.headers",
          "value": "Content-Type: application/json"
        },
        {
          "name": "api1.http.request.headers.separator",
          "value": "|"
        },
        {
          "name": "api1.http.connect.timeout.ms",
          "value": 30000
        },
        {
          "name": "api1.http.request.timeout.ms",
          "value": 30000
        },
        {
          "name": "api1.http.request.parameters.separator",
          "value": "&"
        },
        {
          "name": "api1.request.body.format",
          "switch": {
            "index1.batch.size": {
              "1": "JSON",
              "DEFAULT": "NDJSON"
            }
          }
        },
        {
          "name": "api1.max.retries",
          "value": "${max.retries}"
        },
        {
          "name": "api1.retry.backoff.ms",
          "value": "${retry.backoff.ms}"
        },
        {
          "name": "api1.retry.backoff.policy",
          "value": "${retry.backoff.policy}"
        },
        {
          "name": "api1.retry.on.status.codes",
          "value": "${retry.on.status.codes}"
        },
        {
          "name": "api1.behavior.on.null.values",
          "value": "${index1.behavior.on.null.values}"
        },
        {
          "name": "api1.report.only.status.code.to.success.topic",
          "value": "${index1.report.only.status.code.to.success.topic}"
        },
        {
          "name": "api2.topics",
          "value": "${index2.topic}"
        },
        {
          "name": "api2.http.api.path",
          "switch": {
            "index2.batch.size": {
              "1": "/${index2.name}/_doc",
              "DEFAULT": "/_bulk"
            }
          }
        },
        {
          "name": "api2.max.batch.size",
          "value": "${index2.batch.size}"
        },
        {
          "name": "api2.batch.json.as.array",
          "switch": {
            "index2.batch.size": {
              "1": "false",
              "DEFAULT": "true"
            }
          }
        },
        {
          "name": "api2.record.prefix",
          "value": "{\"index\":{\"_index\": \"${index2.name}\"}}"
        },
        {
          "name": "api2.http.request.method",
          "value": "POST"
        },
        {
          "name": "api2.http.request.headers",
          "value": "Content-Type: application/json"
        },
        {
          "name": "api2.http.request.headers.separator",
          "value": "|"
        },
        {
          "name": "api2.http.connect.timeout.ms",
          "value": 30000
        },
        {
          "name": "api2.http.request.timeout.ms",
          "value": 30000
        },
        {
          "name": "api2.http.request.parameters.separator",
          "value": "&"
        },
        {
          "name": "api2.request.body.format",
          "switch": {
            "index2.batch.size": {
              "1": "JSON",
              "DEFAULT": "NDJSON"
            }
          }
        },
        {
          "name": "api2.max.retries",
          "value": "${max.retries}"
        },
        {
          "name": "api2.retry.backoff.ms",
          "value": "${retry.backoff.ms}"
        },
        {
          "name": "api2.retry.backoff.policy",
          "value": "${retry.backoff.policy}"
        },
        {
          "name": "api2.retry.on.status.codes",
          "value": "${retry.on.status.codes}"
        },
        {
          "name": "api2.behavior.on.null.values",
          "value": "${index2.behavior.on.null.values}"
        },
        {
          "name": "api2.report.only.status.code.to.success.topic",
          "value": "${index2.report.only.status.code.to.success.topic}"
        },
        {
          "name": "api3.topics",
          "value": "${index3.topic}"
        },
        {
          "name": "api3.http.api.path",
          "switch": {
            "index3.batch.size": {
              "1": "/${index3.name}/_doc",
              "DEFAULT": "/_bulk"
            }
          }
        },
        {
          "name": "api3.max.batch.size",
          "value": "${index3.batch.size}"
        },
        {
          "name": "api3.batch.json.as.array",
          "switch": {
            "index3.batch.size": {
              "1": "false",
              "DEFAULT": "true"
            }
          }
        },
        {
          "name": "api3.record.prefix",
          "value": "{\"index\":{\"_index\": \"${index3.name}\"}}"
        },
        {
          "name": "api3.http.request.method",
          "value": "POST"
        },
        {
          "name": "api3.http.request.headers",
          "value": "Content-Type: application/json"
        },
        {
          "name": "api3.http.request.headers.separator",
          "value": "|"
        },
        {
          "name": "api3.http.connect.timeout.ms",
          "value": 30000
        },
        {
          "name": "api3.http.request.timeout.ms",
          "value": 30000
        },
        {
          "name": "api3.http.request.parameters.separator",
          "value": "&"
        },
        {
          "name": "api3.request.body.format",
          "switch": {
            "index3.batch.size": {
              "1": "JSON",
              "DEFAULT": "NDJSON"
            }
          }
        },
        {
          "name": "api3.max.retries",
          "value": "${max.retries}"
        },
        {
          "name": "api3.retry.backoff.ms",
          "value": "${retry.backoff.ms}"
        },
        {
          "name": "api3.retry.backoff.policy",
          "value": "${retry.backoff.policy}"
        },
        {
          "name": "api3.retry.on.status.codes",
          "value": "${retry.on.status.codes}"
        },
        {
          "name": "api3.behavior.on.null.values",
          "value": "${index3.behavior.on.null.values}"
        },
        {
          "name": "api3.report.only.status.code.to.success.topic",
          "value": "${index3.report.only.status.code.to.success.topic}"
        },
        {
          "name": "api4.topics",
          "value": "${index4.topic}"
        },
        {
          "name": "api4.http.api.path",
          "switch": {
            "index4.batch.size": {
              "1": "/${index4.name}/_doc",
              "DEFAULT": "/_bulk"
            }
          }
        },
        {
          "name": "api4.max.batch.size",
          "value": "${index4.batch.size}"
        },
        {
          "name": "api4.batch.json.as.array",
          "switch": {
            "index4.batch.size": {
              "1": "false",
              "DEFAULT": "true"
            }
          }
        },
        {
          "name": "api4.record.prefix",
          "value": "{\"index\":{\"_index\": \"${index4.name}\"}}"
        },
        {
          "name": "api4.http.request.method",
          "value": "POST"
        },
        {
          "name": "api4.http.request.headers",
          "value": "Content-Type: application/json"
        },
        {
          "name": "api4.http.request.headers.separator",
          "value": "|"
        },
        {
          "name": "api4.http.connect.timeout.ms",
          "value": 30000
        },
        {
          "name": "api4.http.request.timeout.ms",
          "value": 30000
        },
        {
          "name": "api4.http.request.parameters.separator",
          "value": "&"
        },
        {
          "name": "api4.request.body.format",
          "switch": {
            "index4.batch.size": {
              "1": "JSON",
              "DEFAULT": "NDJSON"
            }
          }
        },
        {
          "name": "api4.max.retries",
          "value": "${max.retries}"
        },
        {
          "name": "api4.retry.backoff.ms",
          "value": "${retry.backoff.ms}"
        },
        {
          "name": "api4.retry.backoff.policy",
          "value": "${retry.backoff.policy}"
        },
        {
          "name": "api4.retry.on.status.codes",
          "value": "${retry.on.status.codes}"
        },
        {
          "name": "api4.behavior.on.null.values",
          "value": "${index4.behavior.on.null.values}"
        },
        {
          "name": "api4.report.only.status.code.to.success.topic",
          "value": "${index4.report.only.status.code.to.success.topic}"
        },
        {
          "name": "api5.topics",
          "value": "${index5.topic}"
        },
        {
          "name": "api5.http.api.path",
          "switch": {
            "index5.batch.size": {
              "1": "/${index5.name}/_doc",
              "DEFAULT": "/_bulk"
            }
          }
        },
        {
          "name": "api5.max.batch.size",
          "value": "${index5.batch.size}"
        },
        {
          "name": "api5.batch.json.as.array",
          "switch": {
            "index5.batch.size": {
              "1": "false",
              "DEFAULT": "true"
            }
          }
        },
        {
          "name": "api5.record.prefix",
          "value": "{\"index\":{\"_index\": \"${index5.name}\"}}"
        },
        {
          "name": "api5.http.request.method",
          "value": "POST"
        },
        {
          "name": "api5.http.request.headers",
          "value": "Content-Type: application/json"
        },
        {
          "name": "api5.http.request.headers.separator",
          "value": "|"
        },
        {
          "name": "api5.http.connect.timeout.ms",
          "value": 30000
        },
        {
          "name": "api5.http.request.timeout.ms",
          "value": 30000
        },
        {
          "name": "api5.http.request.parameters.separator",
          "value": "&"
        },
        {
          "name": "api5.request.body.format",
          "switch": {
            "index5.batch.size": {
              "1": "JSON",
              "DEFAULT": "NDJSON"
            }
          }
        },
        {
          "name": "api5.max.retries",
          "value": "${max.retries}"
        },
        {
          "name": "api5.retry.backoff.ms",
          "value": "${retry.backoff.ms}"
        },
        {
          "name": "api5.retry.backoff.policy",
          "value": "${retry.backoff.policy}"
        },
        {
          "name": "api5.retry.on.status.codes",
          "value": "${retry.on.status.codes}"
        },
        {
          "name": "api5.behavior.on.null.values",
          "value": "${index5.behavior.on.null.values}"
        },
        {
          "name": "api5.report.only.status.code.to.success.topic",
          "value": "${index5.report.only.status.code.to.success.topic}"
        },
        {
          "name": "connector.endpoint",
          "value": "${instance.url}"
        }
      ]
    },
    {
      "template_id": "common",
      "global_validators": [
        {
          "name": "required",
          "priority": "HIGHEST"
        },
        {
          "name": "recommended.values",
          "priority": "HIGHER"
        }
      ],
      "abstract": true,
      "config_defs": [
        {
          "name": "connector.class",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 1,
          "display_name": "Connector class",
          "metadata": {
            "page": "REVIEW_AND_LAUNCH",
            "order_in_page": 1,
            "change_after_launch": false
          }
        },
        {
          "name": "name",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 2,
          "display_name": "Connector name",
          "documentation": "Sets a name for your connector.",
          "metadata": {
            "page": "REVIEW_AND_LAUNCH",
            "order_in_page": 2,
            "change_after_launch": false
          },
          "validators": [
            {
              "name": "common.length",
              "arguments": {
                "length": 64
              }
            }
          ]
        },
        {
          "name": "tasks.max",
          "type": "INT",
          "required": true,
          "importance": "HIGH",
          "group": "Number of tasks for this connector",
          "order_in_group": 1,
          "display_name": "Tasks",
          "documentation": "Maximum number of tasks for the connector.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1
              }
            }
          ],
          "metadata": {
            "page": "SIZING",
            "order_in_page": 1
          }
        },
        {
          "name": "kafka.auth.mode",
          "type": "STRING",
          "required": false,
          "default_value": "KAFKA_API_KEY",
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 1,
          "display_name": "Kafka Cluster Authentication mode",
          "documentation": "Kafka Authentication mode. It can be one of KAFKA_API_KEY or SERVICE_ACCOUNT. It defaults to KAFKA_API_KEY mode.",
          "recommended_values": [
            "SERVICE_ACCOUNT",
            "KAFKA_API_KEY"
          ],
          "validators": [
            {
              "name": "common.is.recommended.value"
            }
          ],
          "metadata": {
            "page": "KAFKA_CREDENTIALS",
            "order_in_page": 1
          }
        },
        {
          "name": "kafka.api.key",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 2,
          "display_name": "Kafka API Key",
          "documentation": "Kafka API Key. Required when kafka.auth.mode==KAFKA_API_KEY.",
          "validators": [
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "kafka.auth.mode==KAFKA_API_KEY"
              },
              "priority": "HIGHEST"
            },
            {
              "name": "kafka.credentials.sanity"
            }
          ],
          "metadata": {
            "page": "KAFKA_CREDENTIALS",
            "order_in_page": 2,
            "visibility": "kafka.auth.mode==KAFKA_API_KEY"
          }
        },
        {
          "name": "kafka.service.account.api.key",
          "type": "PASSWORD",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "kafka.service.account.api.secret",
          "type": "PASSWORD",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "kafka.region",
          "type": "STRING",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "kafka.endpoint",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "internal": true,
          "validators": [
            {
              "name": "common.regex",
              "arguments": {
                "pattern": "^.*://.*$"
              }
            }
          ]
        },
        {
          "name": "kafka.user.id",
          "type": "INT",
          "required": false,
          "internal": true,
          "importance": "MEDIUM"
        },
        {
          "name": "cloud.environment",
          "type": "STRING",
          "required": true,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "connector.cloud",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "kafka.dedicated",
          "type": "STRING",
          "required": true,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "valid.kafka.api.key",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "kafka.service.account.oauth.token",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "kafka.logical.cluster.id",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "connect.connector_cross_region.enable",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "connector.regional.connectivity.enabled",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "sr.internal.sa.api.key",
          "type": "PASSWORD",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "sr.internal.sa.api.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "LOW",
          "internal": true
        },
        {
          "name": "sr.internal.sa.validity.check",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "internal": true
        }
      ],
      "connector_configs": [
        {
          "name": "tasks.max"
        },
        {
          "name": "confluent.topic.bootstrap.servers",
          "value": "Placeholder value to pass connector validations"
        },
        {
          "name": "errors.log.enable",
          "value": "true"
        },
        {
          "name": "errors.log.include.messages",
          "value": "false"
        },
        {
          "name": "errors.retry.timeout",
          "value": "300000"
        },
        {
          "name": "errors.retry.delay.max.ms",
          "value": "30000"
        },
        {
          "name": "value.converter.ignore.modern.dialects",
          "value": "true"
        }
      ]
    },
    {
      "template_id": "common-kafka-connectivity",
      "abstract": true,
      "config_defs": [
        {
          "name": "connect.metadata_property.kafka.itsl.embed.lkc",
          "type": "STRING",
          "required": false,
          "default_value": "SKIP",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm",
          "type": "STRING",
          "required": false,
          "default_value": "UNSET",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "connect.metadata_property.kafka.itsl.bootstrap.servers",
          "type": "STRING",
          "required": false,
          "default_value": "UNSET",
          "importance": "HIGH",
          "internal": true
        },
        {
          "name": "connect.fips.provider",
          "type": "STRING",
          "required": false,
          "default_value": "UNSET",
          "default_value_provider": {
            "name": "defaultvalue.fips.provider"
          },
          "importance": "HIGH",
          "internal": true
        }
      ],
      "connector_configs": [
        {
          "name": "consumer.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "producer.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "admin.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "admin.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "producer.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "consumer.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "admin.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "producer.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "consumer.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "admin.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "consumer.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "admin.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "producer.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "producer.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "consumer.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "consumer.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "admin.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "admin.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        }
      ]
    },
    {
      "template_id": "common-sink",
      "abstract": true,
      "config_defs": [
        {
          "name": "kafka.service.account.id",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 2,
          "display_name": "Kafka Service Account",
          "documentation": "The Service Account that will be used to generate the API keys to communicate with Kafka Cluster.",
          "validators": [
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "kafka.auth.mode==SERVICE_ACCOUNT"
              },
              "priority": "HIGHEST"
            },
            {
              "name": "kafka.credentials.sanity"
            },
            {
              "name": "kafka.credentials",
              "arguments": {
                "ssl.endpoint.identification.algorithm": "https",
                "sasl.mechanism": "PLAIN",
                "request.timeout.ms": "60000",
                "retry.backoff.ms": "500",
                "security.protocol": "SASL_SSL"
              }
            }
          ],
          "metadata": {
            "page": "KAFKA_CREDENTIALS",
            "order_in_page": 2,
            "visibility": "kafka.auth.mode==SERVICE_ACCOUNT"
          }
        },
        {
          "name": "kafka.api.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 3,
          "display_name": "Kafka API Secret",
          "documentation": "Secret associated with Kafka API key. Required when kafka.auth.mode==KAFKA_API_KEY.",
          "validators": [
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "kafka.auth.mode==KAFKA_API_KEY"
              },
              "priority": "HIGHEST"
            },
            {
              "name": "kafka.credentials",
              "arguments": {
                "ssl.endpoint.identification.algorithm": "https",
                "sasl.mechanism": "PLAIN",
                "request.timeout.ms": "60000",
                "retry.backoff.ms": "500",
                "security.protocol": "SASL_SSL"
              }
            }
          ],
          "dependents": [
            "kafka.api.key"
          ],
          "metadata": {
            "page": "KAFKA_CREDENTIALS",
            "order_in_page": 2,
            "visibility": "kafka.auth.mode==KAFKA_API_KEY"
          }
        },
        {
          "name": "topics",
          "type": "LIST",
          "required": true,
          "importance": "HIGH",
          "group": "Which topics do you want to get data from?",
          "order_in_group": 1,
          "display_name": "Topic names",
          "documentation": "Identifies the topic name or a comma-separated list of topic names.",
          "validators": [
            {
              "name": "kafka.topics",
              "arguments": {
                "ssl.endpoint.identification.algorithm": "https",
                "sasl.mechanism": "PLAIN",
                "request.timeout.ms": "60000",
                "retry.backoff.ms": "500",
                "security.protocol": "SASL_SSL",
                "topic.config.name": "topics"
              }
            }
          ],
          "dependents": [
            "kafka.api.secret"
          ],
          "sanitizers": [
            {
              "name": "trim.list"
            }
          ],
          "metadata": {
            "page": "SELECT_TOPICS",
            "order_in_page": 1
          }
        },
        {
          "name": "max.poll.interval.ms",
          "type": "LONG",
          "required": false,
          "importance": "LOW",
          "group": "Consumer configuration",
          "order_in_group": 1,
          "display_name": "Max poll interval(ms)",
          "default_value": "300000",
          "documentation": "The maximum delay between subsequent consume requests to Kafka. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 300000 milliseconds (5 minutes).",
          "validators": [
            {
              "name": "conditional.common.range",
              "arguments": {
                "min": 60000,
                "max": 1800000,
                "dedicatedMin": 60000
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 1,
            "advanced": true,
            "group_name": "Consumer configuration"
          }
        },
        {
          "name": "max.poll.records",
          "type": "LONG",
          "required": false,
          "importance": "LOW",
          "group": "Consumer configuration",
          "order_in_group": 2,
          "display_name": "Max poll records",
          "default_value": "500",
          "documentation": "The maximum number of records to consume from Kafka in a single request. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 500 records.",
          "validators": [
            {
              "name": "conditional.common.range",
              "arguments": {
                "min": 1,
                "max": 500,
                "dedicatedMin": 1
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 2,
            "advanced": true,
            "group_name": "Consumer configuration"
          }
        },
        {
          "name": "errors.tolerance",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "default_value": "all",
          "display_name": "errors.tolerance",
          "documentation": "Use this property if you would like to configure the connector's error handling behavior. WARNING: This property should be used with CAUTION for SOURCE CONNECTORS as it may lead to dataloss. If you set this property to 'all', the connector will not fail on errant records, but will instead log them (and send to DLQ for Sink Connectors) and continue processing. If you set this property to 'none', the connector task will fail on errant records.",
          "recommended_values": [
            "none",
            "all"
          ],
          "metadata": {
            "group_name": "Additional Configs",
            "page": "CONFIGURATION",
            "advanced": true,
            "additional.visible": "true"
          }
        }
      ],
      "connector_configs": [
        {
          "name": "topics"
        },
        {
          "name": "errors.tolerance"
        },
        {
          "name": "errors.deadletterqueue.topic.name",
          "value": "dlq-{{.logicalClusterId}}"
        },
        {
          "name": "errors.deadletterqueue.topic.replication.factor",
          "value": "3"
        },
        {
          "name": "errors.deadletterqueue.context.headers.enable",
          "value": "true"
        },
        {
          "name": "consumer.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "consumer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "consumer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "consumer.override.max.poll.interval.ms",
          "value": "${max.poll.interval.ms}"
        },
        {
          "name": "consumer.override.max.poll.records",
          "value": "${max.poll.records}"
        },
        {
          "name": "producer.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "producer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "producer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "admin.override.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "admin.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "admin.override.sasl.mechanism",
          "value": "PLAIN"
        }
      ]
    },
    {
      "template_id": "http-network-restrictions-common",
      "abstract": true,
      "config_defs": [
        {
          "name": "connection.disallow.private.ips",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "internal": true
        },
        {
          "name": "connection.disallow.cidr.ranges",
          "type": "LIST",
          "required": false,
          "importance": "MEDIUM",
          "internal": true
        },
        {
          "name": "connection.allow.cidr.ranges",
          "type": "LIST",
          "required": false,
          "importance": "MEDIUM",
          "internal": true
        }
      ],
      "connector_configs": [
        {
          "name": "connection.disallow.class.e.ips",
          "value": "true"
        },
        {
          "name": "connection.disallow.local.ips",
          "value": "true"
        },
        {
          "name": "connection.disallow.private.ips"
        },
        {
          "name": "connection.disallow.cidr.ranges"
        },
        {
          "name": "connection.allow.cidr.ranges"
        }
      ]
    },
    {
      "template_id": "schema-registry",
      "abstract": true,
      "config_defs": [
        {
          "name": "schema.registry.url",
          "type": "STRING",
          "importance": "MEDIUM",
          "internal": true
        },
        {
          "name": "schema.context.name",
          "type": "STRING",
          "group": "Schema Config",
          "order_in_group": 1,
          "importance": "MEDIUM",
          "display_name": "Schema context",
          "documentation": "Add a schema context name. A schema context represents an independent scope in Schema Registry. It is a separate sub-schema tied to topics in different Kafka clusters that share the same Schema Registry instance. If not used, the connector uses the default schema configured for Schema Registry in your Confluent Cloud environment.",
          "default_value": "default",
          "validators": [
            {
              "name": "schema.context.name.exist.check",
              "priority": "LOWER"
            }
          ],
          "dependents": [
            "schema.registry.url"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "order_in_page": 1
          }
        }
      ],
      "connector_configs": []
    },
    {
      "template_id": "reporter",
      "abstract": true,
      "config_defs": [],
      "connector_configs": [
        {
          "name": "reporter.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "reporter.producer.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "reporter.producer.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "reporter.producer.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "reporter.admin.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "reporter.admin.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "reporter.admin.sasl.jaas.config",
          "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
        },
        {
          "name": "reporter.result.topic.name",
          "value": "success-${connector}"
        },
        {
          "name": "reporter.error.topic.name",
          "value": "error-${connector}"
        },
        {
          "name": "reporter.admin.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "reporter.producer.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "reporter.admin.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "reporter.producer.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "reporter.admin.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "reporter.producer.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "reporter.producer.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "reporter.admin.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "reporter.producer.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "reporter.admin.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        }
      ]
    },
    {
      "template_id": "input-data-format",
      "abstract": true,
      "config_defs": [
        {
          "name": "input.data.format",
          "type": "STRING",
          "required": true,
          "default_value": "JSON",
          "importance": "HIGH",
          "alias": "data.format",
          "group": "Input messages",
          "order_in_group": 1,
          "display_name": "Input Kafka record value format",
          "documentation": "Sets the input Kafka record value format. Valid entries are AVRO, JSON_SR, PROTOBUF, JSON or BYTES. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.",
          "recommended_values": [
            "AVRO",
            "JSON_SR",
            "PROTOBUF",
            "JSON",
            "BYTES"
          ],
          "validators": [
            {
              "name": "sr.integration"
            }
          ],
          "dependents": [
            "schema.registry.url"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 1
          }
        },
        {
          "name": "value.converter.schemas.enable",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Additional Configs",
          "alias": "schemas.enable",
          "display_name": "value.converter.schemas.enable",
          "documentation": "Include schemas within each of the serialized values. Input messages must contain `schema` and `payload` fields and may not contain additional fields. For plain JSON data, set this to `false`. Applicable for JSON Converter.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "additional.visible": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.replace.null.with.default",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "alias": "replace.null.with.default",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "value.converter.replace.null.with.default",
          "documentation": "Whether to replace fields that have a default value and that are null to the default value. When set to true, the default value is used, otherwise null is used. Applicable for JSON Converter.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.ignore.default.for.nullables",
          "alias": "ignore.default.for.nullables",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "value.converter.ignore.default.for.nullables",
          "documentation": "When set to true, this property ensures that the corresponding record in Kafka is NULL, instead of showing the default column value. Applicable for AVRO,PROTOBUF and JSON_SR Converters.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.scrub.invalid.names",
          "type": "BOOLEAN",
          "documentation": "Whether to scrub invalid names by replacing invalid characters with valid characters. Applicable for Avro and Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.scrub.invalid.names",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        }
      ],
      "connector_configs": [
        {
          "name": "value.converter",
          "switch": {
            "input.data.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter",
              "BYTES": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "JSON": "org.apache.kafka.connect.json.JsonConverter"
            }
          }
        },
        {
          "name": "value.converter.schemas.enable"
        },
        {
          "name": "value.converter.replace.null.with.default"
        },
        {
          "name": "value.converter.schema.registry.url",
          "switch": {
            "input.data.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.credentials.source",
          "switch": {
            "input.data.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.user.info",
          "switch": {
            "input.data.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "value.converter.ignore.default.for.nullables"
        },
        {
          "name": "value.converter.scrub.invalid.names",
          "dynamic.mapper": {
            "name": "value.converter.scrub.invalid.names.mapper"
          }
        }
      ]
    },
    {
      "template_id": "super",
      "abstract": true,
      "config_defs": [
        {
          "name": "auto.restart.on.user.error",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "group": "Auto-restart policy",
          "order_in_group": 1,
          "display_name": "Enable Connector Auto-restart",
          "documentation": "Enable connector to automatically restart on user-actionable errors.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "group_name": "Auto-restart policy"
          }
        },
        {
          "name": "value.converter.enhanced.avro.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information and Enums. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.avro.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.connect.meta.data",
          "type": "BOOLEAN",
          "documentation": "Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.connect.meta.data",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.protobuf.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.index.for.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to generate an index suffix for unions. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.index.for.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.int.for.enums",
          "type": "BOOLEAN",
          "documentation": "Whether to represent enums as integers. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.int.for.enums",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should be specified with an optional label. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.struct.for.nulls",
          "type": "BOOLEAN",
          "documentation": "Whether to generate a struct variable for null values. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.struct.for.nulls",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should use primitive wrapper messages. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives",
          "type": "BOOLEAN",
          "documentation": "Whether a wrapper message should be interpreted as a raw primitive at root level. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.raw.primitives",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.object.additional.properties",
          "type": "BOOLEAN",
          "documentation": "Whether to allow additional properties for object schemas. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.object.additional.properties",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.optional.for.nonrequired",
          "type": "BOOLEAN",
          "documentation": "Whether to set non-required properties to be optional. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.optional.for.nonrequired",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.decimal.format",
          "type": "STRING",
          "recommended_values": [
            "BASE64",
            "NUMERIC"
          ],
          "documentation": "Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:\nBASE64 to serialize DECIMAL logical types as base64 encoded binary data and\nNUMERIC to serialize Connect DECIMAL logical type values in JSON/JSON_SR as a number representing the decimal value.",
          "group": "Additional Configs",
          "alias": "json.output.decimal.format",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.decimal.format",
          "default_value": "BASE64",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.auto.register.schemas",
          "type": "BOOLEAN",
          "documentation": "Specify if the Serializer should attempt to register the Schema.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.auto.register.schemas",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "type": "BOOLEAN",
          "documentation": "Use latest version of schema in subject for serialization when auto.register.schemas is false.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.latest.version",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict",
          "type": "BOOLEAN",
          "documentation": "Verify latest subject version is backward compatible when `use.latest.version` is `true`.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.latest.compatibility.strict",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "type": "STRING",
          "default_value": "TopicNameStrategy",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "alias": "key.subject.name.strategy",
          "documentation": "How to construct the subject name for key schema registration.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "key.converter.key.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "default_value": "TopicNameStrategy",
          "alias": "subject.name.strategy,value.subject.name.strategy",
          "documentation": "Determines how to construct the subject name under which the value schema is registered with Schema Registry.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.value.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "DefaultReferenceSubjectNameStrategy",
            "QualifiedReferenceSubjectNameStrategy"
          ],
          "default_value": "DefaultReferenceSubjectNameStrategy",
          "documentation": "Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.reference.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys",
          "type": "BOOLEAN",
          "documentation": "Allow optional string map key when converting from Connect Schema to Avro Schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.allow.optional.map.keys",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.singleton.unions",
          "type": "BOOLEAN",
          "default_value": "false",
          "documentation": "Whether to flatten singleton unions. Applicable for Avro and JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.singleton.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.proto2",
          "type": "BOOLEAN",
          "documentation": "Whether proto2 optionals are supported. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.proto2",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to flatten unions (oneofs). Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "header.converter",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "header.converter",
          "documentation": "The converter class for the headers. This is used to serialize and deserialize the headers of the messages.",
          "recommended_values": [
            "org.apache.kafka.connect.storage.SimpleHeaderConverter",
            "org.apache.kafka.connect.storage.StringConverter",
            "org.apache.kafka.connect.json.JsonConverter",
            "org.apache.kafka.connect.converters.BooleanConverter",
            "org.apache.kafka.connect.converters.DoubleConverter",
            "org.apache.kafka.connect.converters.FloatConverter",
            "org.apache.kafka.connect.converters.IntegerConverter",
            "org.apache.kafka.connect.converters.LongConverter",
            "org.apache.kafka.connect.converters.ShortConverter"
          ],
          "metadata": {
            "group_name": "Additional Configs",
            "page": "CONFIGURATION",
            "advanced": true
          }
        }
      ],
      "connector_configs": [
        {
          "name": "auto.restart.on.user.error"
        },
        {
          "name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "dynamic.mapper": {
            "name": "value.converter.auto.register.schemas.mapper"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "dynamic.mapper": {
            "name": "value.converter.use.latest.version.mapper"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.reference.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter"
        }
      ]
    }
  ],
  "all_config_def_names": [
    "auth.type",
    "behavior.on.error",
    "connection.password",
    "connection.user",
    "connector.class",
    "index1.batch.size",
    "index1.behavior.on.null.values",
    "index1.name",
    "index1.report.only.status.code.to.success.topic",
    "index1.topic",
    "index2.batch.size",
    "index2.behavior.on.null.values",
    "index2.name",
    "index2.report.only.status.code.to.success.topic",
    "index2.topic",
    "index3.batch.size",
    "index3.behavior.on.null.values",
    "index3.name",
    "index3.report.only.status.code.to.success.topic",
    "index3.topic",
    "index4.batch.size",
    "index4.behavior.on.null.values",
    "index4.name",
    "index4.report.only.status.code.to.success.topic",
    "index4.topic",
    "index5.batch.size",
    "index5.behavior.on.null.values",
    "index5.name",
    "index5.report.only.status.code.to.success.topic",
    "index5.topic",
    "indexes.num",
    "input.data.format",
    "instance.url",
    "kafka.api.key",
    "kafka.api.secret",
    "kafka.auth.mode",
    "kafka.service.account.id",
    "max.poll.interval.ms",
    "max.poll.records",
    "max.retries",
    "name",
    "opensearch.ssl.enabled",
    "opensearch.ssl.key.password",
    "opensearch.ssl.keystore.password",
    "opensearch.ssl.keystorefile",
    "opensearch.ssl.protocol",
    "opensearch.ssl.truststore.password",
    "opensearch.ssl.truststorefile",
    "retry.backoff.ms",
    "retry.backoff.policy",
    "retry.on.status.codes",
    "schema.context.name",
    "tasks.max",
    "topics"
  ],
  "all_connector_configs": [
    {
      "name": "apis.num",
      "value": "${indexes.num}"
    },
    {
      "name": "http.api.base.url",
      "value": "${instance.url}"
    },
    {
      "name": "consumer.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "producer.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "admin.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "opensearch.ssl.keystore.location",
      "value": "${opensearch.ssl.keystorefile}"
    },
    {
      "name": "opensearch.ssl.truststore.location",
      "value": "${opensearch.ssl.truststorefile}"
    },
    {
      "name": "api1.topics",
      "value": "${index1.topic}"
    },
    {
      "name": "api1.http.api.path",
      "switch": {
        "index1.batch.size": {
          "1": "/${index1.name}/_doc",
          "DEFAULT": "/_bulk"
        }
      }
    },
    {
      "name": "api1.max.batch.size",
      "value": "${index1.batch.size}"
    },
    {
      "name": "api1.record.prefix",
      "value": "{\"index\":{\"_index\": \"${index1.name}\"}}"
    },
    {
      "name": "api1.max.retries",
      "value": "${max.retries}"
    },
    {
      "name": "api1.retry.backoff.ms",
      "value": "${retry.backoff.ms}"
    },
    {
      "name": "api1.retry.backoff.policy",
      "value": "${retry.backoff.policy}"
    },
    {
      "name": "api1.retry.on.status.codes",
      "value": "${retry.on.status.codes}"
    },
    {
      "name": "api1.behavior.on.null.values",
      "value": "${index1.behavior.on.null.values}"
    },
    {
      "name": "api1.report.only.status.code.to.success.topic",
      "value": "${index1.report.only.status.code.to.success.topic}"
    },
    {
      "name": "api2.topics",
      "value": "${index2.topic}"
    },
    {
      "name": "api2.http.api.path",
      "switch": {
        "index2.batch.size": {
          "1": "/${index2.name}/_doc",
          "DEFAULT": "/_bulk"
        }
      }
    },
    {
      "name": "api2.max.batch.size",
      "value": "${index2.batch.size}"
    },
    {
      "name": "api2.record.prefix",
      "value": "{\"index\":{\"_index\": \"${index2.name}\"}}"
    },
    {
      "name": "api2.max.retries",
      "value": "${max.retries}"
    },
    {
      "name": "api2.retry.backoff.ms",
      "value": "${retry.backoff.ms}"
    },
    {
      "name": "api2.retry.backoff.policy",
      "value": "${retry.backoff.policy}"
    },
    {
      "name": "api2.retry.on.status.codes",
      "value": "${retry.on.status.codes}"
    },
    {
      "name": "api2.behavior.on.null.values",
      "value": "${index2.behavior.on.null.values}"
    },
    {
      "name": "api2.report.only.status.code.to.success.topic",
      "value": "${index2.report.only.status.code.to.success.topic}"
    },
    {
      "name": "api3.topics",
      "value": "${index3.topic}"
    },
    {
      "name": "api3.http.api.path",
      "switch": {
        "index3.batch.size": {
          "1": "/${index3.name}/_doc",
          "DEFAULT": "/_bulk"
        }
      }
    },
    {
      "name": "api3.max.batch.size",
      "value": "${index3.batch.size}"
    },
    {
      "name": "api3.record.prefix",
      "value": "{\"index\":{\"_index\": \"${index3.name}\"}}"
    },
    {
      "name": "api3.max.retries",
      "value": "${max.retries}"
    },
    {
      "name": "api3.retry.backoff.ms",
      "value": "${retry.backoff.ms}"
    },
    {
      "name": "api3.retry.backoff.policy",
      "value": "${retry.backoff.policy}"
    },
    {
      "name": "api3.retry.on.status.codes",
      "value": "${retry.on.status.codes}"
    },
    {
      "name": "api3.behavior.on.null.values",
      "value": "${index3.behavior.on.null.values}"
    },
    {
      "name": "api3.report.only.status.code.to.success.topic",
      "value": "${index3.report.only.status.code.to.success.topic}"
    },
    {
      "name": "api4.topics",
      "value": "${index4.topic}"
    },
    {
      "name": "api4.http.api.path",
      "switch": {
        "index4.batch.size": {
          "1": "/${index4.name}/_doc",
          "DEFAULT": "/_bulk"
        }
      }
    },
    {
      "name": "api4.max.batch.size",
      "value": "${index4.batch.size}"
    },
    {
      "name": "api4.record.prefix",
      "value": "{\"index\":{\"_index\": \"${index4.name}\"}}"
    },
    {
      "name": "api4.max.retries",
      "value": "${max.retries}"
    },
    {
      "name": "api4.retry.backoff.ms",
      "value": "${retry.backoff.ms}"
    },
    {
      "name": "api4.retry.backoff.policy",
      "value": "${retry.backoff.policy}"
    },
    {
      "name": "api4.retry.on.status.codes",
      "value": "${retry.on.status.codes}"
    },
    {
      "name": "api4.behavior.on.null.values",
      "value": "${index4.behavior.on.null.values}"
    },
    {
      "name": "api4.report.only.status.code.to.success.topic",
      "value": "${index4.report.only.status.code.to.success.topic}"
    },
    {
      "name": "api5.topics",
      "value": "${index5.topic}"
    },
    {
      "name": "api5.http.api.path",
      "switch": {
        "index5.batch.size": {
          "1": "/${index5.name}/_doc",
          "DEFAULT": "/_bulk"
        }
      }
    },
    {
      "name": "api5.max.batch.size",
      "value": "${index5.batch.size}"
    },
    {
      "name": "api5.record.prefix",
      "value": "{\"index\":{\"_index\": \"${index5.name}\"}}"
    },
    {
      "name": "api5.max.retries",
      "value": "${max.retries}"
    },
    {
      "name": "api5.retry.backoff.ms",
      "value": "${retry.backoff.ms}"
    },
    {
      "name": "api5.retry.backoff.policy",
      "value": "${retry.backoff.policy}"
    },
    {
      "name": "api5.retry.on.status.codes",
      "value": "${retry.on.status.codes}"
    },
    {
      "name": "api5.behavior.on.null.values",
      "value": "${index5.behavior.on.null.values}"
    },
    {
      "name": "api5.report.only.status.code.to.success.topic",
      "value": "${index5.report.only.status.code.to.success.topic}"
    },
    {
      "name": "connector.endpoint",
      "value": "${instance.url}"
    },
    {
      "name": "consumer.override.bootstrap.servers",
      "switch": {
        "connect.metadata_property.kafka.itsl.bootstrap.servers": {
          "UNSET": "${kafka.endpoint}",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
        }
      }
    },
    {
      "name": "producer.override.bootstrap.servers",
      "switch": {
        "connect.metadata_property.kafka.itsl.bootstrap.servers": {
          "UNSET": "${kafka.endpoint}",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
        }
      }
    },
    {
      "name": "admin.override.bootstrap.servers",
      "switch": {
        "connect.metadata_property.kafka.itsl.bootstrap.servers": {
          "UNSET": "${kafka.endpoint}",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
        }
      }
    },
    {
      "name": "producer.override.confluent.lkc.id",
      "switch": {
        "connect.metadata_property.kafka.itsl.embed.lkc": {
          "SKIP": "",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
        }
      }
    },
    {
      "name": "consumer.override.confluent.lkc.id",
      "switch": {
        "connect.metadata_property.kafka.itsl.embed.lkc": {
          "SKIP": "",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
        }
      }
    },
    {
      "name": "admin.override.confluent.lkc.id",
      "switch": {
        "connect.metadata_property.kafka.itsl.embed.lkc": {
          "SKIP": "",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
        }
      }
    },
    {
      "name": "errors.deadletterqueue.topic.name",
      "value": "dlq-{{.logicalClusterId}}"
    },
    {
      "name": "consumer.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "consumer.override.max.poll.interval.ms",
      "value": "${max.poll.interval.ms}"
    },
    {
      "name": "consumer.override.max.poll.records",
      "value": "${max.poll.records}"
    },
    {
      "name": "producer.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "admin.override.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "reporter.bootstrap.servers",
      "switch": {
        "connect.metadata_property.kafka.itsl.bootstrap.servers": {
          "UNSET": "${kafka.endpoint}",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
        }
      }
    },
    {
      "name": "reporter.producer.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "reporter.admin.sasl.jaas.config",
      "value": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.key}\" password=\"${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:kafka.api.secret}\";"
    },
    {
      "name": "reporter.result.topic.name",
      "value": "success-${connector}"
    },
    {
      "name": "reporter.error.topic.name",
      "value": "error-${connector}"
    },
    {
      "name": "reporter.admin.confluent.lkc.id",
      "switch": {
        "connect.metadata_property.kafka.itsl.embed.lkc": {
          "SKIP": "",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
        }
      }
    },
    {
      "name": "reporter.producer.confluent.lkc.id",
      "switch": {
        "connect.metadata_property.kafka.itsl.embed.lkc": {
          "SKIP": "",
          "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
        }
      }
    },
    {
      "name": "value.converter.schema.registry.url",
      "switch": {
        "input.data.format": {
          "AVRO": "${schema.registry.url}",
          "JSON_SR": "${schema.registry.url}",
          "PROTOBUF": "${schema.registry.url}"
        }
      }
    },
    {
      "name": "value.converter.basic.auth.user.info",
      "switch": {
        "input.data.format": {
          "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
        }
      }
    }
  ],
  "config_defs_not_used_as_connector_names": [
    "connector.class",
    "index1.batch.size",
    "index1.behavior.on.null.values",
    "index1.name",
    "index1.report.only.status.code.to.success.topic",
    "index1.topic",
    "index2.batch.size",
    "index2.behavior.on.null.values",
    "index2.name",
    "index2.report.only.status.code.to.success.topic",
    "index2.topic",
    "index3.batch.size",
    "index3.behavior.on.null.values",
    "index3.name",
    "index3.report.only.status.code.to.success.topic",
    "index3.topic",
    "index4.batch.size",
    "index4.behavior.on.null.values",
    "index4.name",
    "index4.report.only.status.code.to.success.topic",
    "index4.topic",
    "index5.batch.size",
    "index5.behavior.on.null.values",
    "index5.name",
    "index5.report.only.status.code.to.success.topic",
    "index5.topic",
    "indexes.num",
    "input.data.format",
    "instance.url",
    "kafka.api.key",
    "kafka.api.secret",
    "kafka.auth.mode",
    "kafka.service.account.id",
    "max.poll.interval.ms",
    "max.poll.records",
    "max.retries",
    "name",
    "opensearch.ssl.keystorefile",
    "opensearch.ssl.truststorefile",
    "retry.backoff.ms",
    "retry.backoff.policy",
    "retry.on.status.codes",
    "schema.context.name"
  ]
}