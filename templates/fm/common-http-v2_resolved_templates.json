{
  "templates": [
    {
      "template_id": "common-http-v2",
      "abstract": true,
      "config_defs": [
        {
          "name": "error.topic.name",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Reporter",
          "order_in_group": 1,
          "default_value": "error-${connector}",
          "display_name": "Error Topic Name",
          "documentation": "Name of the error topic",
          "docs_hidden": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true
          }
        },
        {
          "name": "report.errors.as",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Reporter",
          "order_in_group": 2,
          "default_value": "Error string",
          "display_name": "Error record format",
          "documentation": "Dictates the content of records produced to the error topic. If set to ``Error string`` the value would be a human readable string describing the failure. The value will include some or all of the following information if available: http response code, reason phrase, submitted payload, url, response content, exception and error message. If set to http_response, the value would be the plain response content for the request which failed to write the record. In both modes, any information about the failure will also be included in the error records headers.",
          "recommended_values": [
            "Error string",
            "Http response"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true
          }
        },
        {
          "name": "http.api.base.url",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 1,
          "display_name": "API Base URL",
          "documentation": "The HTTP API Base URL. For example: `http://example.com/absenceManagement/v1`.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 1,
            "group_name": "Authentication"
          }
        },
        {
          "name": "auth.type",
          "type": "STRING",
          "required": false,
          "default_value": "NONE",
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 2,
          "display_name": "Endpoint Authentication Type",
          "documentation": "Authentication type of the endpoint. Valid values are ``NONE``, ``BASIC``, ``OAUTH2``, ``BEARER``",
          "recommended_values": [
            "NONE",
            "BASIC",
            "OAUTH2",
            "BEARER"
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 2,
            "group_name": "Authentication"
          }
        },
        {
          "name": "connection.user",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 3,
          "display_name": "Auth Username",
          "documentation": "The username to be used with an endpoint requiring basic authentication.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 3,
            "visibility": "auth.type==BASIC",
            "group_name": "Authentication"
          }
        },
        {
          "name": "connection.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 4,
          "display_name": "Auth Password",
          "documentation": "The password to be used with an endpoint requiring basic authentication.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 4,
            "visibility": "auth.type==BASIC",
            "group_name": "Authentication"
          }
        },
        {
          "name": "bearer.token",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 5,
          "display_name": "Bearer Token",
          "documentation": "The bearer authentication token to be used with an endpoint requiring bearer token based authentication.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 5,
            "visibility": "auth.type==BEARER",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.flow.type",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 6,
          "display_name": "OAuth2 Flow Type",
          "documentation": "OAuth flow type to use for authenticating to the API endpoint",
          "default_value": "CLIENT_CREDENTIALS_FLOW",
          "recommended_values": [
            "CLIENT_CREDENTIALS_FLOW",
            "CODE_GRANT_FLOW"
          ],
          "validators": [
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "auth.type==OAUTH2"
              }
            }
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 6,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.auth.endpoint",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 7,
          "display_name": "OAuth2 Auth Endpoint",
          "documentation": "The URL used to obtain an authorization code during the OAuth code grant flow",
          "validators": [
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "auth.type==OAUTH2 && oauth2.flow.type==CODE_GRANT_FLOW"
              }
            }
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 7,
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CODE_GRANT_FLOW",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.token.url",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 8,
          "display_name": "OAuth2 Token URL",
          "documentation": "The URL to be used for fetching the OAuth2 Access & Refresh Tokens.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 8,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.id",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 9,
          "display_name": "OAuth2 Client ID",
          "documentation": "The client id used when fetching the OAuth2 token.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 9,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 10,
          "display_name": "OAuth2 Client Secret",
          "documentation": "The client secret used when fetching the OAuth2 token.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 10,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.token.property",
          "type": "STRING",
          "required": false,
          "default_value": "access_token",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 11,
          "display_name": "OAuth2 Token Property Name",
          "documentation": "The name of the property containing the OAuth2 token returned by the OAuth2 token URL (defaults to `access_token`).",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 11,
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CLIENT_CREDENTIALS_FLOW",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.scope",
          "type": "STRING",
          "required": false,
          "default_value": "any",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 12,
          "display_name": "OAuth2 Client Scope",
          "documentation": "The scope parameter sent to the service when fetching the OAuth2 token.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 12,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.auth.mode",
          "type": "STRING",
          "required": false,
          "default_value": "header",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 13,
          "display_name": "OAuth2 Client Mode",
          "documentation": "Specifies how to encode ``client_id`` and ``client_secret`` in the OAuth2 authorization request. If set to ``header``, the credentials are encoded as an `'Authorization: Basic <base-64 encoded client_id:client_secret>'` HTTP header. If set to 'url', then ``client_id`` and ``client_secret`` are sent as URL encoded parameters. If set to 'request_body', then ``client_id`` and ``client_secret`` are sent in the request body",
          "recommended_values": [
            "header",
            "url",
            "request_body"
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 13,
            "visibility": "auth.type==OAUTH2",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "LOW",
          "group": "Authentication",
          "order_in_group": 14,
          "display_name": "OAuth2 Client Headers",
          "documentation": "HTTP headers to be included in the OAuth2 client endpoint. Individual headers should be separated by `|`",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 14,
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CLIENT_CREDENTIALS_FLOW",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.client.header.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "LOW",
          "group": "Authentication",
          "order_in_group": 15,
          "display_name": "OAuth2 Client Headers Separator",
          "documentation": "Separator character used in OAuth2 Client Headers",
          "docs_hidden": "true",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 15,
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CLIENT_CREDENTIALS_FLOW",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.query.params",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 16,
          "display_name": "OAuth query parameters",
          "documentation": "OAuth query parameters.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 16,
            "advanced": false,
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CODE_GRANT_FLOW",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.auth.button",
          "type": "STRING",
          "required": false,
          "queryable_internal": true,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 17,
          "display_name": "Authorize Connector",
          "documentation": "Initiates the OAuth authentication flow.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 17,
            "group_name": "Authentication",
            "visibility": "auth.type==OAUTH2"
          }
        },
        {
          "name": "oauth2.refresh.token",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 18,
          "display_name": "Refresh Token",
          "documentation": "OAuth 2.0 refresh token.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 18,
            "visibility": "false"
          }
        },
        {
          "name": "oauth2.session.id",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "queryable_internal": true,
          "group": "Authentication",
          "order_in_group": 19,
          "display_name": "Connect OAuth Session ID",
          "documentation": "Connect OAuth Session ID.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 19,
            "visibility": "false"
          }
        },
        {
          "name": "oauth.config.map",
          "type": "STRING",
          "required": false,
          "default_value": "auth_endpoint:oauth2.auth.endpoint,token_endpoint:oauth2.token.url,client_id:oauth2.client.id,client_secret:oauth2.client.secret,client_auth_mode:oauth2.client.auth.mode,scopes:oauth2.client.scope,query_params:oauth2.query.params,oauth_session_id:oauth2.session.id,refresh_token:oauth2.refresh.token,connector_class:connector.class,auth_button:oauth2.auth.button",
          "importance": "HIGH",
          "queryable_internal": true,
          "group": "Authentication",
          "order_in_group": 20,
          "display_name": "Connect OAuth Config Map",
          "documentation": "Connect OAuth Config Map to map OAuth API parameters to ConfigDefs.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 20,
            "visibility": "false"
          }
        },
        {
          "name": "gcp.credentials.json",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 21,
          "display_name": "GCP credentials file",
          "documentation": "GCP service account JSON file.",
          "sanitizers": [
            {
              "name": "gcp.credentials.sanitize"
            }
          ],
          "validators": [
            {
              "name": "gcp.credentials.type"
            }
          ],
          "docs_hidden": true,
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 21,
            "visibility": "auth.type==GOOGLE_CLOUD_SERVICE_ACCOUNT",
            "inputType": "CREDENTIALS_FILE",
            "credentialsProvider": "GCP"
          }
        },
        {
          "name": "oauth2.jwt.enabled",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 22,
          "display_name": "Add JWT token",
          "documentation": "Whether to generate and add JWT token to request. If selected, JWT token will be added as 'jwt_token' request param",
          "docs_hidden": true,
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 22,
            "group_name": "Authentication",
            "visibility": "auth.type==OAUTH2 && oauth2.flow.type==CLIENT_CREDENTIALS_FLOW"
          }
        },
        {
          "name": "oauth2.jwt.keystore.path",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 23,
          "display_name": "JWT keystore",
          "documentation": "Keystore containing private key to use to sign JWT.",
          "docs_hidden": true,
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 23,
            "inputType": "CREDENTIALS_FILE",
            "secretType": "BINARY",
            "visibility": "oauth2.jwt.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.jwt.keystore.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 24,
          "display_name": "JWT keystore password",
          "documentation": "Password to access keystore",
          "docs_hidden": true,
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 24,
            "visibility": "oauth2.jwt.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.jwt.keystore.type",
          "type": "STRING",
          "required": false,
          "default_value": "JKS",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 25,
          "display_name": "JWT keystore type",
          "documentation": "JWT keystore type",
          "docs_hidden": true,
          "recommended_values": [
            "JKS",
            "PKCS12"
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 25,
            "visibility": "oauth2.jwt.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "oauth2.jwt.claimset",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 26,
          "display_name": "JWT JSON claims",
          "documentation": "JSON containing JWT claims",
          "docs_hidden": true,
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": true,
            "order_in_page": 26,
            "visibility": "oauth2.jwt.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.enabled",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 27,
          "display_name": "SSL Enabled",
          "documentation": "Controls whether to enforce TLSv1.3 for HTTPS connections. If false, the connector uses the JVM default TLS configuration (typically TLSv1.2). If true, TLSv1.3 is enforced. Note that, even when disabled, HTTPS connections still use TLS. This setting only controls TLS version enforcement.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 27,
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.keystorefile",
          "type": "PASSWORD",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "Authentication",
          "order_in_group": 28,
          "display_name": "Key Store",
          "documentation": "The key store containing the server certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 28,
            "inputType": "CREDENTIALS_FILE",
            "secretType": "BINARY",
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.keystore.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 29,
          "display_name": "Keystore Password",
          "documentation": "The store password for the key store file.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 29,
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.key.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 30,
          "display_name": "Key Password",
          "documentation": "The password for the private key in the key store file.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 30,
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.truststorefile",
          "type": "PASSWORD",
          "required": false,
          "default_value": "",
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 31,
          "display_name": "Trust Store",
          "documentation": "The trust store containing a server CA certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 31,
            "inputType": "CREDENTIALS_FILE",
            "secretType": "BINARY",
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "https.ssl.truststore.password",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Authentication",
          "order_in_group": 32,
          "display_name": "Trust Store Password",
          "documentation": "The trust store password containing a server CA certificate.",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 32,
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "apis.num",
          "type": "INT",
          "required": true,
          "default_value": 1,
          "importance": "HIGH",
          "group": "APIs",
          "order_in_group": 1,
          "display_name": "Number of http(s) APIs.",
          "documentation": "The number of http(s) APIs to configure. This value should be less than or equal to 15",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 1,
            "group_name": "APIs"
          }
        },
        {
          "name": "send.multiple.http.requests.per.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Performance Tuning",
          "order_in_group": 1,
          "display_name": "Send multiple HTTP requests per API",
          "documentation": "Send multiple HTTP requests per API.",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true
          }
        },
        {
          "name": "behavior.on.error",
          "type": "STRING",
          "required": false,
          "default_value": "FAIL",
          "importance": "LOW",
          "group": "Behavior on error",
          "order_in_group": 1,
          "display_name": "Behavior On Errors",
          "documentation": "Error handling behavior setting for handling error response from HTTP requests. ",
          "recommended_values": [
            "FAIL",
            "IGNORE"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 1,
            "visibility": true,
            "group_name": "Behavior on error"
          }
        },
        {
          "name": "https.ssl.protocol",
          "type": "STRING",
          "required": false,
          "default_value": "TLSv1.3",
          "importance": "MEDIUM",
          "group": "Authentication",
          "order_in_group": 25,
          "display_name": "SSL Protocol",
          "documentation": "The protocol to use for SSL connections",
          "metadata": {
            "page": "AUTHENTICATION",
            "advanced": false,
            "order_in_page": 25,
            "visibility": "https.ssl.enabled==true",
            "group_name": "Authentication"
          }
        },
        {
          "name": "api1.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-1 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 26,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 27,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 28,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api1.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 29,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api1.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 30,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 31,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 32,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 33,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 34,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 35,
            "advanced": true,
            "group_name": "API-1 Advanced Configs"
          }
        },
        {
          "name": "api1.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 36,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 37,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-1 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 38,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-1 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 39,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-1 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 40,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-1 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 41,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api1.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-1 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 42,
            "group_name": "API-1 Connection details"
          }
        },
        {
          "name": "api2.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-2 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 36,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 37,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 38,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api2.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 39,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api2.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 40,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 41,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 42,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 43,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 44,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 45,
            "advanced": true,
            "group_name": "API-2 Advanced Configs"
          }
        },
        {
          "name": "api2.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 46,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 47,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-2 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 48,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-2 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 49,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-2 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 50,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-2 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 51,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api2.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-2 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 52,
            "group_name": "API-2 Connection details"
          }
        },
        {
          "name": "api3.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-3 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 46,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 47,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 48,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api3.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 49,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api3.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 50,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 51,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 52,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 53,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 54,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 55,
            "advanced": true,
            "group_name": "API-3 Advanced Configs"
          }
        },
        {
          "name": "api3.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 56,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 57,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-3 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 58,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-3 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 59,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-3 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 60,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-3 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 61,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api3.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-3 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 62,
            "group_name": "API-3 Connection details"
          }
        },
        {
          "name": "api4.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-4 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 56,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 57,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 58,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api4.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 59,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api4.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 60,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 61,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 62,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 63,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 64,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 65,
            "advanced": true,
            "group_name": "API-4 Advanced Configs"
          }
        },
        {
          "name": "api4.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 66,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 67,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-4 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 68,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-4 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 69,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-4 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 70,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-4 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 71,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api4.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-4 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 72,
            "group_name": "API-4 Connection details"
          }
        },
        {
          "name": "api5.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-5 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 66,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 67,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 68,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api5.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 69,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api5.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 70,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 71,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 72,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 73,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 74,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 75,
            "advanced": true,
            "group_name": "API-5 Advanced Configs"
          }
        },
        {
          "name": "api5.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 76,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 77,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-5 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 78,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-5 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 79,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-5 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 80,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-5 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 81,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api5.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-5 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 82,
            "group_name": "API-5 Connection details"
          }
        },
        {
          "name": "api6.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-6 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 76,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 77,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 78,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api6.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 79,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api6.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 80,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 81,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 82,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 83,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 84,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 85,
            "advanced": true,
            "group_name": "API-6 Advanced Configs"
          }
        },
        {
          "name": "api6.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 86,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 87,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-6 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 88,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-6 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 89,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-6 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 90,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-6 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 91,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api6.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-6 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 92,
            "group_name": "API-6 Connection details"
          }
        },
        {
          "name": "api7.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-7 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 86,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 87,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 88,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api7.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 89,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api7.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 90,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 91,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 92,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 93,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 94,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 95,
            "advanced": true,
            "group_name": "API-7 Advanced Configs"
          }
        },
        {
          "name": "api7.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 96,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 97,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-7 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 98,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-7 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 99,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-7 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 100,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-7 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 101,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api7.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-7 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 102,
            "group_name": "API-7 Connection details"
          }
        },
        {
          "name": "api8.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-8 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 96,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 97,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 98,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api8.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 99,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api8.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 100,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 101,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 102,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 103,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 104,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 105,
            "advanced": true,
            "group_name": "API-8 Advanced Configs"
          }
        },
        {
          "name": "api8.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 106,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 107,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-8 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 108,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-8 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 109,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-8 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 110,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-8 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 111,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api8.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-8 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 112,
            "group_name": "API-8 Connection details"
          }
        },
        {
          "name": "api9.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-9 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 106,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 107,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 108,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api9.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 109,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api9.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 110,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 111,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 112,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 113,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 114,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 115,
            "advanced": true,
            "group_name": "API-9 Advanced Configs"
          }
        },
        {
          "name": "api9.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 116,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 117,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-9 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 118,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-9 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 119,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-9 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 120,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-9 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 121,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api9.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-9 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 122,
            "group_name": "API-9 Connection details"
          }
        },
        {
          "name": "api10.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-10 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 116,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 117,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 118,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api10.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 119,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api10.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 120,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 121,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 122,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 123,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 124,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 125,
            "advanced": true,
            "group_name": "API-10 Advanced Configs"
          }
        },
        {
          "name": "api10.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 126,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 127,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-10 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 128,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-10 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 129,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-10 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 130,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-10 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 131,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api10.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-10 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 132,
            "group_name": "API-10 Connection details"
          }
        },
        {
          "name": "api11.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-11 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 126,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 127,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 128,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api11.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 129,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api11.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 130,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 131,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 132,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 133,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 134,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 135,
            "advanced": true,
            "group_name": "API-11 Advanced Configs"
          }
        },
        {
          "name": "api11.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 136,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 137,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-11 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 138,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-11 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 139,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-11 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 140,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-11 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 141,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api11.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-11 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 142,
            "group_name": "API-11 Connection details"
          }
        },
        {
          "name": "api12.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-12 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 136,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 137,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 138,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api12.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 139,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api12.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 140,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 141,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 142,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 143,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 144,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 145,
            "advanced": true,
            "group_name": "API-12 Advanced Configs"
          }
        },
        {
          "name": "api12.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 146,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 147,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-12 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 148,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-12 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 149,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-12 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 150,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-12 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 151,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api12.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-12 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 152,
            "group_name": "API-12 Connection details"
          }
        },
        {
          "name": "api13.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-13 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 146,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 147,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 148,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api13.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 149,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api13.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 150,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 151,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 152,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 153,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 154,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 155,
            "advanced": true,
            "group_name": "API-13 Advanced Configs"
          }
        },
        {
          "name": "api13.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 156,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 157,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-13 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 158,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-13 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 159,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-13 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 160,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-13 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 161,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api13.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-13 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 162,
            "group_name": "API-13 Connection details"
          }
        },
        {
          "name": "api14.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-14 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 156,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 157,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 158,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api14.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 159,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api14.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 160,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 161,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 162,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 163,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 164,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 165,
            "advanced": true,
            "group_name": "API-14 Advanced Configs"
          }
        },
        {
          "name": "api14.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 166,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 167,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-14 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 168,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-14 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 169,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-14 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 170,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-14 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 171,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api14.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-14 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 172,
            "group_name": "API-14 Connection details"
          }
        },
        {
          "name": "api15.http.api.path",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "API-15 Configs",
          "order_in_group": 1,
          "display_name": "API Path",
          "documentation": "The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 166,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.http.request.headers",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 2,
          "display_name": "HTTP Request Headers",
          "documentation": "HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 167,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.http.connect.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 3,
          "display_name": "Connect timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a connection to be established",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 168,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api15.http.request.timeout.ms",
          "type": "INT",
          "required": false,
          "default_value": 30000,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 4,
          "display_name": "Request timeout (milliseconds)",
          "documentation": "The time in milliseconds to wait for a request response from the server",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 169,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          },
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 600000
              }
            }
          ]
        },
        {
          "name": "api15.max.retries",
          "type": "INT",
          "required": false,
          "default_value": 5,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 5,
          "display_name": "Maximum Retries",
          "documentation": "The maximum number of times to retry on errors before failing the task.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 170,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.retry.backoff.policy",
          "type": "STRING",
          "required": false,
          "default_value": "EXPONENTIAL_WITH_JITTER",
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 6,
          "display_name": "Retry Backoff Policy",
          "documentation": "The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER",
          "recommended_values": [
            "CONSTANT_VALUE",
            "EXPONENTIAL_WITH_JITTER"
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 171,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.retry.backoff.ms",
          "type": "INT",
          "required": false,
          "default_value": 3000,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 7,
          "display_name": "Retry Backoff (ms)",
          "documentation": "The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 100
              }
            }
          ],
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 172,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.retry.on.status.codes",
          "type": "STRING",
          "required": false,
          "default_value": "400-",
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 8,
          "display_name": "Retry HTTP Status Codes",
          "documentation": "Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 173,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.http.request.headers.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 9,
          "display_name": "HTTP Request Headers Separator",
          "documentation": "The character that separates multiple distinct headers in the config 'http.request.headers'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 174,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.http.request.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "&",
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 10,
          "display_name": "HTTP Request Parameters Separator",
          "documentation": "The character that separates multiple distinct request parameters in the config 'http.request.parameters'.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 175,
            "advanced": true,
            "group_name": "API-15 Advanced Configs"
          }
        },
        {
          "name": "api15.http.path.parameters",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 11,
          "display_name": "HTTP Path Parameters",
          "documentation": "HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${key}``, ``${topic}``, ``${offset}`` or other field references from kafka record.",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 176,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.http.path.parameters.separator",
          "type": "STRING",
          "required": false,
          "default_value": "|",
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 12,
          "display_name": "HTTP Path Parameters Separator",
          "documentation": "The character that separates multiple distinct path parameters in the config `http.path.parameters`",
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 177,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.test.api",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "API-15 Configs",
          "order_in_group": 13,
          "display_name": "Test api",
          "documentation": "Flag to determine if the api needs to be tested",
          "internal": false,
          "docs_hidden": "true",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 178,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.test.api.http.request.body",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-15 Configs",
          "order_in_group": 14,
          "display_name": "Test api request body",
          "documentation": "Test request body to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 179,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.test.api.offset",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-15 Configs",
          "order_in_group": 15,
          "display_name": "Test api offset",
          "documentation": "Initial offset to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 180,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.test.api.topic",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "API-15 Configs",
          "order_in_group": 16,
          "display_name": "Test api topic",
          "documentation": "Topic name to be used when invoking test api",
          "internal": true,
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 181,
            "group_name": "API-15 Connection details"
          }
        },
        {
          "name": "api15.http.request.sensitive.headers",
          "type": "PASSWORD",
          "required": false,
          "importance": "MEDIUM",
          "group": "API-15 Configs",
          "order_in_group": 17,
          "display_name": "Sensitive HTTP Request Headers",
          "documentation": "Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": false,
            "order_in_page": 182,
            "group_name": "API-15 Connection details"
          }
        }
      ],
      "connector_configs": [
        {
          "name": "apis.num"
        },
        {
          "name": "max.apis.num",
          "value": "15"
        },
        {
          "name": "http.api.base.url"
        },
        {
          "name": "max.execution.timeout.ms"
        },
        {
          "name": "auth.type"
        },
        {
          "name": "connection.user"
        },
        {
          "name": "connection.password"
        },
        {
          "name": "bearer.token"
        },
        {
          "name": "oauth2.flow.type"
        },
        {
          "name": "oauth2.token.url"
        },
        {
          "name": "oauth2.client.id"
        },
        {
          "name": "oauth2.client.secret"
        },
        {
          "name": "oauth2.refresh.token",
          "value": "${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:oauth2.refresh.token}"
        },
        {
          "name": "oauth2.token.property"
        },
        {
          "name": "oauth2.client.headers"
        },
        {
          "name": "oauth2.client.header.separator"
        },
        {
          "name": "oauth2.client.scope"
        },
        {
          "name": "oauth2.client.auth.mode"
        },
        {
          "name": "oauth2.jwt.enabled"
        },
        {
          "name": "oauth2.jwt.keystore.path"
        },
        {
          "name": "oauth2.jwt.keystore.password"
        },
        {
          "name": "oauth2.jwt.keystore.type"
        },
        {
          "name": "oauth2.jwt.claimset"
        },
        {
          "name": "https.ssl.enabled"
        },
        {
          "name": "https.ssl.keystore.location",
          "value": "${https.ssl.keystorefile}"
        },
        {
          "name": "https.ssl.keystore.password"
        },
        {
          "name": "https.ssl.key.password"
        },
        {
          "name": "behavior.on.error"
        },
        {
          "name": "send.multiple.http.requests.per.api"
        },
        {
          "name": "https.ssl.truststore.location",
          "value": "${https.ssl.truststorefile}"
        },
        {
          "name": "https.ssl.truststore.password"
        },
        {
          "name": "https.ssl.protocol"
        },
        {
          "name": "connector.endpoint",
          "value": "${http.api.base.url}"
        },
        {
          "name": "reporter.error.topic.name",
          "value": "error-${connector}"
        },
        {
          "name": "report.errors.as",
          "switch": {
            "report.errors.as": {
              "Error string": "ERROR_STRING",
              "Http response": "HTTP_RESPONSE"
            }
          }
        },
        {
          "name": "add.error.to.trace",
          "value": "true"
        },
        {
          "name": "sensitive.headers.list"
        },
        {
          "name": "sensitive.headers.validation.enabled"
        },
        {
          "name": "api1.http.api.path"
        },
        {
          "name": "api1.http.request.headers"
        },
        {
          "name": "api1.http.request.sensitive.headers"
        },
        {
          "name": "api1.http.path.parameters"
        },
        {
          "name": "api1.http.connect.timeout.ms"
        },
        {
          "name": "api1.http.request.timeout.ms"
        },
        {
          "name": "api1.max.retries"
        },
        {
          "name": "api1.retry.backoff.ms"
        },
        {
          "name": "api1.retry.backoff.policy"
        },
        {
          "name": "api1.retry.on.status.codes"
        },
        {
          "name": "api1.test.api"
        },
        {
          "name": "api1.test.api.http.request.body"
        },
        {
          "name": "api1.test.api.topic"
        },
        {
          "name": "api1.test.api.offset"
        },
        {
          "name": "api2.http.api.path"
        },
        {
          "name": "api2.http.request.headers"
        },
        {
          "name": "api2.http.request.sensitive.headers"
        },
        {
          "name": "api2.http.path.parameters"
        },
        {
          "name": "api2.http.connect.timeout.ms"
        },
        {
          "name": "api2.http.request.timeout.ms"
        },
        {
          "name": "api2.max.retries"
        },
        {
          "name": "api2.retry.backoff.ms"
        },
        {
          "name": "api2.retry.backoff.policy"
        },
        {
          "name": "api2.retry.on.status.codes"
        },
        {
          "name": "api2.test.api"
        },
        {
          "name": "api2.test.api.http.request.body"
        },
        {
          "name": "api2.test.api.topic"
        },
        {
          "name": "api2.test.api.offset"
        },
        {
          "name": "api3.http.api.path"
        },
        {
          "name": "api3.http.request.headers"
        },
        {
          "name": "api3.http.request.sensitive.headers"
        },
        {
          "name": "api3.http.path.parameters"
        },
        {
          "name": "api3.http.connect.timeout.ms"
        },
        {
          "name": "api3.http.request.timeout.ms"
        },
        {
          "name": "api3.max.retries"
        },
        {
          "name": "api3.retry.backoff.ms"
        },
        {
          "name": "api3.retry.backoff.policy"
        },
        {
          "name": "api3.retry.on.status.codes"
        },
        {
          "name": "api3.test.api"
        },
        {
          "name": "api3.test.api.http.request.body"
        },
        {
          "name": "api3.test.api.topic"
        },
        {
          "name": "api3.test.api.offset"
        },
        {
          "name": "api4.http.api.path"
        },
        {
          "name": "api4.http.request.headers"
        },
        {
          "name": "api4.http.request.sensitive.headers"
        },
        {
          "name": "api4.http.path.parameters"
        },
        {
          "name": "api4.http.connect.timeout.ms"
        },
        {
          "name": "api4.http.request.timeout.ms"
        },
        {
          "name": "api4.max.retries"
        },
        {
          "name": "api4.retry.backoff.ms"
        },
        {
          "name": "api4.retry.backoff.policy"
        },
        {
          "name": "api4.retry.on.status.codes"
        },
        {
          "name": "api4.test.api"
        },
        {
          "name": "api4.test.api.http.request.body"
        },
        {
          "name": "api4.test.api.topic"
        },
        {
          "name": "api4.test.api.offset"
        },
        {
          "name": "api5.http.api.path"
        },
        {
          "name": "api5.http.request.headers"
        },
        {
          "name": "api5.http.request.sensitive.headers"
        },
        {
          "name": "api5.http.path.parameters"
        },
        {
          "name": "api5.http.connect.timeout.ms"
        },
        {
          "name": "api5.http.request.timeout.ms"
        },
        {
          "name": "api5.max.retries"
        },
        {
          "name": "api5.retry.backoff.ms"
        },
        {
          "name": "api5.retry.backoff.policy"
        },
        {
          "name": "api5.retry.on.status.codes"
        },
        {
          "name": "api5.test.api"
        },
        {
          "name": "api5.test.api.http.request.body"
        },
        {
          "name": "api5.test.api.topic"
        },
        {
          "name": "api5.test.api.offset"
        },
        {
          "name": "api6.http.api.path"
        },
        {
          "name": "api6.http.request.headers"
        },
        {
          "name": "api6.http.request.sensitive.headers"
        },
        {
          "name": "api6.http.path.parameters"
        },
        {
          "name": "api6.http.connect.timeout.ms"
        },
        {
          "name": "api6.http.request.timeout.ms"
        },
        {
          "name": "api6.max.retries"
        },
        {
          "name": "api6.retry.backoff.ms"
        },
        {
          "name": "api6.retry.backoff.policy"
        },
        {
          "name": "api6.retry.on.status.codes"
        },
        {
          "name": "api6.test.api"
        },
        {
          "name": "api6.test.api.http.request.body"
        },
        {
          "name": "api6.test.api.topic"
        },
        {
          "name": "api6.test.api.offset"
        },
        {
          "name": "api7.http.api.path"
        },
        {
          "name": "api7.http.request.headers"
        },
        {
          "name": "api7.http.request.sensitive.headers"
        },
        {
          "name": "api7.http.path.parameters"
        },
        {
          "name": "api7.http.connect.timeout.ms"
        },
        {
          "name": "api7.http.request.timeout.ms"
        },
        {
          "name": "api7.max.retries"
        },
        {
          "name": "api7.retry.backoff.ms"
        },
        {
          "name": "api7.retry.backoff.policy"
        },
        {
          "name": "api7.retry.on.status.codes"
        },
        {
          "name": "api7.test.api"
        },
        {
          "name": "api7.test.api.http.request.body"
        },
        {
          "name": "api7.test.api.topic"
        },
        {
          "name": "api7.test.api.offset"
        },
        {
          "name": "api8.http.api.path"
        },
        {
          "name": "api8.http.request.headers"
        },
        {
          "name": "api8.http.request.sensitive.headers"
        },
        {
          "name": "api8.http.path.parameters"
        },
        {
          "name": "api8.http.connect.timeout.ms"
        },
        {
          "name": "api8.http.request.timeout.ms"
        },
        {
          "name": "api8.max.retries"
        },
        {
          "name": "api8.retry.backoff.ms"
        },
        {
          "name": "api8.retry.backoff.policy"
        },
        {
          "name": "api8.retry.on.status.codes"
        },
        {
          "name": "api8.test.api"
        },
        {
          "name": "api8.test.api.http.request.body"
        },
        {
          "name": "api8.test.api.topic"
        },
        {
          "name": "api8.test.api.offset"
        },
        {
          "name": "api9.http.api.path"
        },
        {
          "name": "api9.http.request.headers"
        },
        {
          "name": "api9.http.request.sensitive.headers"
        },
        {
          "name": "api9.http.path.parameters"
        },
        {
          "name": "api9.http.connect.timeout.ms"
        },
        {
          "name": "api9.http.request.timeout.ms"
        },
        {
          "name": "api9.max.retries"
        },
        {
          "name": "api9.retry.backoff.ms"
        },
        {
          "name": "api9.retry.backoff.policy"
        },
        {
          "name": "api9.retry.on.status.codes"
        },
        {
          "name": "api9.test.api"
        },
        {
          "name": "api9.test.api.http.request.body"
        },
        {
          "name": "api9.test.api.topic"
        },
        {
          "name": "api9.test.api.offset"
        },
        {
          "name": "api10.http.api.path"
        },
        {
          "name": "api10.http.request.headers"
        },
        {
          "name": "api10.http.request.sensitive.headers"
        },
        {
          "name": "api10.http.path.parameters"
        },
        {
          "name": "api10.http.connect.timeout.ms"
        },
        {
          "name": "api10.http.request.timeout.ms"
        },
        {
          "name": "api10.max.retries"
        },
        {
          "name": "api10.retry.backoff.ms"
        },
        {
          "name": "api10.retry.backoff.policy"
        },
        {
          "name": "api10.retry.on.status.codes"
        },
        {
          "name": "api10.test.api"
        },
        {
          "name": "api10.test.api.http.request.body"
        },
        {
          "name": "api10.test.api.topic"
        },
        {
          "name": "api10.test.api.offset"
        },
        {
          "name": "api11.http.api.path"
        },
        {
          "name": "api11.http.request.headers"
        },
        {
          "name": "api11.http.request.sensitive.headers"
        },
        {
          "name": "api11.http.path.parameters"
        },
        {
          "name": "api11.http.connect.timeout.ms"
        },
        {
          "name": "api11.http.request.timeout.ms"
        },
        {
          "name": "api11.max.retries"
        },
        {
          "name": "api11.retry.backoff.ms"
        },
        {
          "name": "api11.retry.backoff.policy"
        },
        {
          "name": "api11.retry.on.status.codes"
        },
        {
          "name": "api11.test.api"
        },
        {
          "name": "api11.test.api.http.request.body"
        },
        {
          "name": "api11.test.api.topic"
        },
        {
          "name": "api11.test.api.offset"
        },
        {
          "name": "api12.http.api.path"
        },
        {
          "name": "api12.http.request.headers"
        },
        {
          "name": "api12.http.request.sensitive.headers"
        },
        {
          "name": "api12.http.path.parameters"
        },
        {
          "name": "api12.http.connect.timeout.ms"
        },
        {
          "name": "api12.http.request.timeout.ms"
        },
        {
          "name": "api12.max.retries"
        },
        {
          "name": "api12.retry.backoff.ms"
        },
        {
          "name": "api12.retry.backoff.policy"
        },
        {
          "name": "api12.retry.on.status.codes"
        },
        {
          "name": "api12.test.api"
        },
        {
          "name": "api12.test.api.http.request.body"
        },
        {
          "name": "api12.test.api.topic"
        },
        {
          "name": "api12.test.api.offset"
        },
        {
          "name": "api13.http.api.path"
        },
        {
          "name": "api13.http.request.headers"
        },
        {
          "name": "api13.http.request.sensitive.headers"
        },
        {
          "name": "api13.http.path.parameters"
        },
        {
          "name": "api13.http.connect.timeout.ms"
        },
        {
          "name": "api13.http.request.timeout.ms"
        },
        {
          "name": "api13.max.retries"
        },
        {
          "name": "api13.retry.backoff.ms"
        },
        {
          "name": "api13.retry.backoff.policy"
        },
        {
          "name": "api13.retry.on.status.codes"
        },
        {
          "name": "api13.test.api"
        },
        {
          "name": "api13.test.api.http.request.body"
        },
        {
          "name": "api13.test.api.topic"
        },
        {
          "name": "api13.test.api.offset"
        },
        {
          "name": "api14.http.api.path"
        },
        {
          "name": "api14.http.request.headers"
        },
        {
          "name": "api14.http.request.sensitive.headers"
        },
        {
          "name": "api14.http.path.parameters"
        },
        {
          "name": "api14.http.connect.timeout.ms"
        },
        {
          "name": "api14.http.request.timeout.ms"
        },
        {
          "name": "api14.max.retries"
        },
        {
          "name": "api14.retry.backoff.ms"
        },
        {
          "name": "api14.retry.backoff.policy"
        },
        {
          "name": "api14.retry.on.status.codes"
        },
        {
          "name": "api14.test.api"
        },
        {
          "name": "api14.test.api.http.request.body"
        },
        {
          "name": "api14.test.api.topic"
        },
        {
          "name": "api14.test.api.offset"
        },
        {
          "name": "api15.http.api.path"
        },
        {
          "name": "api15.http.request.headers"
        },
        {
          "name": "api15.http.request.sensitive.headers"
        },
        {
          "name": "api15.http.path.parameters"
        },
        {
          "name": "api15.http.connect.timeout.ms"
        },
        {
          "name": "api15.http.request.timeout.ms"
        },
        {
          "name": "api15.max.retries"
        },
        {
          "name": "api15.retry.backoff.ms"
        },
        {
          "name": "api15.retry.backoff.policy"
        },
        {
          "name": "api15.retry.on.status.codes"
        },
        {
          "name": "api15.test.api"
        },
        {
          "name": "api15.test.api.http.request.body"
        },
        {
          "name": "api15.test.api.topic"
        },
        {
          "name": "api15.test.api.offset"
        }
      ]
    },
    {
      "template_id": "super",
      "abstract": true,
      "config_defs": [
        {
          "name": "auto.restart.on.user.error",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "group": "Auto-restart policy",
          "order_in_group": 1,
          "display_name": "Enable Connector Auto-restart",
          "documentation": "Enable connector to automatically restart on user-actionable errors.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "group_name": "Auto-restart policy"
          }
        },
        {
          "name": "value.converter.enhanced.avro.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information and Enums. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.avro.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.connect.meta.data",
          "type": "BOOLEAN",
          "documentation": "Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.connect.meta.data",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.protobuf.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.index.for.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to generate an index suffix for unions. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.index.for.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.int.for.enums",
          "type": "BOOLEAN",
          "documentation": "Whether to represent enums as integers. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.int.for.enums",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should be specified with an optional label. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.struct.for.nulls",
          "type": "BOOLEAN",
          "documentation": "Whether to generate a struct variable for null values. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.struct.for.nulls",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should use primitive wrapper messages. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives",
          "type": "BOOLEAN",
          "documentation": "Whether a wrapper message should be interpreted as a raw primitive at root level. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.raw.primitives",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.object.additional.properties",
          "type": "BOOLEAN",
          "documentation": "Whether to allow additional properties for object schemas. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.object.additional.properties",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.optional.for.nonrequired",
          "type": "BOOLEAN",
          "documentation": "Whether to set non-required properties to be optional. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.optional.for.nonrequired",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.decimal.format",
          "type": "STRING",
          "recommended_values": [
            "BASE64",
            "NUMERIC"
          ],
          "documentation": "Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:\nBASE64 to serialize DECIMAL logical types as base64 encoded binary data and\nNUMERIC to serialize Connect DECIMAL logical type values in JSON/JSON_SR as a number representing the decimal value.",
          "group": "Additional Configs",
          "alias": "json.output.decimal.format",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.decimal.format",
          "default_value": "BASE64",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.auto.register.schemas",
          "type": "BOOLEAN",
          "documentation": "Specify if the Serializer should attempt to register the Schema.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.auto.register.schemas",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "type": "BOOLEAN",
          "documentation": "Use latest version of schema in subject for serialization when auto.register.schemas is false.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.latest.version",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict",
          "type": "BOOLEAN",
          "documentation": "Verify latest subject version is backward compatible when `use.latest.version` is `true`.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.latest.compatibility.strict",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "type": "STRING",
          "default_value": "TopicNameStrategy",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "alias": "key.subject.name.strategy",
          "documentation": "How to construct the subject name for key schema registration.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "key.converter.key.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "default_value": "TopicNameStrategy",
          "alias": "subject.name.strategy,value.subject.name.strategy",
          "documentation": "Determines how to construct the subject name under which the value schema is registered with Schema Registry.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.value.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "DefaultReferenceSubjectNameStrategy",
            "QualifiedReferenceSubjectNameStrategy"
          ],
          "default_value": "DefaultReferenceSubjectNameStrategy",
          "documentation": "Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.reference.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys",
          "type": "BOOLEAN",
          "documentation": "Allow optional string map key when converting from Connect Schema to Avro Schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.allow.optional.map.keys",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.singleton.unions",
          "type": "BOOLEAN",
          "default_value": "false",
          "documentation": "Whether to flatten singleton unions. Applicable for Avro and JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.singleton.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.proto2",
          "type": "BOOLEAN",
          "documentation": "Whether proto2 optionals are supported. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.proto2",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to flatten unions (oneofs). Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "header.converter",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "header.converter",
          "documentation": "The converter class for the headers. This is used to serialize and deserialize the headers of the messages.",
          "recommended_values": [
            "org.apache.kafka.connect.storage.SimpleHeaderConverter",
            "org.apache.kafka.connect.storage.StringConverter",
            "org.apache.kafka.connect.json.JsonConverter",
            "org.apache.kafka.connect.converters.BooleanConverter",
            "org.apache.kafka.connect.converters.DoubleConverter",
            "org.apache.kafka.connect.converters.FloatConverter",
            "org.apache.kafka.connect.converters.IntegerConverter",
            "org.apache.kafka.connect.converters.LongConverter",
            "org.apache.kafka.connect.converters.ShortConverter"
          ],
          "metadata": {
            "group_name": "Additional Configs",
            "page": "CONFIGURATION",
            "advanced": true
          }
        }
      ],
      "connector_configs": [
        {
          "name": "auto.restart.on.user.error"
        },
        {
          "name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "dynamic.mapper": {
            "name": "value.converter.auto.register.schemas.mapper"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "dynamic.mapper": {
            "name": "value.converter.use.latest.version.mapper"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.reference.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter"
        }
      ]
    }
  ],
  "all_config_def_names": [
    "api1.http.api.path",
    "api1.http.connect.timeout.ms",
    "api1.http.path.parameters",
    "api1.http.path.parameters.separator",
    "api1.http.request.headers",
    "api1.http.request.headers.separator",
    "api1.http.request.parameters.separator",
    "api1.http.request.sensitive.headers",
    "api1.http.request.timeout.ms",
    "api1.max.retries",
    "api1.retry.backoff.ms",
    "api1.retry.backoff.policy",
    "api1.retry.on.status.codes",
    "api1.test.api",
    "api10.http.api.path",
    "api10.http.connect.timeout.ms",
    "api10.http.path.parameters",
    "api10.http.path.parameters.separator",
    "api10.http.request.headers",
    "api10.http.request.headers.separator",
    "api10.http.request.parameters.separator",
    "api10.http.request.sensitive.headers",
    "api10.http.request.timeout.ms",
    "api10.max.retries",
    "api10.retry.backoff.ms",
    "api10.retry.backoff.policy",
    "api10.retry.on.status.codes",
    "api10.test.api",
    "api11.http.api.path",
    "api11.http.connect.timeout.ms",
    "api11.http.path.parameters",
    "api11.http.path.parameters.separator",
    "api11.http.request.headers",
    "api11.http.request.headers.separator",
    "api11.http.request.parameters.separator",
    "api11.http.request.sensitive.headers",
    "api11.http.request.timeout.ms",
    "api11.max.retries",
    "api11.retry.backoff.ms",
    "api11.retry.backoff.policy",
    "api11.retry.on.status.codes",
    "api11.test.api",
    "api12.http.api.path",
    "api12.http.connect.timeout.ms",
    "api12.http.path.parameters",
    "api12.http.path.parameters.separator",
    "api12.http.request.headers",
    "api12.http.request.headers.separator",
    "api12.http.request.parameters.separator",
    "api12.http.request.sensitive.headers",
    "api12.http.request.timeout.ms",
    "api12.max.retries",
    "api12.retry.backoff.ms",
    "api12.retry.backoff.policy",
    "api12.retry.on.status.codes",
    "api12.test.api",
    "api13.http.api.path",
    "api13.http.connect.timeout.ms",
    "api13.http.path.parameters",
    "api13.http.path.parameters.separator",
    "api13.http.request.headers",
    "api13.http.request.headers.separator",
    "api13.http.request.parameters.separator",
    "api13.http.request.sensitive.headers",
    "api13.http.request.timeout.ms",
    "api13.max.retries",
    "api13.retry.backoff.ms",
    "api13.retry.backoff.policy",
    "api13.retry.on.status.codes",
    "api13.test.api",
    "api14.http.api.path",
    "api14.http.connect.timeout.ms",
    "api14.http.path.parameters",
    "api14.http.path.parameters.separator",
    "api14.http.request.headers",
    "api14.http.request.headers.separator",
    "api14.http.request.parameters.separator",
    "api14.http.request.sensitive.headers",
    "api14.http.request.timeout.ms",
    "api14.max.retries",
    "api14.retry.backoff.ms",
    "api14.retry.backoff.policy",
    "api14.retry.on.status.codes",
    "api14.test.api",
    "api15.http.api.path",
    "api15.http.connect.timeout.ms",
    "api15.http.path.parameters",
    "api15.http.path.parameters.separator",
    "api15.http.request.headers",
    "api15.http.request.headers.separator",
    "api15.http.request.parameters.separator",
    "api15.http.request.sensitive.headers",
    "api15.http.request.timeout.ms",
    "api15.max.retries",
    "api15.retry.backoff.ms",
    "api15.retry.backoff.policy",
    "api15.retry.on.status.codes",
    "api15.test.api",
    "api2.http.api.path",
    "api2.http.connect.timeout.ms",
    "api2.http.path.parameters",
    "api2.http.path.parameters.separator",
    "api2.http.request.headers",
    "api2.http.request.headers.separator",
    "api2.http.request.parameters.separator",
    "api2.http.request.sensitive.headers",
    "api2.http.request.timeout.ms",
    "api2.max.retries",
    "api2.retry.backoff.ms",
    "api2.retry.backoff.policy",
    "api2.retry.on.status.codes",
    "api2.test.api",
    "api3.http.api.path",
    "api3.http.connect.timeout.ms",
    "api3.http.path.parameters",
    "api3.http.path.parameters.separator",
    "api3.http.request.headers",
    "api3.http.request.headers.separator",
    "api3.http.request.parameters.separator",
    "api3.http.request.sensitive.headers",
    "api3.http.request.timeout.ms",
    "api3.max.retries",
    "api3.retry.backoff.ms",
    "api3.retry.backoff.policy",
    "api3.retry.on.status.codes",
    "api3.test.api",
    "api4.http.api.path",
    "api4.http.connect.timeout.ms",
    "api4.http.path.parameters",
    "api4.http.path.parameters.separator",
    "api4.http.request.headers",
    "api4.http.request.headers.separator",
    "api4.http.request.parameters.separator",
    "api4.http.request.sensitive.headers",
    "api4.http.request.timeout.ms",
    "api4.max.retries",
    "api4.retry.backoff.ms",
    "api4.retry.backoff.policy",
    "api4.retry.on.status.codes",
    "api4.test.api",
    "api5.http.api.path",
    "api5.http.connect.timeout.ms",
    "api5.http.path.parameters",
    "api5.http.path.parameters.separator",
    "api5.http.request.headers",
    "api5.http.request.headers.separator",
    "api5.http.request.parameters.separator",
    "api5.http.request.sensitive.headers",
    "api5.http.request.timeout.ms",
    "api5.max.retries",
    "api5.retry.backoff.ms",
    "api5.retry.backoff.policy",
    "api5.retry.on.status.codes",
    "api5.test.api",
    "api6.http.api.path",
    "api6.http.connect.timeout.ms",
    "api6.http.path.parameters",
    "api6.http.path.parameters.separator",
    "api6.http.request.headers",
    "api6.http.request.headers.separator",
    "api6.http.request.parameters.separator",
    "api6.http.request.sensitive.headers",
    "api6.http.request.timeout.ms",
    "api6.max.retries",
    "api6.retry.backoff.ms",
    "api6.retry.backoff.policy",
    "api6.retry.on.status.codes",
    "api6.test.api",
    "api7.http.api.path",
    "api7.http.connect.timeout.ms",
    "api7.http.path.parameters",
    "api7.http.path.parameters.separator",
    "api7.http.request.headers",
    "api7.http.request.headers.separator",
    "api7.http.request.parameters.separator",
    "api7.http.request.sensitive.headers",
    "api7.http.request.timeout.ms",
    "api7.max.retries",
    "api7.retry.backoff.ms",
    "api7.retry.backoff.policy",
    "api7.retry.on.status.codes",
    "api7.test.api",
    "api8.http.api.path",
    "api8.http.connect.timeout.ms",
    "api8.http.path.parameters",
    "api8.http.path.parameters.separator",
    "api8.http.request.headers",
    "api8.http.request.headers.separator",
    "api8.http.request.parameters.separator",
    "api8.http.request.sensitive.headers",
    "api8.http.request.timeout.ms",
    "api8.max.retries",
    "api8.retry.backoff.ms",
    "api8.retry.backoff.policy",
    "api8.retry.on.status.codes",
    "api8.test.api",
    "api9.http.api.path",
    "api9.http.connect.timeout.ms",
    "api9.http.path.parameters",
    "api9.http.path.parameters.separator",
    "api9.http.request.headers",
    "api9.http.request.headers.separator",
    "api9.http.request.parameters.separator",
    "api9.http.request.sensitive.headers",
    "api9.http.request.timeout.ms",
    "api9.max.retries",
    "api9.retry.backoff.ms",
    "api9.retry.backoff.policy",
    "api9.retry.on.status.codes",
    "api9.test.api",
    "apis.num",
    "auth.type",
    "bearer.token",
    "behavior.on.error",
    "connection.password",
    "connection.user",
    "gcp.credentials.json",
    "http.api.base.url",
    "https.ssl.enabled",
    "https.ssl.key.password",
    "https.ssl.keystore.password",
    "https.ssl.keystorefile",
    "https.ssl.protocol",
    "https.ssl.truststore.password",
    "https.ssl.truststorefile",
    "oauth.config.map",
    "oauth2.auth.button",
    "oauth2.auth.endpoint",
    "oauth2.client.auth.mode",
    "oauth2.client.header.separator",
    "oauth2.client.headers",
    "oauth2.client.id",
    "oauth2.client.scope",
    "oauth2.client.secret",
    "oauth2.flow.type",
    "oauth2.jwt.claimset",
    "oauth2.jwt.enabled",
    "oauth2.jwt.keystore.password",
    "oauth2.jwt.keystore.path",
    "oauth2.jwt.keystore.type",
    "oauth2.query.params",
    "oauth2.refresh.token",
    "oauth2.session.id",
    "oauth2.token.property",
    "oauth2.token.url"
  ],
  "all_connector_configs": [
    {
      "name": "oauth2.refresh.token",
      "value": "${file:/mnt/secrets/connect-external-secrets-{{.logicalClusterId}}.properties:oauth2.refresh.token}"
    },
    {
      "name": "https.ssl.keystore.location",
      "value": "${https.ssl.keystorefile}"
    },
    {
      "name": "https.ssl.truststore.location",
      "value": "${https.ssl.truststorefile}"
    },
    {
      "name": "connector.endpoint",
      "value": "${http.api.base.url}"
    },
    {
      "name": "reporter.error.topic.name",
      "value": "error-${connector}"
    }
  ],
  "config_defs_not_used_as_connector_names": [
    "api1.http.path.parameters.separator",
    "api1.http.request.headers.separator",
    "api1.http.request.parameters.separator",
    "api10.http.path.parameters.separator",
    "api10.http.request.headers.separator",
    "api10.http.request.parameters.separator",
    "api11.http.path.parameters.separator",
    "api11.http.request.headers.separator",
    "api11.http.request.parameters.separator",
    "api12.http.path.parameters.separator",
    "api12.http.request.headers.separator",
    "api12.http.request.parameters.separator",
    "api13.http.path.parameters.separator",
    "api13.http.request.headers.separator",
    "api13.http.request.parameters.separator",
    "api14.http.path.parameters.separator",
    "api14.http.request.headers.separator",
    "api14.http.request.parameters.separator",
    "api15.http.path.parameters.separator",
    "api15.http.request.headers.separator",
    "api15.http.request.parameters.separator",
    "api2.http.path.parameters.separator",
    "api2.http.request.headers.separator",
    "api2.http.request.parameters.separator",
    "api3.http.path.parameters.separator",
    "api3.http.request.headers.separator",
    "api3.http.request.parameters.separator",
    "api4.http.path.parameters.separator",
    "api4.http.request.headers.separator",
    "api4.http.request.parameters.separator",
    "api5.http.path.parameters.separator",
    "api5.http.request.headers.separator",
    "api5.http.request.parameters.separator",
    "api6.http.path.parameters.separator",
    "api6.http.request.headers.separator",
    "api6.http.request.parameters.separator",
    "api7.http.path.parameters.separator",
    "api7.http.request.headers.separator",
    "api7.http.request.parameters.separator",
    "api8.http.path.parameters.separator",
    "api8.http.request.headers.separator",
    "api8.http.request.parameters.separator",
    "api9.http.path.parameters.separator",
    "api9.http.request.headers.separator",
    "api9.http.request.parameters.separator",
    "gcp.credentials.json",
    "https.ssl.keystorefile",
    "https.ssl.truststorefile",
    "oauth.config.map",
    "oauth2.auth.button",
    "oauth2.auth.endpoint",
    "oauth2.query.params",
    "oauth2.session.id"
  ]
}