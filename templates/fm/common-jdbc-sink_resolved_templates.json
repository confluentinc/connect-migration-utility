{
  "templates": [
    {
      "template_id": "common-jdbc-sink",
      "abstract": true,
      "config_defs": [
        {
          "name": "connection.host",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your database?",
          "order_in_group": 1,
          "display_name": "Connection host",
          "documentation": "Depending on the service environment, certain network access limitations may exist. Make sure the connector can reach your service. Do not include jdbc:xxxx:// in the connection hostname property (e.g. database-1.abc234ec2.us-west.rds.amazonaws.com).",
          "validators": [
            {
              "name": "jdbc.connection.host",
              "priority": "HIGHEST"
            },
            {
              "name": "jdbc.connection",
              "arguments": {}
            }
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 1
          }
        },
        {
          "name": "connection.port",
          "type": "INT",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your database?",
          "order_in_group": 2,
          "display_name": "Connection port",
          "documentation": "JDBC connection port.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 0,
                "max": 65535
              }
            }
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 2
          }
        },
        {
          "name": "connection.user",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your database?",
          "order_in_group": 3,
          "display_name": "Connection user",
          "documentation": "JDBC connection user.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 3
          }
        },
        {
          "name": "connection.password",
          "type": "PASSWORD",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your database?",
          "order_in_group": 4,
          "display_name": "Connection password",
          "documentation": "JDBC connection password.",
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 4
          }
        },
        {
          "name": "db.name",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your database?",
          "order_in_group": 5,
          "display_name": "Database name",
          "documentation": "JDBC database name.",
          "validators": [
            {
              "name": "jdbc.connection.database"
            }
          ],
          "metadata": {
            "page": "AUTHENTICATION",
            "order_in_page": 5
          }
        },
        {
          "name": "insert.mode",
          "type": "STRING",
          "required": true,
          "default_value": "INSERT",
          "importance": "HIGH",
          "group": "Database details",
          "order_in_group": 1,
          "display_name": "Insert mode",
          "documentation": "The insertion mode to use. `INSERT` uses the standard INSERT row function. An error occurs if the row already exists in the table; `UPSERT` mode is similar to INSERT. However, if the row already exists, the `UPSERT` function overwrites column values with the new values provided.",
          "recommended_values": [
            "INSERT",
            "UPSERT"
          ],
          "validators": [
            {
              "name": "jdbc.upsert.key"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 2
          }
        },
        {
          "name": "table.name.format",
          "type": "STRING",
          "required": false,
          "default_value": "${topic}",
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 3,
          "display_name": "Table name format",
          "documentation": "A format string for the destination table name, which may contain ${topic} as a placeholder for the originating topic name.\nFor example, kafka_${topic} for the topic \u2018orders\u2019 will map to the table name \u2018kafka_orders\u2019.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 6,
            "advanced": true
          }
        },
        {
          "name": "table.types",
          "type": "LIST",
          "required": false,
          "default_value": "TABLE",
          "importance": "LOW",
          "group": "Database details",
          "order_in_group": 4,
          "display_name": "Table types",
          "documentation": "The comma-separated types of database tables to which the sink connector can write. By default this is ``TABLE``, but any combination of ``TABLE`` and ``VIEW`` is allowed. Not all databases support writing to views, and when they do the sink connector will fail if the view definition does not match the records' schemas (regardless of ``auto.evolve``).",
          "sanitizers": [
            {
              "name": "trim.list"
            }
          ],
          "recommended_values": [
            "TABLE",
            "VIEW"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 9,
            "advanced": true
          }
        },
        {
          "name": "fields.whitelist",
          "type": "LIST",
          "required": false,
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 5,
          "display_name": "Fields included",
          "documentation": "List of comma-separated record value field names. If empty, all fields from the record value are utilized, otherwise used to filter to the desired fields.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 10,
            "advanced": true
          }
        },
        {
          "name": "pk.mode",
          "type": "STRING",
          "importance": "HIGH",
          "group": "Primary Key",
          "order_in_group": 1,
          "display_name": "PK mode",
          "documentation": "The primary key mode, also refer to pk.fields documentation for interplay. Supported modes are:\nnone: No keys utilized.\nkafka: Apache Kafka\u00ae coordinates are used as the PK.\nrecord_value: Field(s) from the record value are used, which must be a struct.\nrecord_key: Field(s) from the record key are used, which must be a struct.",
          "recommended_values": [
            "none",
            "kafka",
            "record_key",
            "record_value"
          ],
          "validators": [
            {
              "name": "common.is.recommended.value"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 11,
            "advanced": true
          }
        },
        {
          "name": "pk.fields",
          "type": "LIST",
          "importance": "HIGH",
          "group": "Primary Key",
          "order_in_group": 2,
          "display_name": "PK Fields",
          "documentation": "List of comma-separated primary key field names. The runtime interpretation of this config depends on the pk.mode:\nnone: Ignored as no fields are used as primary key in this mode.\nkafka: Must be a trio representing the Kafka coordinates, defaults to __connect_topic,__connect_partition,__connect_offset if empty.\nrecord_value: If empty, all fields from the value struct will be used, otherwise used to extract the desired fields.\n",
          "sanitizers": [
            {
              "name": "trim.list"
            }
          ],
          "validators": [
            {
              "name": "jdbc.pk.fields"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 12,
            "advanced": true
          }
        },
        {
          "name": "auto.create",
          "type": "STRING",
          "required": true,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "SQL/DDL Support",
          "order_in_group": 1,
          "display_name": "Auto create table",
          "documentation": "Whether to automatically create the destination table if it is missing.",
          "recommended_values": [
            "true",
            "false"
          ],
          "validators": [
            {
              "name": "jdbc.auto.create"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 3,
            "advanced": true
          }
        },
        {
          "name": "auto.evolve",
          "type": "STRING",
          "required": true,
          "default_value": "false",
          "importance": "MEDIUM",
          "group": "SQL/DDL Support",
          "order_in_group": 2,
          "display_name": "Auto add columns",
          "documentation": "Whether to automatically add columns in the table if they are missing.",
          "recommended_values": [
            "true",
            "false"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 4,
            "advanced": true
          }
        },
        {
          "name": "quote.sql.identifiers",
          "type": "STRING",
          "required": false,
          "default_value": "ALWAYS",
          "importance": "MEDIUM",
          "group": "SQL/DDL Support",
          "order_in_group": 3,
          "display_name": "When to quote SQL identifiers",
          "documentation": "When to quote table names, column names, and other identifiers in SQL statements. For backward compatibility, the default is \u2018always\u2019.",
          "recommended_values": [
            "ALWAYS",
            "NEVER"
          ],
          "validators": [
            {
              "name": "common.is.recommended.value"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 13,
            "advanced": true
          }
        },
        {
          "name": "db.timezone",
          "type": "STRING",
          "required": true,
          "default_value": "UTC",
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 7,
          "display_name": "Database timezone",
          "documentation": "Name of the JDBC timezone used in the connector when querying with time-based criteria. Defaults to UTC.",
          "recommender": {
            "name": "timezone"
          },
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 5,
            "advanced": true
          }
        },
        {
          "name": "date.timezone",
          "type": "STRING",
          "required": true,
          "default_value": "DB_TIMEZONE",
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 8,
          "display_name": "Timezone used for Date",
          "documentation": "Name of the JDBC timezone that should be used in the connector when inserting DATE type values. Defaults to DB_TIMEZONE that uses the timezone set for db.timzeone configuration (to maintain backward compatibility). It is recommended to set this to UTC to avoid conversion for DATE type values.",
          "recommended_values": [
            "DB_TIMEZONE",
            "UTC"
          ],
          "validators": [
            {
              "name": "common.is.recommended.value"
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 6,
            "advanced": true
          }
        },
        {
          "name": "timestamp.precision.mode",
          "type": "STRING",
          "required": true,
          "default_value": "microseconds",
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 8,
          "display_name": "Timestamp Precision Mode",
          "documentation": "Convert the Timestamp with precision. If set to microseconds the timestamp will be converted to microsecond precision. If set to nanoseconds the timestamp will be converted to nanoseconds precision.",
          "recommended_values": [
            "microseconds",
            "nanoseconds"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 7,
            "advanced": true
          }
        },
        {
          "name": "timestamp.fields.list",
          "type": "LIST",
          "required": false,
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 5,
          "display_name": "Timestamp Fields",
          "documentation": "List of comma-separated record value timestamp field names that should be converted to timestamps. These fields will be converted based on precision mode specified in Timestamp Precision Mode. The timestamp fields included here should be Long or String type and nested fields are not supported.",
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 8,
            "advanced": true
          }
        },
        {
          "name": "batch.sizes",
          "type": "INT",
          "default_value": "3000",
          "importance": "LOW",
          "group": "Connection details",
          "order_in_group": 2,
          "display_name": "Max rows per batch",
          "documentation": "Maximum number of rows to include in a single batch when polling for new data. This setting can be used to limit the amount of data buffered internally in the connector.",
          "validators": [
            {
              "name": "common.range",
              "arguments": {
                "min": 1,
                "max": 5000
              }
            }
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 14,
            "advanced": true
          }
        },
        {
          "name": "input.data.format",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "Input messages",
          "order_in_group": 1,
          "display_name": "Input Kafka record value format",
          "documentation": "Sets the input Kafka record value format. Valid entries are AVRO, JSON_SR, or PROTOBUF. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.",
          "recommended_values": [
            "AVRO",
            "JSON_SR",
            "PROTOBUF"
          ],
          "validators": [
            {
              "name": "sr.integration"
            }
          ],
          "dependents": [
            "schema.registry.url"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 1
          }
        },
        {
          "name": "input.key.format",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Input messages",
          "order_in_group": 2,
          "display_name": "Input Kafka record key format",
          "documentation": "Sets the input Kafka record key format. This need to be set to a proper format if using pk.mode=record_key. Valid entries are AVRO, JSON_SR, PROTOBUF, STRING. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.",
          "recommended_values": [
            "AVRO",
            "JSON_SR",
            "PROTOBUF",
            "STRING"
          ],
          "validators": [
            {
              "name": "sr.integration"
            },
            {
              "name": "common.conditional.required",
              "arguments": {
                "condition": "pk.mode==record_key"
              },
              "priority": "HIGHEST"
            }
          ],
          "dependents": [
            "schema.registry.url"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 15,
            "advanced": true
          }
        },
        {
          "name": "delete.enabled",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Input messages",
          "order_in_group": 3,
          "display_name": "Delete on null",
          "documentation": "Whether to treat null record values as deletes. Requires pk.mode to be record_key.",
          "recommended_values": [
            "true",
            "false"
          ],
          "metadata": {
            "page": "CONFIGURATION",
            "order_in_page": 16,
            "advanced": true
          }
        }
      ],
      "connector_configs": [
        {
          "name": "connection.attempts",
          "value": "1"
        },
        {
          "name": "connection.backoff.ms",
          "value": "1000"
        },
        {
          "name": "max.retries",
          "value": "0"
        },
        {
          "name": "connection.user"
        },
        {
          "name": "connection.password"
        },
        {
          "name": "insert.mode"
        },
        {
          "name": "table.name.format"
        },
        {
          "name": "table.types"
        },
        {
          "name": "fields.whitelist"
        },
        {
          "name": "pk.mode"
        },
        {
          "name": "pk.fields"
        },
        {
          "name": "auto.create"
        },
        {
          "name": "auto.evolve"
        },
        {
          "name": "quote.sql.identifiers"
        },
        {
          "name": "batch.size"
        },
        {
          "name": "db.timezone"
        },
        {
          "name": "date.timezone"
        },
        {
          "name": "timestamp.precision.mode"
        },
        {
          "name": "timestamp.fields.list"
        },
        {
          "name": "trim.sensitive.log",
          "value": "false"
        },
        {
          "name": "value.converter",
          "switch": {
            "input.data.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter"
            }
          }
        },
        {
          "name": "value.converter.schema.registry.url",
          "switch": {
            "input.data.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.credentials.source",
          "switch": {
            "input.data.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.user.info",
          "switch": {
            "input.data.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "key.converter",
          "switch": {
            "input.key.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter",
              "STRING": "org.apache.kafka.connect.storage.StringConverter",
              "DEFAULT": "org.apache.kafka.connect.converters.ByteArrayConverter"
            }
          }
        },
        {
          "name": "key.converter.schema.registry.url",
          "switch": {
            "input.key.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}",
              "STRING": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "key.converter.basic.auth.credentials.source",
          "switch": {
            "input.key.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO",
              "STRING": "USER_INFO"
            }
          }
        },
        {
          "name": "key.converter.basic.auth.user.info",
          "switch": {
            "input.key.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "STRING": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "delete.enabled"
        }
      ]
    },
    {
      "template_id": "super",
      "abstract": true,
      "config_defs": [
        {
          "name": "auto.restart.on.user.error",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "group": "Auto-restart policy",
          "order_in_group": 1,
          "display_name": "Enable Connector Auto-restart",
          "documentation": "Enable connector to automatically restart on user-actionable errors.",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": true,
            "group_name": "Auto-restart policy"
          }
        },
        {
          "name": "value.converter.enhanced.avro.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information and Enums. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.avro.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.connect.meta.data",
          "type": "BOOLEAN",
          "documentation": "Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.connect.meta.data",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.protobuf.schema.support",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.index.for.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to generate an index suffix for unions. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.index.for.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.int.for.enums",
          "type": "BOOLEAN",
          "documentation": "Whether to represent enums as integers. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.int.for.enums",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should be specified with an optional label. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.generate.struct.for.nulls",
          "type": "BOOLEAN",
          "documentation": "Whether to generate a struct variable for null values. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.struct.for.nulls",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should use primitive wrapper messages. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.nullables",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives",
          "type": "BOOLEAN",
          "documentation": "Whether a wrapper message should be interpreted as a raw primitive at root level. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.raw.primitives",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.object.additional.properties",
          "type": "BOOLEAN",
          "documentation": "Whether to allow additional properties for object schemas. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.object.additional.properties",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.optional.for.nonrequired",
          "type": "BOOLEAN",
          "documentation": "Whether to set non-required properties to be optional. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.optional.for.nonrequired",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.decimal.format",
          "type": "STRING",
          "recommended_values": [
            "BASE64",
            "NUMERIC"
          ],
          "documentation": "Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:\nBASE64 to serialize DECIMAL logical types as base64 encoded binary data and\nNUMERIC to serialize Connect DECIMAL logical type values in JSON/JSON_SR as a number representing the decimal value.",
          "group": "Additional Configs",
          "alias": "json.output.decimal.format",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.decimal.format",
          "default_value": "BASE64",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.auto.register.schemas",
          "type": "BOOLEAN",
          "documentation": "Specify if the Serializer should attempt to register the Schema.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.auto.register.schemas",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "type": "BOOLEAN",
          "documentation": "Use latest version of schema in subject for serialization when auto.register.schemas is false.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.latest.version",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict",
          "type": "BOOLEAN",
          "documentation": "Verify latest subject version is backward compatible when `use.latest.version` is `true`.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.latest.compatibility.strict",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "type": "STRING",
          "default_value": "TopicNameStrategy",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "alias": "key.subject.name.strategy",
          "documentation": "How to construct the subject name for key schema registration.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "key.converter.key.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "default_value": "TopicNameStrategy",
          "alias": "subject.name.strategy,value.subject.name.strategy",
          "documentation": "Determines how to construct the subject name under which the value schema is registered with Schema Registry.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.value.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "DefaultReferenceSubjectNameStrategy",
            "QualifiedReferenceSubjectNameStrategy"
          ],
          "default_value": "DefaultReferenceSubjectNameStrategy",
          "documentation": "Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.reference.subject.name.strategy",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs",
            "additional.visible": "true"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys",
          "type": "BOOLEAN",
          "documentation": "Allow optional string map key when converting from Connect Schema to Avro Schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.allow.optional.map.keys",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.singleton.unions",
          "type": "BOOLEAN",
          "default_value": "false",
          "documentation": "Whether to flatten singleton unions. Applicable for Avro and JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.singleton.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.optional.for.proto2",
          "type": "BOOLEAN",
          "documentation": "Whether proto2 optionals are supported. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.proto2",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "value.converter.flatten.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to flatten unions (oneofs). Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.unions",
          "metadata": {
            "page": "CONFIGURATION",
            "advanced": "true",
            "group_name": "Additional Configs"
          }
        },
        {
          "name": "header.converter",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "header.converter",
          "documentation": "The converter class for the headers. This is used to serialize and deserialize the headers of the messages.",
          "recommended_values": [
            "org.apache.kafka.connect.storage.SimpleHeaderConverter",
            "org.apache.kafka.connect.storage.StringConverter",
            "org.apache.kafka.connect.json.JsonConverter",
            "org.apache.kafka.connect.converters.BooleanConverter",
            "org.apache.kafka.connect.converters.DoubleConverter",
            "org.apache.kafka.connect.converters.FloatConverter",
            "org.apache.kafka.connect.converters.IntegerConverter",
            "org.apache.kafka.connect.converters.LongConverter",
            "org.apache.kafka.connect.converters.ShortConverter"
          ],
          "metadata": {
            "group_name": "Additional Configs",
            "page": "CONFIGURATION",
            "advanced": true
          }
        }
      ],
      "connector_configs": [
        {
          "name": "auto.restart.on.user.error"
        },
        {
          "name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "dynamic.mapper": {
            "name": "value.converter.auto.register.schemas.mapper"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "dynamic.mapper": {
            "name": "value.converter.use.latest.version.mapper"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.reference.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter"
        }
      ]
    }
  ],
  "all_config_def_names": [
    "auto.create",
    "auto.evolve",
    "batch.sizes",
    "connection.host",
    "connection.password",
    "connection.port",
    "connection.user",
    "date.timezone",
    "db.name",
    "db.timezone",
    "delete.enabled",
    "fields.whitelist",
    "input.data.format",
    "input.key.format",
    "insert.mode",
    "pk.fields",
    "pk.mode",
    "quote.sql.identifiers",
    "table.name.format",
    "table.types",
    "timestamp.fields.list",
    "timestamp.precision.mode"
  ],
  "all_connector_configs": [
    {
      "name": "value.converter.schema.registry.url",
      "switch": {
        "input.data.format": {
          "AVRO": "${schema.registry.url}",
          "JSON_SR": "${schema.registry.url}",
          "PROTOBUF": "${schema.registry.url}"
        }
      }
    },
    {
      "name": "value.converter.basic.auth.user.info",
      "switch": {
        "input.data.format": {
          "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
        }
      }
    },
    {
      "name": "key.converter.schema.registry.url",
      "switch": {
        "input.key.format": {
          "AVRO": "${schema.registry.url}",
          "JSON_SR": "${schema.registry.url}",
          "PROTOBUF": "${schema.registry.url}",
          "STRING": "${schema.registry.url}"
        }
      }
    },
    {
      "name": "key.converter.basic.auth.user.info",
      "switch": {
        "input.key.format": {
          "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
          "STRING": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
        }
      }
    }
  ],
  "config_defs_not_used_as_connector_names": [
    "batch.sizes",
    "connection.host",
    "connection.port",
    "db.name",
    "input.data.format",
    "input.key.format"
  ]
}