{
  "templates": [
    {
      "template_id": "MongoDbAtlasSink",
      "connector_type": "SINK",
      "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
      "config_defs": [
        {
          "name": "input.data.format",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "Input messages",
          "order_in_group": 1,
          "display_name": "Input Kafka record value format",
          "documentation": "Sets the input Kafka record value format. Valid entries are AVRO, JSON_SR, PROTOBUF, JSON, STRING or BSON. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.",
          "recommended_values": [
            "AVRO",
            "JSON_SR",
            "PROTOBUF",
            "JSON",
            "STRING",
            "BSON"
          ],
          "dependents": [
            "schema.registry.url"
          ]
        },
        {
          "name": "input.key.format",
          "type": "STRING",
          "required": false,
          "default_value": "STRING",
          "importance": "HIGH",
          "group": "Input messages",
          "order_in_group": 2,
          "display_name": "Input Kafka record key format",
          "alias": "key.format",
          "documentation": "Sets the input Kafka record key format. Valid entries are AVRO, BYTES, JSON, JSON_SR, PROTOBUF, or STRING. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF",
          "recommended_values": [
            "AVRO",
            "BYTES",
            "JSON",
            "JSON_SR",
            "PROTOBUF",
            "STRING"
          ],
          "dependents": [
            "schema.registry.url"
          ]
        },
        {
          "name": "cdc.handler",
          "type": "STRING",
          "required": false,
          "default_value": "None",
          "importance": "LOW",
          "group": "Input messages",
          "order_in_group": 2,
          "display_name": "Change Data Capture handler",
          "documentation": "The class name of the CDC handler to use for processing. You can capture CDC events with the MongoDB Kafka sink connector and perform corresponding insert, update, and delete operations to a destination MongoDB cluster.",
          "recommended_values": [
            "None",
            "MongoDbChangeStreamHandler",
            "DebeziumMongoDbHandler",
            "DebeziumMySqlHandler",
            "DebeziumPostgresHandler",
            "QlikRdbmsHandler"
          ]
        },
        {
          "name": "delete.on.null.values",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 1,
          "display_name": "Delete on null values",
          "documentation": "Whether or not the connector should try to delete documents based on key when value is null.",
          "recommended_values": [
            "true",
            "false"
          ]
        },
        {
          "name": "mongodb.instance.type",
          "type": "STRING",
          "required": true,
          "default_value": "MONGODB_ATLAS",
          "importance": "HIGH",
          "group": "How should we connect to your MongoDB database?",
          "order_in_group": 1,
          "display_name": "MongoDB instance type",
          "documentation": "Specifies the type of MongoDB instance the connector will connect to.",
          "recommended_values": [
            "MONGODB_SELF_MANAGED",
            "MONGODB_ATLAS"
          ]
        },
        {
          "name": "connection.host",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "default_value": "",
          "group": "How should we connect to your MongoDB database?",
          "order_in_group": 2,
          "display_name": "Connection host",
          "documentation": "For MongoDB Atlas, provide the SRV connection host (e.g., mycluster.abc123.mongodb.net). For Self Managed MongoDB, provide the host and port in MongoDB URI format, e.g., host1:27017 or host1:27017/?replicaSet=myReplicaSet.",
          "sanitizers": [
            {
              "name": "trim"
            }
          ]
        },
        {
          "name": "connection.user",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your MongoDB database?",
          "order_in_group": 3,
          "display_name": "Connection user",
          "documentation": "MongoDB connection user.",
          "sanitizers": [
            {
              "name": "trim"
            }
          ]
        },
        {
          "name": "connection.password",
          "type": "PASSWORD",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your MongoDB database?",
          "order_in_group": 4,
          "display_name": "Connection password",
          "documentation": "MongoDB connection password."
        },
        {
          "name": "database",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your MongoDB database?",
          "order_in_group": 5,
          "display_name": "Database name",
          "documentation": "MongoDB database name."
        },
        {
          "name": "collection",
          "type": "STRING",
          "required": false,
          "importance": "MEDIUM",
          "group": "Database details",
          "order_in_group": 1,
          "display_name": "Collection name",
          "documentation": "Collection name to write to. If the connector is sinking data from multiple topics, this is the default collection the topics are mapped to."
        },
        {
          "name": "max.num.retries",
          "type": "INT",
          "required": false,
          "default_value": "3",
          "importance": "LOW",
          "group": "Connection details",
          "order_in_group": 1,
          "display_name": "Max number of retries",
          "documentation": "How many retries should be attempted on write errors."
        },
        {
          "name": "retries.defer.timeout",
          "type": "INT",
          "required": false,
          "default_value": "5000",
          "importance": "LOW",
          "group": "Connection details",
          "order_in_group": 2,
          "display_name": "Retry defer timeout (ms)",
          "documentation": "How long a retry should get deferred."
        },
        {
          "name": "write.strategy",
          "type": "STRING",
          "required": false,
          "default_value": "DefaultWriteModelStrategy",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 6,
          "display_name": "Write Model Strategy",
          "documentation": "The class that specifies the WriteModel to use for bulk writes.",
          "recommended_values": [
            "DefaultWriteModelStrategy",
            "InsertOneDefaultStrategy",
            "ReplaceOneDefaultStrategy",
            "ReplaceOneBusinessKeyStrategy",
            "DeleteOneDefaultStrategy",
            "UpdateOneTimestampsStrategy",
            "UpdateOneBusinessKeyTimestampStrategy",
            "UpdateOneDefaultStrategy"
          ]
        },
        {
          "name": "max.batch.size",
          "type": "INT",
          "required": false,
          "default_value": "0",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 2,
          "display_name": "Max batch size",
          "documentation": "The maximum number of sink records to possibly batch together for processing."
        },
        {
          "name": "bulk.write.ordered",
          "type": "STRING",
          "required": false,
          "default_value": "true",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 3,
          "display_name": "Use ordered bulk writes",
          "documentation": "Whether the batches controlled by 'max.batch.size' must be written via ordered bulk writes.",
          "recommended_values": [
            "false",
            "true"
          ]
        },
        {
          "name": "rate.limiting.timeout",
          "type": "INT",
          "required": false,
          "default_value": "0",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 4,
          "display_name": "Rate limiting timeout",
          "documentation": "How long in ms processing should wait before continuing after triggering a rate limit."
        },
        {
          "name": "rate.limiting.every.n",
          "type": "INT",
          "required": false,
          "default_value": "0",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 5,
          "display_name": "Rate limiting batch number",
          "documentation": "The number of processed batches that will trigger rate limiting. The default value of 0 sets no rate limiting."
        },
        {
          "name": "delete.write.strategy",
          "type": "STRING",
          "required": false,
          "default_value": "DeleteOneDefaultStrategy",
          "importance": "LOW",
          "group": "Writes",
          "order_in_group": 7,
          "display_name": "Delete Write Model Strategy",
          "documentation": "The class that handles how to build the delete write models for the sink documents.",
          "recommended_values": [
            "InsertOneDefaultStrategy",
            "ReplaceOneDefaultStrategy",
            "ReplaceOneBusinessKeyStrategy",
            "DeleteOneDefaultStrategy",
            "DeleteOneBusinessKeyStrategy",
            "UpdateOneDefaultStrategy",
            "UpdateOneTimestampsStrategy",
            "UpdateOneBusinessKeyTimestampStrategy"
          ]
        },
        {
          "name": "doc.id.strategy",
          "type": "STRING",
          "required": false,
          "default_value": "BsonOidStrategy",
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 1,
          "display_name": "Document ID strategy",
          "documentation": "The IdStrategy class name to use for generating a unique document id (_id).",
          "recommended_values": [
            "BsonOidStrategy",
            "KafkaMetaDataStrategy",
            "FullKeyStrategy",
            "ProvidedInKeyStrategy",
            "ProvidedInValueStrategy",
            "PartialKeyStrategy",
            "PartialValueStrategy",
            "UuidStrategy"
          ]
        },
        {
          "name": "doc.id.strategy.overwrite.existing",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 2,
          "display_name": "Document ID strategy overwrite existing",
          "documentation": "Whether the connector should overwrite existing values in the `_id` field when the strategy defined in doc.id.strategy is applied.",
          "recommended_values": [
            "false",
            "true"
          ]
        },
        {
          "name": "document.id.strategy.uuid.format",
          "type": "STRING",
          "required": false,
          "default_value": "string",
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 3,
          "display_name": "Document ID strategy UUID format",
          "documentation": "The bson output format when using the `UuidStrategy`. Can be either `String` or `Binary`.",
          "recommended_values": [
            "String",
            "Binary"
          ]
        },
        {
          "name": "key.projection.type",
          "type": "STRING",
          "required": false,
          "default_value": "none",
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 4,
          "display_name": "Document ID strategy key projection type",
          "documentation": "For use with the `PartialKeyStrategy` allows custom key fields to be projected for the ID strategy. Use either `AllowList` or `BlockList`.",
          "recommended_values": [
            "allowlist",
            "blocklist",
            "none"
          ]
        },
        {
          "name": "key.projection.list",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 5,
          "display_name": "Document ID strategy key projection list",
          "documentation": "For use with the `PartialKeyStrategy` allows custom key fields to be projected for the ID strategy. A comma-separated list of field names for key projection."
        },
        {
          "name": "value.projection.type",
          "type": "STRING",
          "required": false,
          "default_value": "none",
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 6,
          "display_name": "Document ID strategy value projection type",
          "documentation": "For use with the `PartialValueStrategy` allows custom value fields to be projected for the ID strategy. Use either `AllowList` or `BlockList`.",
          "recommended_values": [
            "allowlist",
            "blocklist",
            "none"
          ]
        },
        {
          "name": "value.projection.list",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "ID strategies",
          "order_in_group": 7,
          "display_name": "Document ID strategy value projection list",
          "documentation": "For use with the `PartialValueStrategy` allows custom value fields to be projected for the ID strategy. A comma-separated list of field names for value projection."
        },
        {
          "name": "timeseries.timefield",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 1,
          "display_name": "Timefield",
          "documentation": "The name of the top-level field which contains the date in each time series document. Setting this config will create a time series collection where each document will have a BSON date as the value for the timefield."
        },
        {
          "name": "timeseries.timefield.auto.convert",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 2,
          "display_name": "Auto Conversion",
          "documentation": "Whether to convert the data in the field into a BSON Date format. Supported formats include integer, long, and string.",
          "recommended_values": [
            "true",
            "false"
          ]
        },
        {
          "name": "timeseries.timefield.auto.convert.date.format",
          "type": "STRING",
          "required": false,
          "default_value": "yyyy-MM-dd[['T'][ ]][HH:mm:ss[[.][SSSSSS][SSS]][ ]VV[ ]'['VV']'][HH:mm:ss[[.][SSSSSS][SSS]][ ]X][HH:mm:ss[[.][SSSSSS][SSS]]]",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 3,
          "display_name": "Auto Convert Date Format",
          "documentation": "The string pattern to convert the source data from. The setting expects the string representation to contain both date and time information and uses the Java DateTimeFormatter.ofPattern(pattern, locale) API for the conversion. If the string only contains date information, then the time since epoch is from the start of that day. If a string representation does not contain time-zone offset, then the setting interprets the extracted date and time as UTC."
        },
        {
          "name": "timeseries.timefield.auto.convert.locale.language.tag",
          "type": "STRING",
          "required": false,
          "default_value": "en",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 4,
          "display_name": "Locale Language Tag",
          "documentation": "The DateTimeFormatter locale language tag to use with the date pattern.",
          "recommender": {
            "name": "locale.ietf"
          }
        },
        {
          "name": "timeseries.metafield",
          "type": "STRING",
          "required": false,
          "default_value": "",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 5,
          "display_name": "Metafield",
          "documentation": "The name of the top-level field that contains metadata in each time series document. This field groups related data. It can be of any type except array."
        },
        {
          "name": "timeseries.expire.after.seconds",
          "type": "INT",
          "required": false,
          "default_value": "0",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 6,
          "display_name": "Expire After Seconds",
          "documentation": "The amount of seconds the data remains in MongoDB before MongoDB deletes it. Omitting this field means data will not be deleted automatically."
        },
        {
          "name": "ts.granularity",
          "type": "STRING",
          "required": false,
          "default_value": "None",
          "importance": "LOW",
          "group": "Time Series configuration",
          "order_in_group": 7,
          "display_name": "Granularity",
          "documentation": "The expected interval between subsequent measurements for a time-series. Set this to None or leave it empty if the data is not time-series",
          "recommended_values": [
            "None",
            "seconds",
            "minutes",
            "hours"
          ]
        },
        {
          "name": "server.api.version",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Server API",
          "order_in_group": 1,
          "display_name": "Server API version",
          "documentation": "The server API version to use. Disabled by default."
        },
        {
          "name": "server.api.deprecation.errors",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Server API",
          "order_in_group": 2,
          "display_name": "Deprecation errors",
          "recommended_values": [
            "true",
            "false"
          ],
          "documentation": "Sets whether the connector requires use of deprecated server APIs to be reported as errors."
        },
        {
          "name": "server.api.strict",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Server API",
          "order_in_group": 3,
          "display_name": "Strict",
          "recommended_values": [
            "true",
            "false"
          ],
          "documentation": "Sets whether the application requires strict server API version enforcement."
        },
        {
          "name": "namespace.mapper.class",
          "type": "STRING",
          "required": false,
          "default_value": "DefaultNamespaceMapper",
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 1,
          "display_name": "Namespace mapper class",
          "documentation": "The class that determines the namespace to write the sink data to. By default this will be based on the 'database' configuration and either the topic name or the 'collection' configuration.",
          "recommended_values": [
            "DefaultNamespaceMapper",
            "FieldPathNamespaceMapper"
          ]
        },
        {
          "name": "namespace.mapper.key.database.field",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 2,
          "display_name": "Key field for destination database name",
          "documentation": "The key field to use as the destination database name."
        },
        {
          "name": "namespace.mapper.key.collection.field",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 3,
          "display_name": "Key field for destination collection name",
          "documentation": "The key field to use as the destination collection name."
        },
        {
          "name": "namespace.mapper.value.database.field",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 4,
          "display_name": "Value field for destination database name",
          "documentation": "The value field to use as the destination database name."
        },
        {
          "name": "namespace.mapper.value.collection.field",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 5,
          "display_name": "Value field for destination collection name",
          "documentation": "The value field to use as the destination collection name."
        },
        {
          "name": "namespace.mapper.error.if.invalid",
          "type": "STRING",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Namespace mapping",
          "order_in_group": 38,
          "display_name": "Mapped field error",
          "documentation": "Whether to throw an error if the mapped field is missing or invalid. Defaults to false.",
          "recommended_values": [
            "true",
            "false"
          ]
        },
        {
          "name": "mongo.errors.tolerance",
          "type": "STRING",
          "required": false,
          "default_value": "NONE",
          "importance": "MEDIUM",
          "group": "Error handling",
          "order_in_group": 1,
          "display_name": "Error tolerance",
          "recommended_values": [
            "NONE",
            "ALL"
          ],
          "documentation": "Use this property if you would like to configure the connector's error handling behavior differently from the Connect framework's."
        },
        {
          "name": "post.processor.chain",
          "type": "LIST",
          "required": false,
          "default_value": "com.mongodb.kafka.connect.sink.processor.DocumentIdAdder",
          "importance": "LOW",
          "group": "Post Processing",
          "order_in_group": 1,
          "display_name": "Post Processor Chain",
          "documentation": "A comma separated list of post processor classes to process the data before saving to MongoDB."
        },
        {
          "name": "field.renamer.mapping",
          "type": "STRING",
          "required": false,
          "default_value": "[]",
          "importance": "LOW",
          "group": "Post Processing",
          "order_in_group": 2,
          "display_name": "Field Renamer Mapping",
          "documentation": "An inline JSON array with objects describing field name mappings. Example: ``[{\"oldName\":\"key.fieldA\",\"newName\":\"field1\"},{\"oldName\":\"value.xyz\",\"newName\":\"abc\"}]``"
        }
      ],
      "connector_configs": [
        {
          "name": "consumer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "consumer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "producer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "producer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "admin.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "admin.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "value.converter",
          "switch": {
            "input.data.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter",
              "JSON": "org.apache.kafka.connect.json.JsonConverter",
              "STRING": "org.apache.kafka.connect.storage.StringConverter",
              "BSON": "org.apache.kafka.connect.converters.ByteArrayConverter"
            }
          }
        },
        {
          "name": "value.converter.schema.registry.url",
          "switch": {
            "input.data.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.credentials.source",
          "switch": {
            "input.data.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.user.info",
          "switch": {
            "input.data.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "topics"
        },
        {
          "name": "tasks.max"
        },
        {
          "name": "document.id.strategy",
          "switch": {
            "doc.id.strategy": {
              "BsonOidStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy",
              "KafkaMetaDataStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.KafkaMetaDataStrategy",
              "FullKeyStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.FullKeyStrategy",
              "ProvidedInKeyStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInKeyStrategy",
              "ProvidedInValueStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.ProvidedInValueStrategy",
              "PartialKeyStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialKeyStrategy",
              "PartialValueStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy",
              "UuidStrategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.UuidStrategy"
            }
          }
        },
        {
          "name": "document.id.strategy.overwrite.existing",
          "value": "${doc.id.strategy.overwrite.existing}"
        },
        {
          "name": "writemodel.strategy",
          "switch": {
            "write.strategy": {
              "DefaultWriteModelStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.DefaultWriteModelStrategy",
              "InsertOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.InsertOneDefaultStrategy",
              "ReplaceOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneDefaultStrategy",
              "ReplaceOneBusinessKeyStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneBusinessKeyStrategy",
              "DeleteOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.DeleteOneDefaultStrategy",
              "UpdateOneTimestampsStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneTimestampsStrategy",
              "UpdateOneBusinessKeyTimestampStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneBusinessKeyTimestampStrategy",
              "UpdateOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneDefaultStrategy"
            }
          }
        },
        {
          "name": "change.data.capture.handler",
          "switch": {
            "cdc.handler": {
              "None": "",
              "MongoDbChangeStreamHandler": "com.mongodb.kafka.connect.sink.cdc.mongodb.ChangeStreamHandler",
              "DebeziumMongoDbHandler": "com.mongodb.kafka.connect.sink.cdc.debezium.mongodb.MongoDbHandler",
              "DebeziumMySqlHandler": "com.mongodb.kafka.connect.sink.cdc.debezium.rdbms.mysql.MysqlHandler",
              "DebeziumPostgresHandler": "com.mongodb.kafka.connect.sink.cdc.debezium.rdbms.postgres.PostgresHandler",
              "QlikRdbmsHandler": "com.mongodb.kafka.connect.sink.cdc.qlik.rdbms.RdbmsHandler"
            }
          }
        },
        {
          "name": "document.id.strategy.uuid.format"
        },
        {
          "name": "cloud.provider",
          "switch": {
            "cloud.environment": {
              "private": "aws",
              "DEFAULT": "${cloud.provider}"
            }
          }
        },
        {
          "name": "kafka.region",
          "switch": {
            "cloud.environment": {
              "private": "us-west-2",
              "DEFAULT": "${kafka.region}"
            }
          }
        },
        {
          "name": "connection.uri",
          "switch": {
            "mongodb.instance.type": {
              "MONGODB_ATLAS": "mongodb+srv://${connection.user}:${connection.password}@${connection.host}",
              "MONGODB_SELF_MANAGED": "mongodb://${connection.user}:${connection.password}@${connection.host}"
            }
          }
        },
        {
          "name": "namespace.mapper",
          "switch": {
            "namespace.mapper.class": {
              "DefaultNamespaceMapper": "com.mongodb.kafka.connect.sink.namespace.mapping.DefaultNamespaceMapper",
              "FieldPathNamespaceMapper": "com.mongodb.kafka.connect.sink.namespace.mapping.FieldPathNamespaceMapper"
            }
          }
        },
        {
          "name": "database"
        },
        {
          "name": "collection"
        },
        {
          "name": "max.num.retries"
        },
        {
          "name": "retries.defer.timeout"
        },
        {
          "name": "max.batch.size"
        },
        {
          "name": "delete.on.null.values"
        },
        {
          "name": "bulk.write.ordered"
        },
        {
          "name": "rate.limiting.timeout"
        },
        {
          "name": "rate.limiting.every.n"
        },
        {
          "name": "key.projection.type"
        },
        {
          "name": "key.projection.list"
        },
        {
          "name": "value.projection.type"
        },
        {
          "name": "value.projection.list"
        },
        {
          "name": "timeseries.timefield"
        },
        {
          "name": "timeseries.timefield.auto.convert.date.format"
        },
        {
          "name": "timeseries.timefield.auto.convert"
        },
        {
          "name": "timeseries.timefield.auto.convert.locale.language.tag"
        },
        {
          "name": "timeseries.metafield"
        },
        {
          "name": "timeseries.expire.after.seconds"
        },
        {
          "name": "timeseries.granularity",
          "switch": {
            "ts.granularity": {
              "None": "",
              "seconds": "seconds",
              "minutes": "minutes",
              "hours": "hours"
            }
          }
        },
        {
          "name": "schema.cache.size",
          "value": "1000"
        },
        {
          "name": "enhanced.avro.schema.support",
          "value": "true"
        },
        {
          "name": "locale",
          "value": "en"
        },
        {
          "name": "timezone",
          "value": "UTC"
        },
        {
          "name": "rotate.interval.ms",
          "value": "86400000"
        },
        {
          "name": "timestamp.extractor",
          "value": "Record"
        },
        {
          "name": "behavior.on.null.values",
          "value": "ignore"
        },
        {
          "name": "mongo.errors.tolerance"
        },
        {
          "name": "provider",
          "value": "confluent-cloud"
        },
        {
          "name": "server.api.version"
        },
        {
          "name": "server.api.deprecation.errors"
        },
        {
          "name": "server.api.strict"
        },
        {
          "name": "namespace.mapper.key.database.field"
        },
        {
          "name": "namespace.mapper.key.collection.field"
        },
        {
          "name": "namespace.mapper.value.database.field"
        },
        {
          "name": "namespace.mapper.value.collection.field"
        },
        {
          "name": "namespace.mapper.error.if.invalid"
        },
        {
          "name": "connector.endpoint"
        },
        {
          "name": "mongo.errors.log.enable",
          "value": "true"
        },
        {
          "name": "post.processor.chain"
        },
        {
          "name": "field.renamer.mapping"
        },
        {
          "name": "delete.writemodel.strategy",
          "switch": {
            "delete.write.strategy": {
              "InsertOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.InsertOneDefaultStrategy",
              "ReplaceOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneDefaultStrategy",
              "ReplaceOneBusinessKeyStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneBusinessKeyStrategy",
              "DeleteOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.DeleteOneDefaultStrategy",
              "DeleteOneBusinessKeyStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.DeleteOneBusinessKeyStrategy",
              "UpdateOneDefaultStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneDefaultStrategy",
              "UpdateOneTimestampsStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneTimestampsStrategy",
              "UpdateOneBusinessKeyTimestampStrategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneBusinessKeyTimestampStrategy"
            }
          }
        },
        {
          "name": "regex.timeout.ms",
          "value": "100"
        }
      ]
    },
    {
      "template_id": "common",
      "global_validators": [
        {
          "name": "required",
          "priority": "HIGHEST"
        },
        {
          "name": "recommended.values",
          "priority": "HIGHER"
        }
      ],
      "abstract": true,
      "config_defs": [
        {
          "name": "connector.class",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 1,
          "display_name": "Connector class"
        },
        {
          "name": "name",
          "type": "STRING",
          "required": true,
          "importance": "HIGH",
          "group": "How should we connect to your data?",
          "order_in_group": 2,
          "display_name": "Connector name",
          "documentation": "Sets a name for your connector."
        },
        {
          "name": "tasks.max",
          "type": "INT",
          "required": true,
          "importance": "HIGH",
          "group": "Number of tasks for this connector",
          "order_in_group": 1,
          "display_name": "Tasks",
          "documentation": "Maximum number of tasks for the connector."
        },
        {
          "name": "kafka.auth.mode",
          "type": "STRING",
          "required": false,
          "default_value": "KAFKA_API_KEY",
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 1,
          "display_name": "Kafka Cluster Authentication mode",
          "documentation": "Kafka Authentication mode. It can be one of KAFKA_API_KEY or SERVICE_ACCOUNT. It defaults to KAFKA_API_KEY mode.",
          "recommended_values": [
            "SERVICE_ACCOUNT",
            "KAFKA_API_KEY"
          ]
        },
        {
          "name": "kafka.api.key",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 2,
          "display_name": "Kafka API Key",
          "documentation": "Kafka API Key. Required when kafka.auth.mode==KAFKA_API_KEY."
        }
      ],
      "connector_configs": [
        {
          "name": "tasks.max"
        },
        {
          "name": "confluent.topic.bootstrap.servers",
          "value": "Placeholder value to pass connector validations"
        },
        {
          "name": "errors.log.enable",
          "value": "true"
        },
        {
          "name": "errors.log.include.messages",
          "value": "false"
        },
        {
          "name": "errors.retry.timeout",
          "value": "300000"
        },
        {
          "name": "errors.retry.delay.max.ms",
          "value": "30000"
        },
        {
          "name": "value.converter.ignore.modern.dialects",
          "value": "true"
        }
      ]
    },
    {
      "template_id": "common-kafka-connectivity",
      "abstract": true,
      "config_defs": [],
      "connector_configs": [
        {
          "name": "consumer.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "producer.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "admin.override.bootstrap.servers",
          "switch": {
            "connect.metadata_property.kafka.itsl.bootstrap.servers": {
              "UNSET": "${kafka.endpoint}",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.bootstrap.servers}"
            }
          }
        },
        {
          "name": "admin.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "producer.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "consumer.override.ssl.trustmanager.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "SECURED": "ConfluentTls",
              "DEFAULT": "PKIX"
            }
          }
        },
        {
          "name": "admin.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "producer.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "consumer.override.ssl.endpoint.identification.algorithm",
          "switch": {
            "connect.metadata_property.kafka.itsl.ssl.endpoint.identification.algorithm": {
              "UNSECURED_PREPROD_ONLY": "",
              "SECURED": "",
              "DEFAULT": "https"
            }
          }
        },
        {
          "name": "admin.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.security.providers",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator,io.confluent.kafka.server.plugins.ssl.ConfluentTrustProviderCreator",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.provider",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "BCJSSE",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.cipher.suites",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CCM,TLS_ECDHE_ECDSA_WITH_AES_128_CCM,TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_AES_128_CCM_8_SHA256",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "admin.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "consumer.override.ssl.enabled.protocols",
          "switch": {
            "connect.fips.provider": {
              "BCJSSE": "TLSv1.2,TLSv1.3",
              "DEFAULT": null
            }
          }
        },
        {
          "name": "producer.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "consumer.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "admin.override.confluent.lkc.id",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "",
              "DEFAULT": "${connect.metadata_property.kafka.itsl.embed.lkc}"
            }
          }
        },
        {
          "name": "producer.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "producer.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "consumer.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "consumer.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        },
        {
          "name": "admin.override.confluent.proxy.protocol.client.mode",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "PROXY",
              "DEFAULT": "LOCAL"
            }
          }
        },
        {
          "name": "admin.override.confluent.proxy.protocol.client.version",
          "switch": {
            "connect.metadata_property.kafka.itsl.embed.lkc": {
              "SKIP": "NONE",
              "DEFAULT": "V2"
            }
          }
        }
      ]
    },
    {
      "template_id": "common-sink",
      "abstract": true,
      "config_defs": [
        {
          "name": "kafka.service.account.id",
          "type": "STRING",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 2,
          "display_name": "Kafka Service Account",
          "documentation": "The Service Account that will be used to generate the API keys to communicate with Kafka Cluster."
        },
        {
          "name": "kafka.api.secret",
          "type": "PASSWORD",
          "required": false,
          "importance": "HIGH",
          "group": "Kafka Cluster credentials",
          "order_in_group": 3,
          "display_name": "Kafka API Secret",
          "documentation": "Secret associated with Kafka API key. Required when kafka.auth.mode==KAFKA_API_KEY.",
          "dependents": [
            "kafka.api.key"
          ]
        },
        {
          "name": "topics",
          "type": "LIST",
          "required": true,
          "importance": "HIGH",
          "group": "Which topics do you want to get data from?",
          "order_in_group": 1,
          "display_name": "Topic names",
          "documentation": "Identifies the topic name or a comma-separated list of topic names.",
          "dependents": [
            "kafka.api.secret"
          ],
          "sanitizers": [
            {
              "name": "trim.list"
            }
          ]
        },
        {
          "name": "max.poll.interval.ms",
          "type": "LONG",
          "required": false,
          "importance": "LOW",
          "group": "Consumer configuration",
          "order_in_group": 1,
          "display_name": "Max poll interval(ms)",
          "default_value": "300000",
          "documentation": "The maximum delay between subsequent consume requests to Kafka. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 300000 milliseconds (5 minutes)."
        },
        {
          "name": "max.poll.records",
          "type": "LONG",
          "required": false,
          "importance": "LOW",
          "group": "Consumer configuration",
          "order_in_group": 2,
          "display_name": "Max poll records",
          "default_value": "500",
          "documentation": "The maximum number of records to consume from Kafka in a single request. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 500 records."
        },
        {
          "name": "errors.tolerance",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "default_value": "all",
          "display_name": "errors.tolerance",
          "documentation": "Use this property if you would like to configure the connector's error handling behavior. WARNING: This property should be used with CAUTION for SOURCE CONNECTORS as it may lead to dataloss. If you set this property to 'all', the connector will not fail on errant records, but will instead log them (and send to DLQ for Sink Connectors) and continue processing. If you set this property to 'none', the connector task will fail on errant records.",
          "recommended_values": [
            "none",
            "all"
          ]
        },
        {
          "name": "errors.deadletterqueue.topic.name",
          "type": "STRING",
          "importance": "LOW",
          "group": "Which topics do you want to get data from?",
          "order_in_group": 2,
          "display_name": "Dead Letter Queue Topic Name",
          "documentation": "The name of the topic to be used as the dead letter queue (DLQ) for messages that result in an error when processed by this sink connector, or its transformations or converters. Defaults to 'dlq-${connector}' if not set. The DLQ topic will be created automatically if it does not exist. You can provide ``${connector}`` in the value to use it as a placeholder for the logical cluster ID.",
          "default_value": "dlq-${connector}"
        }
      ],
      "connector_configs": [
        {
          "name": "topics"
        },
        {
          "name": "errors.tolerance"
        },
        {
          "name": "errors.deadletterqueue.topic.name",
          "dynamic.mapper": {
            "name": "errors.deadletterqueue.topic.mapper"
          }
        },
        {
          "name": "errors.deadletterqueue.topic.replication.factor",
          "value": "3"
        },
        {
          "name": "errors.deadletterqueue.context.headers.enable",
          "value": "true"
        },
        {
          "name": "consumer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "consumer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "consumer.override.max.poll.interval.ms",
          "value": "${max.poll.interval.ms}"
        },
        {
          "name": "consumer.override.max.poll.records",
          "value": "${max.poll.records}"
        },
        {
          "name": "producer.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "producer.override.sasl.mechanism",
          "value": "PLAIN"
        },
        {
          "name": "admin.override.security.protocol",
          "value": "SASL_SSL"
        },
        {
          "name": "admin.override.sasl.mechanism",
          "value": "PLAIN"
        }
      ]
    },
    {
      "template_id": "csfle-sink",
      "abstract": true,
      "config_defs": [
        {
          "name": "csfle.enabled",
          "type": "BOOLEAN",
          "default_value": "false",
          "importance": "HIGH",
          "group": "CSFLE",
          "order_in_group": 1,
          "docs_hidden": true,
          "display_name": "Enable Client-Side Field Level Encryption",
          "documentation": "Determines whether the connector honours CSFLE rules or not",
          "conditional_metadata_provider": [
            {
              "name": "metadata.conditional.visible",
              "arguments": {
                "config": "csfle.configs.visible",
                "values": "false"
              },
              "metadata": {
                "visibility": "false"
              }
            }
          ]
        },
        {
          "name": "csfle.onFailure",
          "type": "STRING",
          "required": false,
          "default_value": "ERROR",
          "importance": "MEDIUM",
          "group": "CSFLE",
          "order_in_group": 3,
          "docs_hidden": true,
          "display_name": "Connector behaviour on data decryption failure",
          "documentation": "Configures the behavior for decryption failures. If set to ERROR, the connector will behave as configured for error behaviour. If set to NONE, the connector will ignore the decryption failure and proceed to write the data in its encrypted form.",
          "recommended_values": [
            "ERROR",
            "NONE"
          ]
        },
        {
          "name": "sr.service.account.id",
          "type": "STRING",
          "importance": "HIGH",
          "group": "CSFLE",
          "order_in_group": 2,
          "docs_hidden": true,
          "display_name": "Schema Registry Service Account",
          "documentation": "Select the service account that has appropriate permissions to schemas and encryption keys in the Schema Registry."
        }
      ],
      "connector_configs": [
        {
          "name": "csfle.enabled"
        },
        {
          "name": "value.converter.rule.executors._ENCRYPT_.disabled",
          "switch": {
            "csfle.enabled": {
              "true": "false",
              "false": "true"
            }
          }
        },
        {
          "name": "value.converter.rule.executors._ENCRYPT_.onFailure",
          "switch": {
            "csfle.onFailure": {
              "ERROR": "ERROR",
              "NONE": "NONE"
            }
          }
        },
        {
          "name": "value.converter.latest.cache.ttl.sec",
          "switch": {
            "csfle.enabled": {
              "true": "300"
            }
          }
        },
        {
          "name": "key.converter.rule.executors._ENCRYPT_.disabled",
          "switch": {
            "csfle.enabled": {
              "true": "false",
              "false": "true"
            }
          }
        },
        {
          "name": "key.converter.rule.executors._ENCRYPT_.onFailure",
          "switch": {
            "csfle.onFailure": {
              "ERROR": "ERROR",
              "NONE": "NONE"
            }
          }
        },
        {
          "name": "key.converter.auto.register.schemas",
          "switch": {
            "csfle.enabled": {
              "true": "false"
            }
          }
        },
        {
          "name": "key.converter.use.latest.version",
          "switch": {
            "csfle.enabled": {
              "true": "true"
            }
          }
        },
        {
          "name": "key.converter.latest.cache.ttl.sec",
          "switch": {
            "csfle.enabled": {
              "true": "300"
            }
          }
        }
      ]
    },
    {
      "template_id": "schema-registry",
      "abstract": true,
      "config_defs": [
        {
          "name": "schema.context.name",
          "type": "STRING",
          "group": "Schema Config",
          "order_in_group": 1,
          "importance": "MEDIUM",
          "display_name": "Schema context",
          "documentation": "Add a schema context name. A schema context represents an independent scope in Schema Registry. It is a separate sub-schema tied to topics in different Kafka clusters that share the same Schema Registry instance. If not used, the connector uses the default schema configured for Schema Registry in your Confluent Cloud environment.",
          "default_value": "default",
          "dependents": [
            "schema.registry.url"
          ]
        }
      ],
      "connector_configs": []
    },
    {
      "template_id": "common-mongodb",
      "abstract": true,
      "config_defs": [],
      "connector_configs": []
    },
    {
      "template_id": "input-data-format",
      "abstract": true,
      "config_defs": [
        {
          "name": "input.data.format",
          "type": "STRING",
          "required": true,
          "default_value": "JSON",
          "importance": "HIGH",
          "alias": "data.format",
          "group": "Input messages",
          "order_in_group": 1,
          "display_name": "Input Kafka record value format",
          "documentation": "Sets the input Kafka record value format. Valid entries are AVRO, JSON_SR, PROTOBUF, JSON or BYTES. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.",
          "recommended_values": [
            "AVRO",
            "JSON_SR",
            "PROTOBUF",
            "JSON",
            "BYTES"
          ],
          "dependents": [
            "schema.registry.url"
          ]
        },
        {
          "name": "value.converter.schemas.enable",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Additional Configs",
          "alias": "schemas.enable",
          "display_name": "value.converter.schemas.enable",
          "documentation": "Include schemas within each of the serialized values. Input messages must contain `schema` and `payload` fields and may not contain additional fields. For plain JSON data, set this to `false`. Applicable for JSON Converter."
        },
        {
          "name": "value.converter.replace.null.with.default",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "alias": "replace.null.with.default",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "value.converter.replace.null.with.default",
          "documentation": "Whether to replace fields that have a default value and that are null to the default value. When set to true, the default value is used, otherwise null is used. Applicable for JSON Converter."
        },
        {
          "name": "value.converter.ignore.default.for.nullables",
          "alias": "ignore.default.for.nullables",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "value.converter.ignore.default.for.nullables",
          "documentation": "When set to true, this property ensures that the corresponding record in Kafka is NULL, instead of showing the default column value. Applicable for AVRO,PROTOBUF and JSON_SR Converters."
        },
        {
          "name": "value.converter.scrub.invalid.names",
          "type": "BOOLEAN",
          "documentation": "Whether to scrub invalid names by replacing invalid characters with valid characters. Applicable for Avro and Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.scrub.invalid.names"
        }
      ],
      "connector_configs": [
        {
          "name": "value.converter",
          "switch": {
            "input.data.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter",
              "BYTES": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "JSON": "org.apache.kafka.connect.json.JsonConverter"
            }
          }
        },
        {
          "name": "value.converter.schemas.enable"
        },
        {
          "name": "value.converter.replace.null.with.default"
        },
        {
          "name": "value.converter.schema.registry.url",
          "switch": {
            "input.data.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.credentials.source",
          "switch": {
            "input.data.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO"
            }
          }
        },
        {
          "name": "value.converter.basic.auth.user.info",
          "switch": {
            "input.data.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "value.converter.ignore.default.for.nullables"
        },
        {
          "name": "value.converter.scrub.invalid.names",
          "dynamic.mapper": {
            "name": "value.converter.scrub.invalid.names.mapper"
          }
        }
      ]
    },
    {
      "template_id": "input-key-format",
      "abstract": true,
      "config_defs": [
        {
          "name": "input.key.format",
          "type": "STRING",
          "required": false,
          "default_value": "JSON",
          "importance": "HIGH",
          "group": "Input messages",
          "order_in_group": 2,
          "display_name": "Input Kafka record key format",
          "alias": "key.format",
          "documentation": "Sets the input Kafka record key format. Valid entries are AVRO, BYTES, JSON, JSON_SR, PROTOBUF, or STRING. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF",
          "recommended_values": [
            "AVRO",
            "BYTES",
            "JSON",
            "JSON_SR",
            "PROTOBUF",
            "STRING"
          ],
          "dependents": [
            "schema.registry.url"
          ]
        },
        {
          "name": "key.converter.schemas.enable",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "false",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "key.converter.schemas.enable",
          "documentation": "Include schemas within each of the serialized keys. Input message keys must contain `schema` and `payload` fields and may not contain additional fields. For plain JSON data, set this to `false`. Applicable for JSON Key Converter."
        },
        {
          "name": "key.converter.replace.null.with.default",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "key.converter.replace.null.with.default",
          "documentation": "Whether to replace fields that have a default value and that are null to the default value. When set to true, the default value is used, otherwise null is used. Applicable for JSON Key Converter."
        }
      ],
      "connector_configs": [
        {
          "name": "key.converter",
          "switch": {
            "input.key.format": {
              "AVRO": "io.confluent.connect.avro.AvroConverter",
              "JSON_SR": "io.confluent.connect.json.JsonSchemaConverter",
              "PROTOBUF": "io.confluent.connect.protobuf.ProtobufConverter",
              "STRING": "org.apache.kafka.connect.storage.StringConverter",
              "JSON": "org.apache.kafka.connect.json.JsonConverter",
              "BYTES": "org.apache.kafka.connect.converters.ByteArrayConverter"
            }
          }
        },
        {
          "name": "key.converter.schemas.enable"
        },
        {
          "name": "key.converter.schema.registry.url",
          "switch": {
            "input.key.format": {
              "AVRO": "${schema.registry.url}",
              "JSON_SR": "${schema.registry.url}",
              "PROTOBUF": "${schema.registry.url}"
            }
          }
        },
        {
          "name": "key.converter.basic.auth.credentials.source",
          "switch": {
            "input.key.format": {
              "AVRO": "USER_INFO",
              "JSON_SR": "USER_INFO",
              "PROTOBUF": "USER_INFO"
            }
          }
        },
        {
          "name": "key.converter.basic.auth.user.info",
          "switch": {
            "input.key.format": {
              "AVRO": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "JSON_SR": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}",
              "PROTOBUF": "${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:username}:${file:/mnt/secrets/connect-sr-{{.logicalClusterId}}.properties:password}"
            }
          }
        },
        {
          "name": "key.converter.replace.null.with.default"
        }
      ]
    },
    {
      "template_id": "super",
      "abstract": true,
      "config_defs": [
        {
          "name": "auto.restart.on.user.error",
          "type": "BOOLEAN",
          "required": false,
          "default_value": "true",
          "importance": "MEDIUM",
          "group": "Auto-restart policy",
          "order_in_group": 1,
          "display_name": "Enable Connector Auto-restart",
          "documentation": "Enable connector to automatically restart on user-actionable errors."
        },
        {
          "name": "value.converter.enhanced.avro.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information and Enums. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data",
          "type": "BOOLEAN",
          "documentation": "Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support",
          "type": "BOOLEAN",
          "documentation": "Enable enhanced schema support to preserve package information. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to generate an index suffix for unions. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums",
          "type": "BOOLEAN",
          "documentation": "Whether to represent enums as integers. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should be specified with an optional label. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls",
          "type": "BOOLEAN",
          "documentation": "Whether to generate a struct variable for null values. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables",
          "type": "BOOLEAN",
          "documentation": "Whether nullable fields should use primitive wrapper messages. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives",
          "type": "BOOLEAN",
          "documentation": "Whether a wrapper message should be interpreted as a raw primitive at root level. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties",
          "type": "BOOLEAN",
          "documentation": "Whether to allow additional properties for object schemas. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired",
          "type": "BOOLEAN",
          "documentation": "Whether to set non-required properties to be optional. Applicable for JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format",
          "type": "STRING",
          "recommended_values": [
            "BASE64",
            "NUMERIC"
          ],
          "documentation": "Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:\nBASE64 to serialize DECIMAL logical types as base64 encoded binary data and\nNUMERIC to serialize Connect DECIMAL logical type values in JSON/JSON_SR as a number representing the decimal value.",
          "group": "Additional Configs",
          "alias": "json.output.decimal.format",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.decimal.format",
          "default_value": "BASE64"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "type": "BOOLEAN",
          "documentation": "Specify if the Serializer should attempt to register the Schema.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.auto.register.schemas"
        },
        {
          "name": "value.converter.use.latest.version",
          "type": "BOOLEAN",
          "documentation": "Use latest version of schema in subject for serialization when auto.register.schemas is false.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.use.latest.version"
        },
        {
          "name": "value.converter.latest.compatibility.strict",
          "type": "BOOLEAN",
          "documentation": "Verify latest subject version is backward compatible when `use.latest.version` is `true`.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "type": "STRING",
          "default_value": "TopicNameStrategy",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "alias": "key.subject.name.strategy",
          "documentation": "How to construct the subject name for key schema registration.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "key.converter.key.subject.name.strategy"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "TopicNameStrategy",
            "RecordNameStrategy",
            "TopicRecordNameStrategy"
          ],
          "default_value": "TopicNameStrategy",
          "alias": "subject.name.strategy,value.subject.name.strategy",
          "documentation": "Determines how to construct the subject name under which the value schema is registered with Schema Registry.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.value.subject.name.strategy"
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "type": "STRING",
          "recommended_values": [
            "DefaultReferenceSubjectNameStrategy",
            "QualifiedReferenceSubjectNameStrategy"
          ],
          "default_value": "DefaultReferenceSubjectNameStrategy",
          "documentation": "Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.reference.subject.name.strategy"
        },
        {
          "name": "value.converter.allow.optional.map.keys",
          "type": "BOOLEAN",
          "documentation": "Allow optional string map key when converting from Connect Schema to Avro Schema. Applicable for Avro Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions",
          "type": "BOOLEAN",
          "default_value": "false",
          "documentation": "Whether to flatten singleton unions. Applicable for Avro and JSON_SR Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2",
          "type": "BOOLEAN",
          "documentation": "Whether proto2 optionals are supported. Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions",
          "type": "BOOLEAN",
          "documentation": "Whether to flatten unions (oneofs). Applicable for Protobuf Converters.",
          "group": "Additional Configs",
          "required": false,
          "importance": "LOW",
          "display_name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "header.converter",
          "documentation": "The converter class for the headers. This is used to serialize and deserialize the headers of the messages.",
          "recommended_values": [
            "org.apache.kafka.connect.converters.BooleanConverter",
            "org.apache.kafka.connect.converters.ByteArrayConverter",
            "org.apache.kafka.connect.converters.DoubleConverter",
            "org.apache.kafka.connect.converters.FloatConverter",
            "org.apache.kafka.connect.converters.IntegerConverter",
            "org.apache.kafka.connect.converters.LongConverter",
            "org.apache.kafka.connect.converters.ShortConverter",
            "org.apache.kafka.connect.json.JsonConverter",
            "org.apache.kafka.connect.storage.SimpleHeaderConverter",
            "org.apache.kafka.connect.storage.StringConverter"
          ]
        }
      ],
      "connector_configs": [
        {
          "name": "auto.restart.on.user.error"
        },
        {
          "name": "value.converter.enhanced.avro.schema.support"
        },
        {
          "name": "value.converter.connect.meta.data"
        },
        {
          "name": "value.converter.enhanced.protobuf.schema.support"
        },
        {
          "name": "value.converter.generate.index.for.unions"
        },
        {
          "name": "value.converter.int.for.enums"
        },
        {
          "name": "value.converter.optional.for.nullables"
        },
        {
          "name": "value.converter.generate.struct.for.nulls"
        },
        {
          "name": "value.converter.wrapper.for.nullables"
        },
        {
          "name": "value.converter.wrapper.for.raw.primitives"
        },
        {
          "name": "value.converter.object.additional.properties"
        },
        {
          "name": "value.converter.use.optional.for.nonrequired"
        },
        {
          "name": "value.converter.decimal.format"
        },
        {
          "name": "value.converter.auto.register.schemas",
          "dynamic.mapper": {
            "name": "value.converter.auto.register.schemas.mapper"
          }
        },
        {
          "name": "value.converter.use.latest.version",
          "dynamic.mapper": {
            "name": "value.converter.use.latest.version.mapper"
          }
        },
        {
          "name": "value.converter.latest.compatibility.strict"
        },
        {
          "name": "value.converter.value.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "key.converter.key.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.value.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.reference.subject.name.strategy",
          "dynamic.mapper": {
            "name": "value.converter.reference.subject.name.strategy.mapper"
          }
        },
        {
          "name": "value.converter.allow.optional.map.keys"
        },
        {
          "name": "value.converter.flatten.singleton.unions"
        },
        {
          "name": "value.converter.optional.for.proto2"
        },
        {
          "name": "value.converter.flatten.unions"
        },
        {
          "name": "header.converter"
        },
        {
          "name": "key.converter.use.apache.http.client"
        },
        {
          "name": "value.converter.use.apache.http.client"
        }
      ]
    },
    {
      "template_id": "super-sink",
      "abstract": true,
      "config_defs": [
        {
          "name": "consumer.override.auto.offset.reset",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "consumer.override.auto.offset.reset",
          "documentation": "Defines the behavior of the consumer when there is no committed position (which occurs when the group is first initialized) or when an offset is out of range. You can choose either to reset the position to the “earliest” offset (the default) or the “latest” offset. You can also select “none” if you would rather set the initial offset yourself and you are willing to handle out of range errors manually. More details: https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html#auto-offset-reset",
          "recommended_values": [
            "earliest",
            "latest",
            "none"
          ]
        },
        {
          "name": "consumer.override.isolation.level",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Additional Configs",
          "display_name": "consumer.override.isolation.level",
          "documentation": "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode.  More details: https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html#isolation-level",
          "recommended_values": [
            "read_committed",
            "read_uncommitted"
          ]
        },
        {
          "name": "topics.regex",
          "type": "STRING",
          "required": false,
          "importance": "LOW",
          "group": "Which topics do you want to get data from?",
          "display_name": "Topics Regex",
          "documentation": "A regular expression that matches the names of the topics to consume from. This is useful when you want to consume from multiple topics that match a certain pattern without having to list them all individually."
        }
      ],
      "connector_configs": [
        {
          "name": "consumer.override.auto.offset.reset"
        },
        {
          "name": "consumer.override.isolation.level"
        },
        {
          "name": "topics.regex"
        }
      ]
    }
  ]
}